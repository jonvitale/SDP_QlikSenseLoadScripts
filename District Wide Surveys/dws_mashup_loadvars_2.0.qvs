/**
*	Loading Variables: District Wide Surveys
*	Jonathan Vitale
*	Changes:
*
*	Version 2.x.x:
*	Reminders:
*	- All the let statements will be strings, if you want an actual single quote in the string, use '
*	- Alternatively, you can use double-quotes in set analyses, but these enable search and wildcards, so be careful.
*   - A $(somevar) tells click to substitute whatever is somevar immediately. If you want to prevent this expansion replace $ with $
*   - Similarly $(=$(somevar)) tells Qlik to evaluate the somevar expression, if you do not want this done in the load script replace both $ with chr(36)
**/


//////////////////////////////////////////////////////////////////////// 
/// Utility functions
////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////// 
/// General variables
////////////////////////////////////////////////////////////////////////


set v_cy = =MaxString(SchoolYear);
set v_cy_short = =left('$(v_cy)', 4) & '-' & right('$(v_cy)', 2);
set v_py = =MaxString({<[SchoolYear]-={'$(v_cy)'}>}SchoolYear);
set v_py_short = =left('$(v_py)', 4) & '-' & right('$(v_py)', 2);

// these are set in backend
// set v_min_student = 25;
// set v_min_parent = 25;
// set v_min_teacher = 5;
// set v_min_principal = 5;
// set v_min_all = 25;

set v_survey_selected_question = =Only({<[SurveyQuestionCode]={'$(v_surveyquestioncode_selected)'}>}Survey)
set v_min_survey_selected_question = $(v_min_$(=lower('$(v_survey_selected_question)')));

set v_surveys_no_demos = Students, Parents;

// use these in case we ever change the name of the field, thus ensuring that we won't have to hunt
// for all incidents of the wrong field name
set v_field_surveyquestioncode = SurveyQuestionCode;
set v_field_survey = Survey;
set v_field_construct = Construct;
set v_field_construct_alias = ConstructAlias;
set v_field_subconstruct = SubConstruct;

set v_label_parentrelationship = Parent-School Relationship;

//////////////////////////////////////////////////////////////////////// 
/// General Expression Building: requires the following elements
/// 1. aggregation qualifier - such as total or distinct
/// 2. set identifier - such as 1 or Alt1 or $
/// 3. set options - such as [X]={1}, [Year]={1}
////////////////////////////////////////////////////////////////////////


/**
 * v_agg_qualifier is used to populate the space after the aggregation function name
 * first five letters should be total or distinct, but beyond that, anything goes,
 * e.g., total<[School Year]>
 * @type {[type]}
 */
set v_agg_qualifier = $(=
	pick(
		wildmatch('total', '$1*', '$2*', '$3*', '$4*','$5*', '$6*', '$7*', '$8*', '$9*') + 1,
		'', '$1', '$2', '$3', '$4','$5', '$6', '$7', '$8', '$9') & ' ' &
	pick(
		wildmatch('distinct', '$1*', '$2*', '$3*', '$4*','$5*', '$6*', '$7*', '$8*', '$9*') + 1,
		'', '$1', '$2', '$3', '$4','$5', '$6', '$7', '$8', '$9')
	);
		

/**
 * v_set_identifier is used to populate the space between opening curly bracket and angled bracket
 *  {*here*< ... >}
 *  can be a 1 (for ignore selections) or an alternative set, e.g., Alt1
 * @type {[type]}
 */
set v_set_identifier = $(=
	pick(
		wildmatch('|$1|$2|$3|$4|$5|$6|$7|$8|$9|', 
			'*|$|*', '*|1|*', '*|Alt1|*') + 1,
		'', '$', '1', 'Alt1')
	);

//////////////////////////////////////////////////////////////////////// 
/// Lists for building setopts - specific to this data model
////////////////////////////////////////////////////////////////////////

/**
 * The following list of field names are fields that require an _overall_flag to be set to 1
 */
set v_list_overall_fields = 'CountRespondents', 'CountEnrolled', 'CountRespondents_Household', 'CountEnrolled_Household', 'respondents', 'respondents_household', 'enrolled', 'enrolled_household';
set v_list_overall_fields_wild = $(=chr(39) & '*' & Concat(ValueList($(v_list_overall_fields)),  '*' & chr(39) & ', ' & chr(39) & '*') & '*' & chr(39));

set v_list_construct_fields = 'SumScaledScore_1', 'SumScaledScore_2', 'SumScaledScore_3', 'SumScaledScore_4', 'SumScaledScore_5', 'SumScaledScore_6', 'SumScaledScore_7', 'NCompleted_1', 'NCompleted_2', 'NCompleted_3', 'NCompleted_4', 'NCompleted_5', 'NCompleted_6', 'NCompleted_7';
set v_list_construct_fields_wild = $(=chr(39) & '*' & Concat(ValueList($(v_list_construct_fields)),  '*' & chr(39) & ', ' & chr(39) & '*') & '*' & chr(39));

set v_list_subconstruct_fields = 'SubConstruct_SumScaledScore', 'SubConstruct_NCompleted', 
set v_list_subconstruct_fields_wild = $(=chr(39) & '*' & Concat(ValueList($(v_list_subconstruct_fields)),  '*' & chr(39) & ', ' & chr(39) & '*') & '*' & chr(39));

set v_list_question_fields = 'SumScaledScore', 'CountResponses', 'IsHighest', '_Ans_Display_Flag';
set v_list_question_fields_wild = $(=chr(39) & '*' & Concat(ValueList($(v_list_question_fields)),  '*' & chr(39) & ', ' & chr(39) & '*') & '*' & chr(39));



//////////////////////////////////////////////////////////////////////// 
/// setopts: the text after v_setopt_* can be entered as a parameter
/// to v_setops and will use the "Set Option" in the set analysis
////////////////////////////////////////////////////////////////////////


// set v_setopt_ignoreconstructquestion = [Construct]=, [SubConstruct]=, [Topic]=, [Sub-Topic]=, 
//     [QuestionText]=, [SurveyQuestionCode]=, [QuestionCode]=, [QuestionStem]=, [AnswerText]=, [AnswerTextScore]=; 
// let v_list_ignoreconstructquestions_wild = =chr(39) & '*' & 
//         Replace(Replace(Replace(Replace('$(v_setopt_ignoreconstructquestion)','[',''), ']', ''), '=', '*'), ', ', chr(39) & ',' & chr(39) & '*')
//         & chr(39) & ',' & chr(39) & '*climate*' & chr(39) & ',' & chr(39) & '*instruction*' & chr(39) & ',' & chr(39) & '*parentrelationship*' & chr(39);

set v_setopt_ = x={1}; // this is a dummy in case user enters invalid setopt
set v_setopt_cy = [_CYTD_Flag] = {1};
set v_setopt_py = [_PYTD_Flag] = {1};
set v_setopt_student = [$(v_field_survey)]={'Student'};
set v_setopt_parent = [$(v_field_survey)]={'Parent'};
set v_setopt_teacher = [$(v_field_survey)]={'Teacher'};
set v_setopt_principal = [$(v_field_survey)]={'Principal'};
set v_setopt_district = [Sector]={'District'};
set v_setopt_charter = [Sector]={'Charter'};
set v_setopt_surveyquestioncode = [SurveyQuestionCode]={'$1'};
set v_setopt_highest = [IsHighest]={1};
set v_setopt_validanswer = [_Ans_Display_Flag]={1};
set v_setopt_overall = [_Overall_Flag]={1},
set v_setopt_question = [_Question_Flag]={1};
set v_setopt_construct = [_Construct_Flag]={1};
set v_setopt_subconstruct = [_SubConstruct_Flag]={1};
set v_setopt_climate = [$(v_field_construct)]={'School Climate'};
set v_setopt_instruction = [$(v_field_construct)]={'Instruction'};
set v_setopt_parentrelationship = [$(v_field_construct)]={'Parent/Guardian-Community Ties'}, [$(v_field_subconstruct)]={'School Relationship'};
set v_setopt_community = [$(v_field_construct)]={'Parent/Guardian-Community Ties'};
set v_setopt_professional = [Construct]={'Professional Capacity'};
set v_setopt_leadership = [Construct]={'School Leadership'};
set v_setopt_other = [Construct]={'Other'};
set v_setopt_essential = [_Essential_Flag]={1};

////// Invalid setopts are those which, if entered as a parameter to v_setopts will not produce a setopt - they usually are used for a different part of the colculation (e.g. the agg field, or total)
set v_list_invalid_setopts = '{}', '$', '$1', '$2', '$3', '$4', '$5', '$6', '$7', '$8', '$9', 'total*', 'distinct*', '1', 'Alt1','count_responses_answered', $(v_list_overall_fields),$(v_list_construct_fields), $(v_list_subconstruct_fields), $(v_list_question_fields);
///// the overall invalid lists is a special case where we need to get the overall enrollment even if the specific question, construct, subconstruct is specified
let v_list_invalid_setopts_overall = $(v_list_invalid_setopts) & '*construct*' & '*subconstruct*', '*surveyquestioncode*', 'climate', 'instruction', 'community', 'professional', 'leadership', 'parent_relationship', 'parentrelationship';


/**
 * v_setopts is used to populate the space within <> to denote set options.
 * The first parameter value $1 will assumed to be a field name and will get special consideration
 * (e.g. is this field relevant to the response rate, question score, etc)
 * A parameter such as [field]={value} can be entered to provide a specific set option
 * (specifically searching for '={', with spaces purged)
 * All other parameter values should be one of the list above: v_setopt_*these*
 **/
set v_setopts = $(=  // in case no parameters are entered
   concat(distinct
      valuelist(
        if(wildmatch('$1', $(=chr(36) & '(v_list_invalid_setopts' & if(wildmatch('|$1|$2|$3|$4|$5|$6|$7|$8|$9|', '*|overall|*'),'_overall', '') & ')')), null(), if(match(keepchar('$1', '={}()'),'={}','=()'), '$1', chr(36) & '(v_setopt_' & lower(purgechar('$1', '_ /-')) &')')), 
        if(wildmatch('$2', $(=chr(36) & '(v_list_invalid_setopts' & if(wildmatch('|$1|$2|$3|$4|$5|$6|$7|$8|$9|', '*|overall|*'),'_overall', '') & ')')), null(), if(match(keepchar('$2', '={}()'),'={}','=()'), '$2', chr(36) & '(v_setopt_' & lower(purgechar('$2', '_ /-')) &')')), 
        if(wildmatch('$3', $(=chr(36) & '(v_list_invalid_setopts' & if(wildmatch('|$1|$2|$3|$4|$5|$6|$7|$8|$9|', '*|overall|*'),'_overall', '') & ')')), null(), if(match(keepchar('$3', '={}()'),'={}','=()'), '$3', chr(36) & '(v_setopt_' & lower(purgechar('$3', '_ /-')) &')')), 
        if(wildmatch('$4', $(=chr(36) & '(v_list_invalid_setopts' & if(wildmatch('|$1|$2|$3|$4|$5|$6|$7|$8|$9|', '*|overall|*'),'_overall', '') & ')')), null(), if(match(keepchar('$4', '={}()'),'={}','=()'), '$4', chr(36) & '(v_setopt_' & lower(purgechar('$4', '_ /-')) &')')), 
        if(wildmatch('$5', $(=chr(36) & '(v_list_invalid_setopts' & if(wildmatch('|$1|$2|$3|$4|$5|$6|$7|$8|$9|', '*|overall|*'),'_overall', '') & ')')), null(), if(match(keepchar('$5', '={}()'),'={}','=()'), '$5', chr(36) & '(v_setopt_' & lower(purgechar('$5', '_ /-')) &')')), 
        if(wildmatch('$6', $(=chr(36) & '(v_list_invalid_setopts' & if(wildmatch('|$1|$2|$3|$4|$5|$6|$7|$8|$9|', '*|overall|*'),'_overall', '') & ')')), null(), if(match(keepchar('$6', '={}()'),'={}','=()'), '$6', chr(36) & '(v_setopt_' & lower(purgechar('$6', '_ /-')) &')')), 
        if(wildmatch('$7', $(=chr(36) & '(v_list_invalid_setopts' & if(wildmatch('|$1|$2|$3|$4|$5|$6|$7|$8|$9|', '*|overall|*'),'_overall', '') & ')')), null(), if(match(keepchar('$7', '={}()'),'={}','=()'), '$7', chr(36) & '(v_setopt_' & lower(purgechar('$7', '_ /-')) &')')), 
        if(wildmatch('$8', $(=chr(36) & '(v_list_invalid_setopts' & if(wildmatch('|$1|$2|$3|$4|$5|$6|$7|$8|$9|', '*|overall|*'),'_overall', '') & ')')), null(), if(match(keepchar('$8', '={}()'),'={}','=()'), '$8', chr(36) & '(v_setopt_' & lower(purgechar('$8', '_ /-')) &')')), 
        if(wildmatch('$9', $(=chr(36) & '(v_list_invalid_setopts' & if(wildmatch('|$1|$2|$3|$4|$5|$6|$7|$8|$9|', '*|overall|*'),'_overall', '') & ')')), null(), if(match(keepchar('$9', '={}()'),'={}','=()'), '$9', chr(36) & '(v_setopt_' & lower(purgechar('$9', '_ /-')) &')')),
            
      )
      , ',')
   );


set v_map_agg_field = $(=pick(match(trim(lower('$1')),
                'count_responses_highest', 'count_responses_answered','subconstruct_ncompleted', 'subconstruct_sumscaledscore', 'respondents', 'respondents_household', 'enrolled', 'enrolled_household') + 1,
		'$1',   'CountHighest', 'CountResponses', 'NCompleted', 'SumScaledScore', 'CountRespondents', 'CountRespondents_Household', 'CountEnrolled', 'CountEnrolled_Household')
);

//////////////////////////////////////////////////////////////////////// 
/// Calculations
/// calculations of response rate and question level values can be done
/// with simple uses of sum (which sum all relevant rows)
/// construct level calculations require an aggregation of aggregations
/// such as RangeAvg(sum/avg, sum/avg). Theses calculations will have _agg appended to title
////////////////////////////////////////////////////////////////////////
// note if using these for response rate, make sure to include overall as a parameter
let v_count_enrolled = $(v_sum(enrolled, overall, $1, $2, $3, $4, $5, $6, $7, $8));
let v_count_enrolled_household = $(v_sum(enrolled_household, overall, $1, $2, $3, $4, $5, $6, $7, $8));
// to be consistent with the other suppression vars, assume that first parameter is a field, which we will ignore
// however in v_supppess the first field is actually counted
let v_suppress_enrolled = if(wildmatch('|$1|$2|$3|$4|$5|$6|$7|$8|$9|', '*|suppress_none|*'),
    1,
    if(wildmatch('|$1|$2|$3|$4|$5|$6|$7|$8|$9|', '*household*', '*|parent|*') or WildMatch(Only([$(v_field_survey)]), 'parent'),
        if($(v_count_enrolled_household($2, $3, $4, $5, $6, $7, $8)) >= 5, 1, Null()),
        if($(v_count_enrolled($2, $3, $4, $5, $6, $7, $8)) >= 5, 1, Null())
    )
);

// we suppress response count based on enrollment (at least 5)
let v_count_responded = if($(v_suppress_enrolled(enrolled, $1, $2, $3, $4, $5, $6, $7, $8)), $(v_sum(respondents, overall, $1, $2, $3, $4, $5, $6, $7, $8)));
let v_count_responded_household = if($(v_suppress_enrolled(enrolled_household, $1, $2, $3, $4, $5, $6, $7, $8)), $(v_sum(respondents_household, overall, $1, $2, $3, $4, $5, $6, $7, $8)));
let v_avg_responded = $(v_count_responded($1, $2, $3, $4, $5, $6, $7, $8)) / $(v_count_enrolled($1, $2, $3, $4, $5, $6, $7, $8));
let v_avg_responded_household = $(v_count_responded_household($1, $2, $3, $4, $5, $6, $7, $8)) / $(v_count_enrolled_household($1, $2, $3, $4, $5, $6, $7, $8));


/**_household
 * v_sum will sum a field (must be first parameter)
 * and then supply all set modifiers in following parameters
 * $1 - field name, e.g. CountRespondents
 */
set v_sum = sum($(v_agg_qualifier($1, $2, $3, $4, $5, $6, $7, $8, $9))
	{$(v_set_identifier($1, $2, $3, $4, $5, $6, $7, $8, $9))
		<$(v_setopts($1, $2, $3, $4, $5, $6, $7, $8, $9))>} $(v_map_agg_field($1)));

let v_use_qlik_suppression = 0;

let v_min_respondents = Max(
    $(v_agg_qualifier($1, $2, $3, $4, $5, $6, $7, $8, $9))
    {$(v_set_identifier($1, $2, $3, $4, $5, $6, $7, $8, $9))
        <$(v_setopts($1, $2, $3, $4, $5, $6, $7, $8, $9))>}
        [RespondentMinCount$(=if(v_use_qlik_suppression=1, 'Qlik', ''))]);

let v_min_respondents_pct = Max(
    $(v_agg_qualifier($1, $2, $3, $4, $5, $6, $7, $8, $9))
    {$(v_set_identifier($1, $2, $3, $4, $5, $6, $7, $8, $9))
        <$(v_setopts($1, $2, $3, $4, $5, $6, $7, $8, $9))>}
        [RespondentMinPct$(=if(v_use_qlik_suppression=1, 'Qlik', ''))]);


 
let v_suppress = if(wildmatch('|$1|$2|$3|$4|$5|$6|$7|$8|$9|', '*|suppress_none|*'),
    1,
    if(
        $(v_sum($1, $2, $3, $4, $5, $6, $7, $8, $9))
        >= $(v_min_respondents(ignore_construct_question, $1, $2, $3, $4, $5, $6, $7, $8, $9))        
        , 
        1,
        Null()
    ) 
);

let v_suppress_pct = if(wildmatch('|$1|$2|$3|$4|$5|$6|$7|$8|$9|', '*|suppress_none|*'),
    1,
    if(
        $(v_sum($1, $2, $3, $4, $5, $6, $7, $8, $9)) >= 5 and
        if(wildmatch('|$1|$2|$3|$4|$5|$6|$7|$8|$9|', '*household*', '*|parent|*') or WildMatch(Only([$(v_field_survey)]), 'parent'),
            $(v_count_responded_household($2, $3, $4, $5, $6, $7, $8, $9))
            /
            $(v_count_enrolled_household($2, $3, $4, $5, $6, $7, $8))            
            ,
            $(v_count_responded($2, $3, $4, $5, $6, $7, $8, $9))
            /
            $(v_count_enrolled($2, $3, $4, $5, $6, $7, $8))
        ) >= $(v_min_respondents_pct($2, $3, $4, $5, $6, $7, $8, $9))
        , 1, Null()
    )
);
//////////////////////////////////////// THE FOLLOWING IS SPECIFIC TO INDIVIDUAL QUESTIONS /////////////////////////////////////////////////////////

/**
 * For any given response, what percent of the total responses was it. Do not allow suppression on numerator.
 */
let v_perc_of_total = if($(v_suppress_pct(count_responses_answered, total, $1, $2, $3, $4, $4, $5, $6, $7)),
    $(v_sum(count_responses_answered, $1, $2, $3, $4, $5, $6, $7, $8))
    / 
    $(v_sum(count_responses_answered, total, $1, $2, $3, $4, $5, $6, $7))
);

let v_count_mostpositive = $(v_sum(count_responses_highest, $1, $2, $3, $4, $5, $6, $7, $8));
let v_count_responses = $(v_sum(count_responses_answered, $1, $2, $3, $4, $5, $6, $7, $8));

let v_perc_mostpositive = if($(v_suppress_pct(count_responses_answered, $1, $2, $3, $4, $4, $5, $6, $7)),
    $(v_sum(count_responses_highest, $1, $2, $3, $4, $5, $6, $7, $8))
    /
    $(v_sum(count_responses_answered, $1, $2, $3, $4, $5, $6, $7, $8))
 );


//////////////////////////////////////// THE FOLLOWING IS SPECIFIC TO AVG SCALED SCORES /////////////////////////////////////////////////////////

let v_survey_selected = $(=Only($(v_field_survey)));
let v_construct_selected = $(=if(GetPossibleCount($(v_field_construct))=1,Only($(v_field_construct)), 'School Climate'));
let v_construct_alias_selected = $(=if(GetPossibleCount($(v_field_construct))=1,Only($(v_field_construct_alias)), 'climate'));
let v_subconstruct_selected = $(=Only($(v_field_subconstruct)));
let v_subconstruct_selected_map = 'all';
let v_field_topic_or_subtopic_selected_drill = =if(GetPossibleCount([$(v_field_construct)])=1, 'Sub-Topic', 'Topic');
/** outputs a survey, first checking the parameter, then defaulting to selected */
let v_survey = Coalesce(
	$(=pick(
		wildmatch('|$1|$2|$3|$4|$5|$6|$7|$8|$9|', '*|student|*', '*|parent|*', '*|teacher|*', '*|principal|*') + 1,
		'null()',	'Student', 'Parent', 'Teacher', 'Principal'
	)),
	Only($(v_field_survey)),
    ''
);


let v_min_survey_selected = $(v_min_$(=lower('$(v_survey_selected)')));
let v_min_survey = Alt(
	$(=pick(
		wildmatch('|$1|$2|$3|$4|$5|$6|$7|$8|$9|', '*|student|*', '*|parent*', '*|teacher|*', '*|principal|*') + 1,
		'null()', $(v_min_student), $(v_min_parent),  $(v_min_teacher),  $(v_min_principal)
	))
	,
	pick(
		match(Only([$(v_field_survey)]), 'Student', 'Parent', 'Teacher', 'Principal')+1, 
		$(v_min_all), $(v_min_student), $(v_min_parent),  $(v_min_teacher),  $(v_min_principal)
	)
);


let v_score_agg_subconstruct = if(
		$(v_suppress_pct(count_responses_answered, subconstruct, $1, $2, $3, $4, $5, $6, $7)),
	$(v_sum(SubConstruct_SumScaledScore, subconstruct, $1, $2, $3, $4, $5, $6, $7))
	/
	$(v_sum(SubConstruct_NCompleted, subconstruct, $1, $2, $3, $4, $5, $6, $7)),
	if($(v_sum(count_responses_answered, subconstruct, [$(v_field_construct)]=P([$(v_field_construct)]), 1, $1, $2, $3, $4, $5)) > 0, 'i.s.')
);

let v_score_agg_construct =  if(
		$(v_suppress_pct(count_responses_answered, construct, $1, $2, $3, $4, $5, $6, $7)),
	RangeAvg(
		$(v_sum(SumScaledScore_1, construct, $1, $2, $3, $4, $5, $6, $7)) / $(v_sum(NCompleted_1, construct, $1, $2, $3, $4, $5, $6, $7)),
		$(v_sum(SumScaledScore_2, construct, $1, $2, $3, $4, $5, $6, $7)) / $(v_sum(NCompleted_2, construct, $1, $2, $3, $4, $5, $6, $7)),
		$(v_sum(SumScaledScore_3, construct, $1, $2, $3, $4, $5, $6, $7)) / $(v_sum(NCompleted_3, construct, $1, $2, $3, $4, $5, $6, $7)),
		$(v_sum(SumScaledScore_4, construct, $1, $2, $3, $4, $5, $6, $7)) / $(v_sum(NCompleted_4, construct, $1, $2, $3, $4, $5, $6, $7)),
		$(v_sum(SumScaledScore_5, construct, $1, $2, $3, $4, $5, $6, $7)) / $(v_sum(NCompleted_5, construct, $1, $2, $3, $4, $5, $6, $7)),
		$(v_sum(SumScaledScore_6, construct, $1, $2, $3, $4, $5, $6, $7)) / $(v_sum(NCompleted_6, construct, $1, $2, $3, $4, $5, $6, $7)),
		$(v_sum(SumScaledScore_7, construct, $1, $2, $3, $4, $5, $6, $7)) / $(v_sum(NCompleted_7, construct, $1, $2, $3, $4, $5, $6, $7))
	)
	,
   if($(v_sum(count_responses_answered, construct, 1, $1, $2, $3, $3, $4, $5, $6)) > 0, 'i.s.')
);

let v_score_agg = $(v_score_agg_$(=if(GetPossibleCount($(v_field_construct)) = 1, 'subconstruct', 'construct'))($1, $2, $3, $4, $5, $6, $7, $8));

let v_score_agg_selected_subconstruct = 

/**
*	Color based on the avg scaled score.
*	$1: color offset
*	$2-$9: parameters passed onto the scoring expression
*/
let v_color_score_agg = Pick(
    RangeMax(1, Floor((10*Round($(v_score_agg($2, $3, $4, $5, $6, $7, $8, $9)), 0.1) - 40) / 10) + 2 + alt($1, 0)),
    $(vColor_Construct_Insufficient), 
  '#ae1c3e', '#ed875e', '#f2d2ae', '#d1ebfb', '#5ea4d9', '#3c52a1', '#3c52a1');


////////////////////////// FOR ALL MEASURES ACROSS ALL SURVEYS /////////////////////////////////////////////////////
let v_sum_all = RangeSum(
	$(v_sum($1, student, $2, $3, $4, $5, $6, $7, $8)),
	$(v_sum($1, teacher, $2, $3, $4, $5, $6, $7, $8)),
	$(v_sum($1, parent, $2, $3, $4, $5, $6, $7, $8))
);

let v_suppress_all_pct = if(wildmatch('|$1|$2|$3|$4|$5|$6|$7|$8|$9|', '*|suppress_none|*'),
    1,    
    Pick(
        RangeSum(
            if(
               $(v_sum($1, student, $2, $3, $4, $5, $6, $7, $8, $9)) >= 5 and
               ($(v_count_responded(student, $2, $3, $4, $5, $6, $7, $8, $9)) 
                /
                $(v_count_enrolled(student, $2, $3, $4, $5, $6, $7, $8, $9))
                >= $(v_min_respondents_pct(student, $2, $3, $4, $5, $6, $7, $8, $9))), 1, 0),
            if(
               $(v_sum($1, parent, $2, $3, $4, $5, $6, $7, $8, $9)) >= 5 and
               ($(v_count_responded_household(parent, $2, $3, $4, $5, $6, $7, $8, $9))
                /
                $(v_count_enrolled_household(parent, $2, $3, $4, $5, $6, $7, $8, $9))
                >= $(v_min_respondents_pct(parent, $2, $3, $4, $5, $6, $7, $8, $9))), 1, 0),
            if(
               $(v_sum($1, teacher, $2, $3, $4, $5, $6, $7, $8, $9)) >= 5 and
               ($(v_count_responded(teacher, $2, $3, $4, $5, $6, $7, $8, $9))
                /
                $(v_count_enrolled(teacher, $2, $3, $4, $5, $6, $7, $8, $9))
                >= $(v_min_respondents_pct(teacher, $2, $3, $4, $5, $6, $7, $8, $9))), 1, 0)
        ) + 1,
        Null(), // 0 matches: always a no
        // 1 match, only a match if there is only one respondent groups,
        if (Count(distinct {$(v_set_identifier($1, $2, $3, $4, $5, $6, $7, $8, $9))
            <$(v_setopts($1, $2, $3, $4, $5, $6, $7, $8, $9))>} [$(v_field_survey)]) = 1,
            1, 
            Null()
        ),
        1, // 2 matches, always a yes
        1 // 3 matches, always a yes
    )
);


/**
 * Determine which group's minimum to use, if student is available use that, then parent, then teacher then principal
 */
// let v_min_survey_all = Alt(
// 	pick(
// 		wildmatch(concat(distinct [$(v_field_survey)], '|'), '*Student*', '*Parent*', '*Teacher*', '*Principal*')+1, 
// 		$(v_min_all), $(v_min_student), $(v_min_parent),  $(v_min_teacher),  $(v_min_principal)
// 	), $(v_min_all)
// );

let v_score_agg_subconstruct_all = if(
	$(v_suppress_all_pct(count_responses_answered, subconstruct, $1, $2, $3, $4, $5, $6, $7)),
	RangeAvg(
		if($(v_suppress_pct(count_responses_answered, subconstruct, student, $1, $2, $3, $4, $5, $6)), 
          $(v_sum(SubConstruct_SumScaledScore, student, subconstruct, $1, $2, $3, $4, $5, $6))
		  /
		  $(v_sum(SubConstruct_NCompleted, student, subconstruct, $1, $2, $3, $4, $5, $6))
        ),
    	if($(v_suppress_pct(count_responses_answered, subconstruct, parent, $1, $2, $3, $4, $5, $6)), 
        	$(v_sum(SubConstruct_SumScaledScore, parent, subconstruct, $1, $2, $3, $4, $5, $6))
    		/
    		$(v_sum(SubConstruct_NCompleted, parent,subconstruct, $1,  $2, $3, $4, $5, $6))
        ),
		if($(v_suppress_pct(count_responses_answered, subconstruct, teacher, $1, $2, $3, $4, $5, $6)),
          $(v_sum(SubConstruct_SumScaledScore, teacher, subconstruct, $1, $2, $3, $4, $5, $6))
    	  /
    	  $(v_sum(SubConstruct_NCompleted, teacher, subconstruct, $1, $2, $3, $4, $5, $6))	
        )
	),
	if($(v_sum_all(count_responses_answered, subconstruct, [$(v_field_construct)]=P([$(v_field_construct)]), 1, $1, $2, $3, $4, $5)) > 0, 'i.s.')
);

let v_score_agg_construct_all = if(
		$(v_suppress_all_pct(count_responses_answered, construct, $1, $2, $3, $4, $5, $6, $7)),
	RangeAvg(
		if($(v_suppress_pct(count_responses_answered, construct, student, $1, $2, $3, $4, $5, $6)), $(v_sum(SumScaledScore_1, student, construct, $1, $2, $3, $4, $5, $6)) / $(v_sum(NCompleted_1, student, construct, $1, $2, $3, $4, $5, $6))),
		if($(v_suppress_pct(count_responses_answered, construct, student, $1, $2, $3, $4, $5, $6)), $(v_sum(SumScaledScore_2, student, construct, $1, $2, $3, $4, $5, $6)) / $(v_sum(NCompleted_2, student, construct, $1, $2, $3, $4, $5, $6))),
		if($(v_suppress_pct(count_responses_answered, construct, student, $1, $2, $3, $4, $5, $6)), $(v_sum(SumScaledScore_3, student, construct, $1, $2, $3, $4, $5, $6)) / $(v_sum(NCompleted_3, student, construct, $1, $2, $3, $4, $5, $6))),
		if($(v_suppress_pct(count_responses_answered, construct, parent, $1, $2, $3, $4, $5, $6)), $(v_sum(SumScaledScore_1, parent, construct, $1, $2, $3, $4, $5, $6)) / $(v_sum(NCompleted_1, parent, construct, $1, $2, $3, $4, $5, $6))),
		if($(v_suppress_pct(count_responses_answered, construct, parent, $1, $2, $3, $4, $5, $6)), $(v_sum(SumScaledScore_2, parent, construct, $1, $2, $3, $4, $5, $6)) / $(v_sum(NCompleted_2, parent, construct, $1, $2, $3, $4, $5, $6))),
		if($(v_suppress_pct(count_responses_answered, construct, parent, $1, $2, $3, $4, $5, $6)), $(v_sum(SumScaledScore_3, parent, construct, $1, $2, $3, $4, $5, $6)) / $(v_sum(NCompleted_3, parent, construct, $1, $2, $3, $4, $5, $6))),
		if($(v_suppress_pct(count_responses_answered, construct, parent, $1, $2, $3, $4, $5, $6)), $(v_sum(SumScaledScore_4, parent, construct, $1, $2, $3, $4, $5, $6)) / $(v_sum(NCompleted_4, parent, construct, $1, $2, $3, $4, $5, $6))),
		if($(v_suppress_pct(count_responses_answered, construct, parent, $1, $2, $3, $4, $5, $6)), $(v_sum(SumScaledScore_5, parent, construct, $1, $2, $3, $4, $5, $6)) / $(v_sum(NCompleted_5, parent, construct, $1, $2, $3, $4, $5, $6))),
		if($(v_suppress_pct(count_responses_answered, construct, teacher, $1, $2, $3, $4, $5, $6)), $(v_sum(SumScaledScore_1, teacher, construct, $1, $2, $3, $4, $5, $6)) / $(v_sum(NCompleted_1, teacher, construct, $1, $2, $3, $4, $5, $6))),
		if($(v_suppress_pct(count_responses_answered, construct, teacher, $1, $2, $3, $4, $5, $6)), $(v_sum(SumScaledScore_2, teacher, construct, $1, $2, $3, $4, $5, $6)) / $(v_sum(NCompleted_2, teacher, construct, $1, $2, $3, $4, $5, $6))),
		if($(v_suppress_pct(count_responses_answered, construct, teacher, $1, $2, $3, $4, $5, $6)), $(v_sum(SumScaledScore_3, teacher, construct, $1, $2, $3, $4, $5, $6)) / $(v_sum(NCompleted_3, teacher, construct, $1, $2, $3, $4, $5, $6))),
		if($(v_suppress_pct(count_responses_answered, construct, teacher, $1, $2, $3, $4, $5, $6)), $(v_sum(SumScaledScore_4, teacher, construct, $1, $2, $3, $4, $5, $6)) / $(v_sum(NCompleted_4, teacher, construct, $1, $2, $3, $4, $5, $6))),
		if($(v_suppress_pct(count_responses_answered, construct, teacher, $1, $2, $3, $4, $5, $6)), $(v_sum(SumScaledScore_5, teacher, construct, $1, $2, $3, $4, $5, $6)) / $(v_sum(NCompleted_5, teacher, construct, $1, $2, $3, $4, $5, $6))),
		if($(v_suppress_pct(count_responses_answered, construct, teacher, $1, $2, $3, $4, $5, $6)), $(v_sum(SumScaledScore_6, teacher, construct, $1, $2, $3, $4, $5, $6)) / $(v_sum(NCompleted_6, teacher, construct, $1, $2, $3, $4, $5, $6))),
		if($(v_suppress_pct(count_responses_answered, construct, teacher, $1, $2, $3, $4, $5, $6)), $(v_sum(SumScaledScore_7, teacher, construct, $1, $2, $3, $4, $5, $6)) / $(v_sum(NCompleted_7, teacher, construct, $1, $2, $3, $4, $5, $6)))
	),
	if($(v_sum_all(count_responses_answered, construct, 1, $1, $2, $3, $4, $5, $6)) > 0, 'i.s.')
);

let v_score_agg_all = $(v_score_agg_$(=if(GetPossibleCount($(v_field_construct)) = 1, 'subconstruct', 'construct'))_all(($1, $2, $3, $4, $5, $6, $7)));



let v_color_score_agg_all = Pick(
    RangeMax(1, Floor((10*Round($(v_score_agg_all($2, $3, $4, $5, $6, $7, $8, $9)), 0.1) - 40) / 10) + 2 + alt($1, 0)),
    $(vColor_Construct_Insufficient), 
  '#ae1c3e', '#ed875e', '#f2d2ae', '#d1ebfb', '#5ea4d9', '#3c52a1', '#3c52a1');



