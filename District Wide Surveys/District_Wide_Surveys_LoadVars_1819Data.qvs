/**
*	Loading Variables: District Wide Surveys
*	Jonathan Vitale
*	Changes:
*
*	Version 1.0.5.1:
*		- The counts for the focus questions include non score responses (but not skips)
*
*	Reminders:
*	- All the let statements will be strings, if you want an actual single quote in the string, use '
*	- Alternatively, you can use double-quotes in set analyses, but these enable search and wildcards, so be careful.
*   - A $(somevar) tells click to substitute whatever is somevar immediately. If you want to prevent this expansion replace $ with $
*   - Similarly $(=$(somevar)) tells Qlik to evaluate the somevar expression, if you do not want this done in the load script replace both $ with chr(36)
**/

let vPartnerDataLimiter = ='"'&Maxstring(PROGRAM_NAME)&'"';

let vSet_EPD = =IF(Len('$(vPartnerNameForApp)') > 0, 
  '<PROGRAM_NAME={$(vPartnerDataLimiter)}>',
  '');

let vSetOpts_EPD = =IF(Len('$(vPartnerNameForApp)') > 0, 
  ', PROGRAM_NAME={$(vPartnerDataLimiter)}',
  '');

///// What is the latest [SchoolYear]?
  let vMaxYearEnd = Max(YearEnd);
  let vLastYearEnd = (Max(YearEnd)-1);
  let vLastLastYearEnd = (Max(YearEnd)-2);
  let vMaxYear = (max(left([SchoolYear],4))) & '-' & (max(right([SchoolYear],4)));
  let vLastYear = (max(left([SchoolYear],4))-1) & '-' & (max(right([SchoolYear],4))-1);
  let vLastLastYear = (max(left([SchoolYear],4))-2) & '-' & (max(right([SchoolYear],4))-2);

///// what is the minimum number of individuals and percent of respondents for an analysis
  let vMinStudents = 25; 
  let vMinParents = 25;
  let vMinTeachers = 5;
  let vMinPrincipals = 5;
  
  /// for now we are not using the following
  let vMinStudentsPerc = 0; 
  let vMinParentsPerc = 0;
  let vMinTeachersPerc = 0;
  let vMinPrincipalsPerc = 0;
  
let vCol_Respondent = 
    If([Survey] = 'STUDENT', '#0B315B',
    If([Survey] = 'PARENT', '#FFAA30',
    If([Survey] = 'TEACHER', '#C3DAC2',
    If([Survey] = 'PRINCIPAL', '#47AAD8'))));


///// Response Rate
  let vSetOps_IgnoreConstructQuestion = [Construct]=, [SubConstruct]=, [Essential Construct]=, [Essential SubConstruct]=, 
    [QuestionText]=, [Survey|QuestionCode]=, [Survey|SchoolYear|QuestionCode]=, [Survey|SchoolYear|QuestionCode|Score]=; 
 
  //// Numerator - count of respondents
    /// Master Measure: vCount_Responded_Student: How many students (or other) [Responded] to the survey?
      // Note, these don't take sample size into account, but if they do here is a sample of how:
      let vCount_Responded_Student = Num(Sum({<[Respondent Group] = {"Student"} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#,##0');
      let vCount_Responded_Parent = Num(Sum({<[Respondent Group] = {"Parent"} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#,##0');
      let vCount_Responded_Teacher = Num(Sum({<[Respondent Group] = {"Teacher"} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]),'#,##0');
      let vCount_Responded_Principal = Num(Sum({<[Respondent Group] = {"Principal"} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]),'#,##0');

      let vCount1_Responded_Student = Num(Sum({1<[Respondent Group] = {"Student"} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#,##0');
      let vCount1_Responded_Parent = Num(Sum({1<[Respondent Group] = {"Parent"} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#,##0');
      let vCount1_Responded_Teacher = Num(Sum({1<[Respondent Group] = {"Teacher"} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]),'#,##0');
      let vCount1_Responded_Principal = Num(Sum({1<[Respondent Group] = {"Principal"} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]),'#,##0');

      let vCount_Responded_Student_Current = Num(Sum({<[Respondent Group] = {"Student"}, YearEnd = {$(=$(vMaxYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#,##0');
      let vCount_Responded_Parent_Current = Num(Sum({<[Respondent Group] = {"Parent"}, YearEnd = {$(=$(vMaxYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#,##0');
      let vCount_Responded_Teacher_Current = Num(Sum({<[Respondent Group] = {"Teacher"}, YearEnd = {$(=$(vMaxYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]),'#,##0');
      let vCount_Responded_Principal_Current = Num(Sum({<[Respondent Group] = {"Principal"}, YearEnd = {$(=$(vMaxYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]),'#,##0');
      
      let vCount1_Responded_Student_Current = Num(Sum({1<[Respondent Group] = {"Student"}, YearEnd = {$(=$(vMaxYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#,##0');
      let vCount1_Responded_Parent_Current = Num(Sum({1<[Respondent Group] = {"Parent"}, YearEnd = {$(=$(vMaxYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#,##0');
      let vCount1_Responded_Teacher_Current = Num(Sum({1<[Respondent Group] = {"Teacher"}, YearEnd = {$(=$(vMaxYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]),'#,##0');
      let vCount1_Responded_Principal_Current = Num(Sum({1<[Respondent Group] = {"Principal"}, YearEnd = {$(=$(vMaxYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]),'#,##0');
       

      let vCount_Responded_Student_Previous = Num(Sum({<[Respondent Group] = {"Student"}, YearEnd = {$(=$(vLastYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#,##0');
      let vCount_Responded_Parent_Previous = Num(Sum({<[Respondent Group] = {"Parent"}, YearEnd = {$(=$(vLastYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#,##0');
      let vCount_Responded_Teacher_Previous = Num(Sum({<[Respondent Group] = {"Teacher"}, YearEnd = {$(=$(vLastYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]),'#,##0');
      let vCount_Responded_Principal_Previous = Num(Sum({<[Respondent Group] = {"Principal"}, YearEnd = {$(=$(vLastYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]),'#,##0');

      let vCount1_Responded_Student_Previous = Num(Sum({1<[Respondent Group] = {"Student"}, YearEnd = {$(=$(vLastYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#,##0');
      let vCount1_Responded_Parent_Previous = Num(Sum({1<[Respondent Group] = {"Parent"}, YearEnd = {$(=$(vLastYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#,##0');
      let vCount1_Responded_Teacher_Previous = Num(Sum({1<[Respondent Group] = {"Teacher"}, YearEnd = {$(=$(vLastYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]),'#,##0');
      let vCount1_Responded_Principal_Previous = Num(Sum({1<[Respondent Group] = {"Principal"}, YearEnd = {$(=$(vLastYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]),'#,##0');

      let vCount_Responded_Selected_Current = if( $(vCurrentOrFirstRespondent) = 'Student',
          $(vCount_Responded_Student_Current),
        if( $(vCurrentOrFirstRespondent) = 'Parent',
          $(vCount_Responded_Parent_Current),
        if( $(vCurrentOrFirstRespondent) = 'Teacher',
          $(vCount_Responded_Teacher_Current),
        if( $(vCurrentOrFirstRespondent) = 'Principal',
          $(vCount_Responded_Principal_Current)
        ))));


  //// Denominator - total # in respective groups
    /// Master Measure: vCount_Student - the number of students in [Grade]s 3 - 12
      let vCount_Student = Num(Count({<[Respondent Group] = {"Student"}, InEnrollmentCounter={1}, [Grade] -= {"00", "01", "02"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#,##0');
      let vCount_Parent = Num(Count({<[Respondent Group] = {"Parent"}, InEnrollmentCounter={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#,##0');
      let vCount_ParentHousehold = Num(Count(distinct {<[Respondent Group] = {"Parent"}, YearEnd = P({<YearEnd={">=2019"}$(vSetOpts_EPD)$(vSetOpts_EPD)>}YearEnd), InEnrollmentCounter={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [%ULCS|household]), '#,##0');
      let vCount_Teacher = Num(Count({<[Respondent Group] = {"Teacher"}, InEnrollmentCounter={1} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#,##0');
      let vCount_Principal = Num(Count({<[Respondent Group] = {"Principal"}, InEnrollmentCounter={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#,##0');

      let vCount_Student_Current = Num(Count({<[Respondent Group] = {"Student"}, YearEnd = {$(=$(vMaxYearEnd))}, InEnrollmentCounter={1}, [Grade] -= {"00", "01", "02"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#,##0');
      let vCount_Parent_Current = Num(Count({<[Respondent Group] = {"Parent"}, YearEnd = {$(=$(vMaxYearEnd))}, InEnrollmentCounter={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#,##0');
      let vCount_ParentHousehold_Current = Num(Count(distinct {<[Respondent Group] = {"Parent"}, YearEnd = {$(=$(vMaxYearEnd))}, InEnrollmentCounter={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [%ULCS|household]), '#,##0');
      let vCount_Teacher_Current = Num(Count({<[Respondent Group] = {"Teacher"}, YearEnd = {$(=$(vMaxYearEnd))}, InEnrollmentCounter={1} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#,##0');
      let vCount_Principal_Current = Num(Count({<[Respondent Group] = {"Principal"}, YearEnd = {$(=$(vMaxYearEnd))}, InEnrollmentCounter={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#,##0');
      let vCount_Selected_Current = if( $(vCurrentOrFirstRespondent) = 'Student',
          $(vCount_Student_Current),
        if( $(vCurrentOrFirstRespondent) = 'Parent',
          $(vCount_Parent_Current),
        if( $(vCurrentOrFirstRespondent) = 'Teacher',
          $(vCount_Teacher_Current),
        if( $(vCurrentOrFirstRespondent) = 'Principal',
          $(vCount_Principal_Current)
        ))));

      let vCount_Student_Previous = Num(Count({<[Respondent Group] = {"Student"}, YearEnd = {$(=$(vLastYearEnd))}, InEnrollmentCounter={1}, [Grade] -= {"00", "01", "02"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#,##0');
      let vCount_Parent_Previous = Num(Count({<[Respondent Group] = {"Parent"}, YearEnd = {$(=$(vLastYearEnd))}, InEnrollmentCounter={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#,##0');
      let vCount_ParentHousehold_Previous = Num(Count(distinct {<[Respondent Group] = {"Parent"}, YearEnd = {$(=$(vLastYearEnd))}, InEnrollmentCounter={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [%ULCS|household]), '#,##0');
      let vCount_Teacher_Previous = Num(Count({<[Respondent Group] = {"Teacher"}, YearEnd = {$(=$(vLastYearEnd))}, InEnrollmentCounter={1} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#,##0');
      let vCount_Principal_Previous = Num(Count({<[Respondent Group] = {"Principal"}, YearEnd = {$(=$(vLastYearEnd))}, InEnrollmentCounter={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#,##0');

  //// Rate - Numerator / Denominator for current [SchoolYear]
      let vmmRatio_Responded_by_Total_Student_Current = Num(Sum({<[Respondent Group] = {"Student"},
          YearEnd = {$(=$(vMaxYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]) /
        Count({<[Respondent Group] = {"Student"}, InEnrollmentCounter={1}, 
          YearEnd = {$(=$(vMaxYearEnd))},
          [Grade] -= {"00", "01", "02"},
          $(vSetOps_IgnoreConstructQuestion)
          $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#.#%');
      let vmmRatio_Responded_by_Total_Parent_Current = Num(Sum({<[Respondent Group] = {"Parent"},
          YearEnd = {$(=$(vMaxYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]) /
        Count({<[Respondent Group] = {"Parent"}, InEnrollmentCounter={1}, 
          YearEnd = {$(=$(vMaxYearEnd))},
          $(vSetOps_IgnoreConstructQuestion)$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#.#%');
      let vmmRatio_Responded_by_Total_ParentHousehold_Current = Num(If($(vCount_ParentHousehold_Current) > 0, 
        RangeMin(1, 
            Sum({<[Respondent Group] = {"Parent"},
            YearEnd = {$(=$(vMaxYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]) /
          Count(distinct {<[Respondent Group] = {"Parent"}, InEnrollmentCounter={1}, 
            YearEnd = {$(=$(vMaxYearEnd))},
            $(vSetOps_IgnoreConstructQuestion)$(vSetOpts_EPD)$(vSetOpts_EPD)>} [%ULCS|household]))), '#.#%');
      let vmmRatio_Responded_by_Total_Teacher_Current = Num(Sum({<[Respondent Group] = {"Teacher"},
          YearEnd = {$(=$(vMaxYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]) /
        Count({<[Respondent Group] = {"Teacher"}, InEnrollmentCounter={1},
          YearEnd = {$(=$(vMaxYearEnd))},
          $(vSetOps_IgnoreConstructQuestion)$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#.#%');
      let vmmRatio_Responded_by_Total_Principal_Current =  Num(Sum({<[Respondent Group] = {"Principal"},
          YearEnd = {$(=$(vMaxYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]) /
        Count({<[Respondent Group] = {"Principal"}, InEnrollmentCounter={1},
          YearEnd = {$(=$(vMaxYearEnd))},
          $(vSetOps_IgnoreConstructQuestion)$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#.#%');


      let vmmRatio_Responded_by_Total_Selected_Current = if( $(vCurrentOrFirstRespondent) = 'Student',
          $(vmmRatio_Responded_by_Total_Student_Current),
        if( $(vCurrentOrFirstRespondent) = 'Parent',
          $(vmmRatio_Responded_by_Total_Parent_Current),
        if( $(vCurrentOrFirstRespondent) = 'Teacher',
          $(vmmRatio_Responded_by_Total_Teacher_Current),
        if( $(vCurrentOrFirstRespondent) = 'Principal',
          $(vmmRatio_Responded_by_Total_Principal_Current)
        ))));

      let vmmRatio_Responded_by_Total_SelectedHousehold_Current = if( $(vCurrentOrFirstRespondent) = 'Student',
          $(vmmRatio_Responded_by_Total_Student_Current),
        if( $(vCurrentOrFirstRespondent) = 'Parent',
          $(vmmRatio_Responded_by_Total_ParentHousehold_Current),
        if( $(vCurrentOrFirstRespondent) = 'Teacher',
          $(vmmRatio_Responded_by_Total_Teacher_Current),
        if( $(vCurrentOrFirstRespondent) = 'Principal',
          $(vmmRatio_Responded_by_Total_Principal_Current)
        ))));

  //// Year over [SchoolYear]
      let vmmRatio_Responded_by_Total_Student_YOY = Num(
        Sum({<[Respondent Group] = {"Student"},
          YearEnd = {$(=$(vMaxYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]) /
        Count({<[Respondent Group] = {"Student"}, InEnrollmentCounter={1}, 
          YearEnd = {$(=$(vMaxYearEnd))},
          [Grade] -= {"00", "01", "02"},
          $(vSetOps_IgnoreConstructQuestion)
          $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        -
        Sum({<[Respondent Group] = {"Student"},
          YearEnd = {$(=$(vLastYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]) /
        Count({<[Respondent Group] = {"Student"}, InEnrollmentCounter={1}, 
          YearEnd = {$(=$(vLastYearEnd))},
          [Grade] -= {"00", "01", "02"},
          $(vSetOps_IgnoreConstructQuestion)
          $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#.#%');
      let vmmRatio_Responded_by_Total_Parent_YOY = Num(
        Sum({<[Respondent Group] = {"Parent"},
          YearEnd = {$(=$(vMaxYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]) /
        Count({<[Respondent Group] = {"Parent"}, InEnrollmentCounter={1}, 
          YearEnd = {$(=$(vMaxYearEnd))},
          $(vSetOps_IgnoreConstructQuestion)
          $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        -
        Sum({<[Respondent Group] = {"Parent"},
          YearEnd = {$(=$(vLastYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]) /
        Count({<[Respondent Group] = {"Parent"}, InEnrollmentCounter={1}, 
          YearEnd = {$(=$(vLastYearEnd))},
          $(vSetOps_IgnoreConstructQuestion)
          $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#.#%');
      let vmmRatio_Responded_by_Total_ParentHousehold_YOY = Num(
        If($(vCount_ParentHousehold_Current) > 0, 
          RangeMin(1, 
              Sum({<[Respondent Group] = {"Parent"},
              YearEnd = {$(=$(vMaxYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]) /
            Count(distinct {<[Respondent Group] = {"Parent"}, InEnrollmentCounter={1}, 
              YearEnd = {$(=$(vMaxYearEnd))},
              $(vSetOps_IgnoreConstructQuestion)$(vSetOpts_EPD)$(vSetOpts_EPD)>} [%ULCS|household])))
        -
        If($(vCount_ParentHousehold_Previous) > 0, 
          RangeMin(1, 
              Sum({<[Respondent Group] = {"Parent"},
              YearEnd = {$(=$(vLastYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]) /
            Count(distinct {<[Respondent Group] = {"Parent"}, InEnrollmentCounter={1}, 
              YearEnd = {$(=$(vLastYearEnd))},
              $(vSetOps_IgnoreConstructQuestion)$(vSetOpts_EPD)$(vSetOpts_EPD)>} [%ULCS|household]))), '#.#%');
      let vmmRatio_Responded_by_Total_Teacher_YOY = Num(
        Sum({<[Respondent Group] = {"Teacher"},
          YearEnd = {$(=$(vMaxYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]) /
        Count({<[Respondent Group] = {"Teacher"}, InEnrollmentCounter={1}, 
          YearEnd = {$(=$(vMaxYearEnd))},
          $(vSetOps_IgnoreConstructQuestion)
          $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        -
        Sum({<[Respondent Group] = {"Teacher"}, 
          YearEnd = {$(=$(vLastYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]) /
        Count({<[Respondent Group] = {"Teacher"}, InEnrollmentCounter={1},
          YearEnd = {$(=$(vLastYearEnd))},
          $(vSetOps_IgnoreConstructQuestion)
          $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#.#%');
      let vmmRatio_Responded_by_Total_Principal_YOY =  Num(
        Sum({<[Respondent Group] = {"Principal"},
          YearEnd = {$(=$(vMaxYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]) /
        Count({<[Respondent Group] = {"Principal"}, InEnrollmentCounter={1}, 
          YearEnd = {$(=$(vMaxYearEnd))},
          $(vSetOps_IgnoreConstructQuestion)
          $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        -
        Sum({<[Respondent Group] = {"Principal"}, 
          YearEnd = {$(=$(vLastYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]) /
        Count({<[Respondent Group] = {"Principal"}, InEnrollmentCounter={1},
          YearEnd = {$(=$(vLastYearEnd))},
          $(vSetOps_IgnoreConstructQuestion)
          $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#.#%');

  //// Rate - Numerator / Denominator for all [SchoolYear]s
      let vmmRatio_Responded_by_Total_Student_AllYears = Num(Sum({<[Respondent Group] = {"Student"},
          YearEnd = $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]) /
        Count({<[Respondent Group] = {"Student"}, InEnrollmentCounter={1}, 
           [Grade] -= {"00", "01", "02"}, YearEnd = ,
          $(vSetOps_IgnoreConstructQuestion)     
          $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#.#%');
      let vmmRatio_Responded_by_Total_Parent_AllYears = Num(Sum({<[Respondent Group] = {"Parent"},
          YearEnd = $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]) /
        Count({<[Respondent Group] = {"Parent"}, InEnrollmentCounter={1}, 
          YearEnd = ,
          $(vSetOps_IgnoreConstructQuestion)$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#.#%');
      let vmmRatio_Responded_by_Total_ParentHousehold_AllYears = Num(If($(vCount_ParentHousehold) > 0, 
        RangeMin(1, 
          Sum({<[Respondent Group] = {"Parent"},
            YearEnd = $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]) /
          Count(distinct {<[Respondent Group] = {"Parent"}, InEnrollmentCounter={1}, 
            YearEnd = ,
            $(vSetOps_IgnoreConstructQuestion)$(vSetOpts_EPD)$(vSetOpts_EPD)>} [%ULCS|household]))), '#.#%');
      let vmmRatio_Responded_by_Total_Teacher_AllYears = Num(Sum({<[Respondent Group] = {"Teacher"},
          YearEnd =  $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]) /
        Count({<[Respondent Group] = {"Teacher"}, InEnrollmentCounter={1},
          YearEnd = ,
          $(vSetOps_IgnoreConstructQuestion)$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#.#%');
      let vmmRatio_Responded_by_Total_Principal_AllYears = Num(Sum({<[Respondent Group] = {"Principal"},
          YearEnd =  $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]) /
        Count({<[Respondent Group] = {"Principal"}, InEnrollmentCounter={1},
          YearEnd = ,
          $(vSetOps_IgnoreConstructQuestion)$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#.#%');



///// Survey Focus Questions - Percent Most Positive
  //// Question codes
    let vStudentQuestionCode1 = 'STUDENT|Q3f';
    let vStudentQuestionCode2 = 'STUDENT|Q1b';
    let vStudentQuestionCode3 = 'STUDENT|Q3k';
    let vStudentQuestionCode4 = 'STUDENT|Q3a';

    let vParentQuestionCode1 = 'PARENT|Q7f';
    let vParentQuestionCode2 = 'PARENT|Q2c';
    let vParentQuestionCode3 = 'PARENT|Q7d';
    let vParentQuestionCode4 = 'PARENT|Q3g';

    let vTeacherQuestionCode1 = 'TEACHER|Q5a';
    let vTeacherQuestionCode2 = 'TEACHER|Q3e';
    let vTeacherQuestionCode3 = 'TEACHER|Q3i';
    let vTeacherQuestionCode4 = 'TEACHER|Q4e';

  //// Question text (originally I was figuring this out by code, but this will make it faster)
    let vStudentQuestion1 = I enjoy being in school.;
    let vStudentQuestion2 = My teachers have high expectations for me in school.;
    let vStudentQuestion3 = My school is clean.;
    let vStudentQuestion4 = I am bullied at school.;
    
    let vParentQuestion1 = I am pleased with the quality of education my child's school is providing for my child.;
    let vParentQuestion2 = I am treated with respect in my child's school.; 
    let vParentQuestion3 = Teachers at my child's school encourage my child to work hard.;
    let vParentQuestion4 = My child feels safe at school.;
    // '

    let vTeacherQuestion1 = The principal communicates a clear mission for our school.;
    let vTeacherQuestion2 = My students are motivated to learn.;
    let vTeacherQuestion3 = My students influence decisions regarding learning activities.;
    let vTeacherQuestion4 = My students are more focused on grades than learning.;

  //// Question abbreviation
    let vStudentQuestion1Abbr = I enjoy being in school;
    let vStudentQuestion2Abbr = My teachers have high expectations;
    let vStudentQuestion3Abbr = My school is clean;
    let vStudentQuestion4Abbr = I am bullied;
    
    let vParentQuestion1Abbr = Pleased with quality of education;
    let vParentQuestion2Abbr = I am treated with respect;
    let vParentQuestion3Abbr = Teachers encourage hard work;    
    let vParentQuestion4Abbr = My child feels safe;

    let vTeacherQuestion1Abbr = Clear mission by principal;
    let vTeacherQuestion2Abbr = My students are motivated;
    let vTeacherQuestion3Abbr = Students influence decisions;
    let vTeacherQuestion4Abbr = Students focus on grades over learning;

  //// Question best "most positive" responses
    let vStudentQuestion1MostPositive = Most or all the time;
    let vStudentQuestion2MostPositive = Most or all the time;
    let vStudentQuestion3MostPositive = Most or all the time;
    let vStudentQuestion4MostPositive = Never;
    
    let vParentQuestion1MostPositive = Strongly Agree;
    let vParentQuestion2MostPositive = Strongly Agree;
    let vParentQuestion3MostPositive = Strongly Agree;    
    let vParentQuestion4MostPositive = Most or all the time;

    let vTeacherQuestion1MostPositive = Strongly Agree;
    let vTeacherQuestion2MostPositive = Most or all the time;
    let vTeacherQuestion3MostPositive = Most or all the time;
    let vTeacherQuestion4MostPositive = Never;

  //// Current Count
    let vCount_Student_Q1_Current = Count({<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode1))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCount_Student_Q2_Current = Count({<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode2))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCount_Student_Q3_Current = Count({<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode3))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCount_Student_Q4_Current = Count({<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode4))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCount_Parent_Q1_Current = Count({<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode1))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCount_Parent_Q2_Current = Count({<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode2))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCount_Parent_Q3_Current = Count({<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode3))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCount_Parent_Q4_Current = Count({<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode4))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCount_Teacher_Q1_Current = Count({<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode1))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCount_Teacher_Q2_Current = Count({<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode2))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCount_Teacher_Q3_Current = Count({<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode3))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCount_Teacher_Q4_Current = Count({<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode4))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
  //// Previous Year Count
    let vCount_Student_Q1_Previous = Count({<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode1))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCount_Student_Q2_Previous = Count({<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode2))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCount_Student_Q3_Previous = Count({<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode3))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCount_Student_Q4_Previous = Count({<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode4))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCount_Parent_Q1_Previous = Count({<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode1))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCount_Parent_Q2_Previous = Count({<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode2))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCount_Parent_Q3_Previous = Count({<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode3))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCount_Parent_Q4_Previous = Count({<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode4))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCount_Teacher_Q1_Previous = Count({<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode1))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCount_Teacher_Q2_Previous = Count({<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode2))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCount_Teacher_Q3_Previous = Count({<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode3))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCount_Teacher_Q4_Previous = Count({<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode4))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);

  //// Current Count of non-skip, not applicable responses (e.g., "I don't know", "Not sure", "not applicable", etc)
    let vCountNA_Student_Q1_Current = Sum({<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode1))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, Score_NoSkips={">100"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);
    let vCountNA_Student_Q2_Current = Sum({<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode2))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, Score_NoSkips={">100"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);
    let vCountNA_Student_Q3_Current = Sum({<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode3))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, Score_NoSkips={">100"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);
    let vCountNA_Student_Q4_Current = Sum({<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode4))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, Score_NoSkips={">100"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);
    let vCountNA_Parent_Q1_Current = Sum({<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode1))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, Score_NoSkips={">100"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);
    let vCountNA_Parent_Q2_Current = Sum({<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode2))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, Score_NoSkips={">100"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);
    let vCountNA_Parent_Q3_Current = Sum({<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode3))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, Score_NoSkips={">100"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);
    let vCountNA_Parent_Q4_Current = Sum({<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode4))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, Score_NoSkips={">100"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);
    let vCountNA_Teacher_Q1_Current = Sum({<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode1))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, Score_NoSkips={">100"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);
    let vCountNA_Teacher_Q2_Current = Sum({<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode2))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, Score_NoSkips={">100"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);
    let vCountNA_Teacher_Q3_Current = Sum({<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode3))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, Score_NoSkips={">100"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);
    let vCountNA_Teacher_Q4_Current = Sum({<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode4))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, Score_NoSkips={">100"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);
  //// Previous Year Count
    let vCountNA_Student_Q1_Previous = Sum({<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode1))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, Score_NoSkips={">100"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);
    let vCountNA_Student_Q2_Previous = Sum({<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode2))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, Score_NoSkips={">100"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);
    let vCountNA_Student_Q3_Previous = Sum({<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode3))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, Score_NoSkips={">100"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);
    let vCountNA_Student_Q4_Previous = Sum({<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode4))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, Score_NoSkips={">100"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);
    let vCountNA_Parent_Q1_Previous = Sum({<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode1))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, Score_NoSkips={">100"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);
    let vCountNA_Parent_Q2_Previous = Sum({<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode2))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, Score_NoSkips={">100"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);
    let vCountNA_Parent_Q3_Previous = Sum({<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode3))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, Score_NoSkips={">100"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);
    let vCountNA_Parent_Q4_Previous = Sum({<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode4))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, Score_NoSkips={">100"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);
    let vCountNA_Teacher_Q1_Previous = Sum({<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode1))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, Score_NoSkips={">100"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);
    let vCountNA_Teacher_Q2_Previous = Sum({<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode2))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, Score_NoSkips={">100"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);
    let vCountNA_Teacher_Q3_Previous = Sum({<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode3))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, Score_NoSkips={">100"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);
    let vCountNA_Teacher_Q4_Previous = Sum({<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode4))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, Score_NoSkips={">100"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);

  //// Current Count (Total)
    let vCountTotal_Student_Q1_Current = Count(Total {<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode1))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCountTotal_Student_Q2_Current = Count(Total {<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode2))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCountTotal_Student_Q3_Current = Count(Total {<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode3))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCountTotal_Student_Q4_Current = Count(Total {<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode4))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCountTotal_Parent_Q1_Current = Count(Total {<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode1))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCountTotal_Parent_Q2_Current = Count(Total {<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode2))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCountTotal_Parent_Q3_Current = Count(Total {<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode3))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCountTotal_Parent_Q4_Current = Count(Total {<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode4))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCountTotal_Teacher_Q1_Current = Count(Total {<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode1))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCountTotal_Teacher_Q2_Current = Count(Total {<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode2))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCountTotal_Teacher_Q3_Current = Count(Total {<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode3))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCountTotal_Teacher_Q4_Current = Count(Total {<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode4))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);

  //// Previous Year Count (Total)
    let vCountTotal_Student_Q1_Previous = Count(Total {<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode1))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCountTotal_Student_Q2_Previous = Count(Total {<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode2))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCountTotal_Student_Q3_Previous = Count(Total {<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode3))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCountTotal_Student_Q4_Previous = Count(Total {<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode4))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCountTotal_Parent_Q1_Previous = Count(Total {<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode1))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCountTotal_Parent_Q2_Previous = Count(Total {<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode2))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCountTotal_Parent_Q3_Previous = Count(Total {<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode3))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCountTotal_Parent_Q4_Previous = Count(Total {<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode4))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCountTotal_Teacher_Q1_Previous = Count(Total {<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode1))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCountTotal_Teacher_Q2_Previous = Count(Total {<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode2))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCountTotal_Teacher_Q3_Previous = Count(Total {<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode3))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);
    let vCountTotal_Teacher_Q4_Previous = Count(Total {<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode4))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} DisplayScore);      

  //// Current Percent Most Positive
    let vPercMP_Student_Q1_Current = Sum({<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode1))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} IsHighest)
      / $(vCount_Student_Q1_Current);
    let vPercMP_Student_Q2_Current = Sum({<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode2))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} IsHighest)
      / $(vCount_Student_Q2_Current);
    let vPercMP_Student_Q3_Current = Sum({<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode3))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} IsHighest)
      / $(vCount_Student_Q3_Current);
    let vPercMP_Student_Q4_Current = Sum({<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode4))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} IsHighest)
      / $(vCount_Student_Q4_Current);
    let vPercMP_Parent_Q1_Current = Sum({<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode1))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} IsHighest)
      / $(vCount_Parent_Q1_Current);
    let vPercMP_Parent_Q2_Current = Sum({<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode2))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} IsHighest)
      / $(vCount_Parent_Q2_Current);
    let vPercMP_Parent_Q3_Current = Sum({<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode3))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} IsHighest)
      / $(vCount_Parent_Q3_Current);
    let vPercMP_Parent_Q4_Current = Sum({<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode4))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} IsHighest)
      / $(vCount_Parent_Q4_Current);
    let vPercMP_Teacher_Q1_Current = Sum({<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode1))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} IsHighest)
      / $(vCount_Teacher_Q1_Current);
    let vPercMP_Teacher_Q2_Current = Sum({<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode2))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} IsHighest)
      / $(vCount_Teacher_Q2_Current);
    let vPercMP_Teacher_Q3_Current = Sum({<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode3))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} IsHighest)
      / $(vCount_Teacher_Q3_Current);
    let vPercMP_Teacher_Q4_Current = Sum({<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode4))'}, 
      YearEnd = {$(=$(vMaxYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} IsHighest)
      / $(vCount_Teacher_Q4_Current);

  //// Previous Percent Most Positive
    let vPercMP_Student_Q1_Previous = Sum({<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode1))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} IsHighest)
      / $(vCount_Student_Q1_Previous);
    let vPercMP_Student_Q2_Previous = Sum({<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode2))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} IsHighest)
      / $(vCount_Student_Q2_Previous);
    let vPercMP_Student_Q3_Previous = Sum({<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode3))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} IsHighest)
      / $(vCount_Student_Q3_Previous);
    let vPercMP_Student_Q4_Previous = Sum({<
      [Survey|QuestionCode]={'$(=$(vStudentQuestionCode4))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} IsHighest)
      / $(vCount_Student_Q4_Previous);
    let vPercMP_Parent_Q1_Previous = Sum({<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode1))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} IsHighest)
      / $(vCount_Parent_Q1_Previous);
    let vPercMP_Parent_Q2_Previous = Sum({<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode2))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} IsHighest)
      / $(vCount_Parent_Q2_Previous);
    let vPercMP_Parent_Q3_Previous = Sum({<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode3))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} IsHighest)
      / $(vCount_Parent_Q3_Previous);
    let vPercMP_Parent_Q4_Previous = Sum({<
      [Survey|QuestionCode]={'$(=$(vParentQuestionCode4))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} IsHighest)
      / $(vCount_Parent_Q4_Previous);
    let vPercMP_Teacher_Q1_Previous = Sum({<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode1))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} IsHighest)
      / $(vCount_Teacher_Q1_Previous);
    let vPercMP_Teacher_Q2_Previous = Sum({<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode2))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} IsHighest)
      / $(vCount_Teacher_Q2_Previous);
    let vPercMP_Teacher_Q3_Previous = Sum({<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode3))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} IsHighest)
      / $(vCount_Teacher_Q3_Previous);
    let vPercMP_Teacher_Q4_Previous = Sum({<
      [Survey|QuestionCode]={'$(=$(vTeacherQuestionCode4))'}, 
      YearEnd = {$(=$(vLastYearEnd))}, [Responded]={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>} IsHighest)
      / $(vCount_Teacher_Q4_Previous);

  
    
  //// Master Measures for KPIs - Current Year
    let vmmPercMP_Student_Q1_Current = Num(If($(vMinStudents) < $(vCount_Student_Q1_Current),
                            $(vPercMP_Student_Q1_Current), Null()), '#.#%');
    let vmmPercMP_Student_Q2_Current = Num(If($(vMinStudents) <= $(vCount_Student_Q2_Current),
                            $(vPercMP_Student_Q2_Current), Null()), '#.#%');
    let vmmPercMP_Student_Q3_Current = Num(If($(vMinStudents) <= $(vCount_Student_Q3_Current),
                            $(vPercMP_Student_Q3_Current), Null()), '#.#%');
    let vmmPercMP_Student_Q4_Current = Num(If($(vMinStudents) <= $(vCount_Student_Q4_Current),
                            $(vPercMP_Student_Q4_Current), Null()), '#.#%');
    let vmmPercMP_Parent_Q1_Current = Num(If($(vMinParents) <= $(vCount_Parent_Q1_Current),
                            $(vPercMP_Parent_Q1_Current), Null()), '#.#%');
    let vmmPercMP_Parent_Q2_Current = Num(If($(vMinParents) <= $(vCount_Parent_Q2_Current),
                            $(vPercMP_Parent_Q2_Current), Null()), '#.#%');
    let vmmPercMP_Parent_Q3_Current = Num(If($(vMinParents) <= $(vCount_Parent_Q3_Current),
                            $(vPercMP_Parent_Q3_Current), Null()), '#.#%');
    let vmmPercMP_Parent_Q4_Current = Num(If($(vMinParents) <= $(vCount_Parent_Q4_Current),
                            $(vPercMP_Parent_Q4_Current), Null()), '#.#%');
    let vmmPercMP_Teacher_Q1_Current = Num(If($(vMinTeachers) <= $(vCount_Teacher_Q1_Current),
                            $(vPercMP_Teacher_Q1_Current), Null()), '#.#%');
    let vmmPercMP_Teacher_Q2_Current = Num(If($(vMinTeachers) <= $(vCount_Teacher_Q2_Current),
                            $(vPercMP_Teacher_Q2_Current), Null()), '#.#%');
    let vmmPercMP_Teacher_Q3_Current = Num(If($(vMinTeachers) <= $(vCount_Teacher_Q3_Current),
                            $(vPercMP_Teacher_Q3_Current), Null()), '#.#%');
    let vmmPercMP_Teacher_Q4_Current = Num(If($(vMinTeachers) <= $(vCount_Teacher_Q4_Current),
                            $(vPercMP_Teacher_Q4_Current), Null()), '#.#%');
  
  //// Master Measures for KPIs - YOY
    let vmmPercMP_Student_Q1_YOY = Num(If($(vMinStudents) <= $(vCount_Student_Q1_Current) and 
        $(vMinStudents) <= $(vCount_Student_Q1_Previous),
        $(vPercMP_Student_Q1_Current) - $(vPercMP_Student_Q1_Previous), Null()), '#.#%');
    let vmmPercMP_Student_Q2_YOY = Num(If($(vMinStudents) <= $(vCount_Student_Q2_Current) and 
        $(vMinStudents) <= $(vCount_Student_Q2_Previous),
        $(vPercMP_Student_Q2_Current) - $(vPercMP_Student_Q2_Previous), Null()), '#.#%');
    let vmmPercMP_Student_Q3_YOY = Num(If($(vMinStudents) <= $(vCount_Student_Q3_Current) and 
        $(vMinStudents) <= $(vCount_Student_Q3_Previous),
        $(vPercMP_Student_Q3_Current) - $(vPercMP_Student_Q3_Previous), Null()), '#.#%');
    let vmmPercMP_Student_Q4_YOY = Num(If($(vMinStudents) <= $(vCount_Student_Q4_Current) and 
        $(vMinStudents) <= $(vCount_Student_Q4_Previous),
        $(vPercMP_Student_Q4_Current) - $(vPercMP_Student_Q4_Previous), Null()), '#.#%');
    let vmmPercMP_Parent_Q1_YOY = Num(If($(vMinParents) <= $(vCount_Parent_Q1_Current) and 
        $(vMinParents) <= $(vCount_Parent_Q1_Previous),
        $(vPercMP_Parent_Q1_Current) - $(vPercMP_Parent_Q1_Previous), Null()), '#.#%');
    let vmmPercMP_Parent_Q2_YOY = Num(If($(vMinParents) <= $(vCount_Parent_Q2_Current) and 
        $(vMinParents) <= $(vCount_Parent_Q2_Previous),
        $(vPercMP_Parent_Q2_Current) - $(vPercMP_Parent_Q2_Previous), Null()), '#.#%');
    let vmmPercMP_Parent_Q3_YOY = Num(If($(vMinParents) <= $(vCount_Parent_Q3_Current) and 
        $(vMinParents) <= $(vCount_Parent_Q3_Previous),
        $(vPercMP_Parent_Q3_Current) - $(vPercMP_Parent_Q3_Previous), Null()), '#.#%');
    let vmmPercMP_Parent_Q4_YOY = Num(If($(vMinParents) <= $(vCount_Parent_Q4_Current) and 
        $(vMinParents) <= $(vCount_Parent_Q4_Previous),
        $(vPercMP_Parent_Q4_Current) - $(vPercMP_Parent_Q4_Previous), Null()), '#.#%');
    let vmmPercMP_Teacher_Q1_YOY = Num(If($(vMinTeachers) <= $(vCount_Teacher_Q1_Current) and 
        $(vMinTeachers) <= $(vCount_Teacher_Q1_Previous),
        $(vPercMP_Teacher_Q1_Current) - $(vPercMP_Teacher_Q1_Previous), Null()), '#.#%');
    let vmmPercMP_Teacher_Q2_YOY = Num(If($(vMinTeachers) <= $(vCount_Teacher_Q2_Current) and 
        $(vMinTeachers) <= $(vCount_Teacher_Q2_Previous),
        $(vPercMP_Teacher_Q2_Current) - $(vPercMP_Teacher_Q2_Previous), Null()), '#.#%');
    let vmmPercMP_Teacher_Q3_YOY = Num(If($(vMinTeachers) <= $(vCount_Teacher_Q3_Current) and 
        $(vMinTeachers) <= $(vCount_Teacher_Q3_Previous),
        $(vPercMP_Teacher_Q3_Current) - $(vPercMP_Teacher_Q3_Previous), Null()), '#.#%');
    let vmmPercMP_Teacher_Q4_YOY = Num(If($(vMinTeachers) <= $(vCount_Teacher_Q4_Current) and 
        $(vMinTeachers) <= $(vCount_Teacher_Q4_Previous),
        $(vPercMP_Teacher_Q4_Current) - $(vPercMP_Teacher_Q4_Previous), Null()), '#.#%');

    //// Master Measures for Bar Charts - Current Year Note: the extra multiplier of 0 is for showing all dimensions in the bar chart)
    let vmmRatio_Student_Q1_Current_Zero = Num(If($(vMinStudents) <= $(vCountTotal_Student_Q1_Current),
        $(vCount_Student_Q1_Current) / $(vCountTotal_Student_Q1_Current) 
          + 0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vStudentQuestionCode1))"}, YearEnd = {$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore]) 
          $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        , 0), '#.#%');
    let vmmRatio_Student_Q2_Current_Zero = Num(If($(vMinStudents) <= $(vCountTotal_Student_Q2_Current),
        $(vCount_Student_Q2_Current) / $(vCountTotal_Student_Q2_Current) 
          + 0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vStudentQuestionCode2))"}, YearEnd = {$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore]) 
          $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        , 0), '#.#%');
    let vmmRatio_Student_Q3_Current_Zero = Num(If($(vMinStudents) <= $(vCountTotal_Student_Q3_Current),
        $(vCount_Student_Q3_Current) / $(vCountTotal_Student_Q3_Current) 
          + 0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vStudentQuestionCode3))"}, YearEnd = {$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore]) 
          $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        , 0), '#.#%');
    let vmmRatio_Student_Q4_Current_Zero = Num(If($(vMinStudents) <= $(vCountTotal_Student_Q4_Current),
        $(vCount_Student_Q4_Current) / $(vCountTotal_Student_Q4_Current) 
          + 0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vStudentQuestionCode4))"}, YearEnd = {$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore]) 
          $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        , 0), '#.#%');
    let vmmRatio_Parent_Q1_Current_Zero = Num(If($(vMinParents) <= $(vCountTotal_Parent_Q1_Current),
        $(vCount_Parent_Q1_Current) / $(vCountTotal_Parent_Q1_Current) 
          + 0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vParentQuestionCode1))"}, YearEnd = {$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore]) 
          $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        , 0), '#.#%');
    let vmmRatio_Parent_Q2_Current_Zero = Num(If($(vMinParents) <= $(vCountTotal_Parent_Q2_Current),
        $(vCount_Parent_Q2_Current) / $(vCountTotal_Parent_Q2_Current) 
          + 0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vParentQuestionCode2))"}, YearEnd = {$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore]) 
          $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        , 0), '#.#%');
    let vmmRatio_Parent_Q3_Current_Zero = Num(If($(vMinParents) <= $(vCountTotal_Parent_Q3_Current),
        $(vCount_Parent_Q3_Current) / $(vCountTotal_Parent_Q3_Current) 
          + 0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vParentQuestionCode3))"}, YearEnd = {$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore]) 
          $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        , 0), '#.#%');
    let vmmRatio_Parent_Q4_Current_Zero = Num(If($(vMinParents) <= $(vCountTotal_Parent_Q4_Current),
        $(vCount_Parent_Q4_Current) / $(vCountTotal_Parent_Q4_Current) 
          + 0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vParentQuestionCode4))"}, YearEnd = {$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore]) 
          $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        , 0), '#.#%'); 
    let vmmRatio_Teacher_Q1_Current_Zero = Num(If($(vMinTeachers) <= $(vCountTotal_Teacher_Q1_Current),
        $(vCount_Teacher_Q1_Current) / $(vCountTotal_Teacher_Q1_Current) 
          + 0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vTeacherQuestionCode1))"}, YearEnd = {$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore]) 
          $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        , 0), '#.#%');
    let vmmRatio_Teacher_Q2_Current_Zero = Num(If($(vMinTeachers) <= $(vCountTotal_Teacher_Q2_Current),
        $(vCount_Teacher_Q2_Current) / $(vCountTotal_Teacher_Q2_Current) 
          + 0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vTeacherQuestionCode2))"}, YearEnd = {$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore]) 
          $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        , 0), '#.#%');
    let vmmRatio_Teacher_Q3_Current_Zero = Num(If($(vMinTeachers) <= $(vCountTotal_Teacher_Q3_Current),
        $(vCount_Teacher_Q3_Current) / $(vCountTotal_Teacher_Q3_Current) 
          + 0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vTeacherQuestionCode3))"}, YearEnd = {$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore]) 
          $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        , 0), '#.#%');
    let vmmRatio_Teacher_Q4_Current_Zero = Num(If($(vMinTeachers) <= $(vCountTotal_Teacher_Q4_Current),
        $(vCount_Teacher_Q4_Current) / $(vCountTotal_Teacher_Q4_Current) 
          + 0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vTeacherQuestionCode4))"}, YearEnd = {$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore]) 
          $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        , 0), '#.#%'); 

  //// Master Measures for Bar Charts - Previous Year
    let vmmRatio_Student_Q1_Previous_Zero = Num(If($(vMinStudents) <= $(vCountTotal_Student_Q1_Previous),
        $(vCount_Student_Q1_Previous) / $(vCountTotal_Student_Q1_Previous) 
          + -0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vStudentQuestionCode1))"}, YearEnd = {$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore]) 
                    $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        , 0), '#.#%');
    let vmmRatio_Student_Q2_Previous_Zero = Num(If($(vMinStudents) <= $(vCountTotal_Student_Q2_Previous),
        $(vCount_Student_Q2_Previous) / $(vCountTotal_Student_Q2_Previous) 
          + -0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vStudentQuestionCode2))"}, YearEnd = {$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore]) 
                    $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        , 0), '#.#%');
    let vmmRatio_Student_Q3_Previous_Zero = Num(If($(vMinStudents) <= $(vCountTotal_Student_Q3_Previous),
        $(vCount_Student_Q3_Previous) / $(vCountTotal_Student_Q3_Previous) 
          + -0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vStudentQuestionCode3))"}, YearEnd = {$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore]) 
                    $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        , 0), '#.#%');
    let vmmRatio_Student_Q4_Previous_Zero = Num(If($(vMinStudents) <= $(vCountTotal_Student_Q4_Previous),
        $(vCount_Student_Q4_Previous) / $(vCountTotal_Student_Q4_Previous) 
          + -0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vStudentQuestionCode4))"}, YearEnd = {$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore]) 
                    $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        , 0), '#.#%');
    let vmmRatio_Parent_Q1_Previous_Zero = Num(If($(vMinParents) <= $(vCountTotal_Parent_Q1_Previous),
        $(vCount_Parent_Q1_Previous) / $(vCountTotal_Parent_Q1_Previous) 
          + -0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vParentQuestionCode1))"}, YearEnd = {$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore]) 
                    $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        , 0), '#.#%');
    let vmmRatio_Parent_Q2_Previous_Zero = Num(If($(vMinParents) <= $(vCountTotal_Parent_Q2_Previous),
        $(vCount_Parent_Q2_Previous) / $(vCountTotal_Parent_Q2_Previous) 
          + -0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vParentQuestionCode2))"}, YearEnd = {$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore]) 
                    $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        , 0), '#.#%');
    let vmmRatio_Parent_Q3_Previous_Zero = Num(If($(vMinParents) <= $(vCountTotal_Parent_Q3_Previous),
        $(vCount_Parent_Q3_Previous) / $(vCountTotal_Parent_Q3_Previous) 
          + -0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vParentQuestionCode3))"}, YearEnd = {$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore]) 
                    $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        , 0), '#.#%');
    let vmmRatio_Parent_Q4_Previous_Zero = Num(If($(vMinParents) <= $(vCountTotal_Parent_Q4_Previous),
        $(vCount_Parent_Q4_Previous) / $(vCountTotal_Parent_Q4_Previous) 
          + -0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vParentQuestionCode4))"}, YearEnd = {$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore]) 
                   $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        , 0), '#.#%'); 
    let vmmRatio_Teacher_Q1_Previous_Zero = Num(If($(vMinTeachers) <= $(vCountTotal_Teacher_Q1_Previous),
        $(vCount_Teacher_Q1_Previous) / $(vCountTotal_Teacher_Q1_Previous) 
          + -0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vTeacherQuestionCode1))"}, YearEnd = {$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore]) 
                    $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        , 0), '#.#%');
    let vmmRatio_Teacher_Q2_Previous_Zero = Num(If($(vMinTeachers) <= $(vCountTotal_Teacher_Q2_Previous),
        $(vCount_Teacher_Q2_Previous) / $(vCountTotal_Teacher_Q2_Previous) 
          + -0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vTeacherQuestionCode2))"}, YearEnd = {$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore]) 
                    $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        , 0), '#.#%');
    let vmmRatio_Teacher_Q3_Previous_Zero = Num(If($(vMinTeachers) <= $(vCountTotal_Teacher_Q3_Previous),
        $(vCount_Teacher_Q3_Previous) / $(vCountTotal_Teacher_Q3_Previous) 
          + -0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vTeacherQuestionCode3))"}, YearEnd = {$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore]) 
                    $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        , 0), '#.#%');
    let vmmRatio_Teacher_Q4_Previous_Zero = Num(If($(vMinTeachers) <= $(vCountTotal_Teacher_Q4_Previous),
        $(vCount_Teacher_Q4_Previous) / $(vCountTotal_Teacher_Q4_Previous) 
          + -0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vTeacherQuestionCode4))"}, YearEnd = {$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore]) 
                    $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded])
        , 0), '#.#%'); 

///// Survey Focus Question
    let vFocusQuestionCode = 'STUDENT|Q3f';
    let vFocusQuestionCode2 = 'PARENT|Q7f';

    let vFocusQuestion = Mode({1<[Survey|QuestionCode]={$(vFocusQuestionCode)}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[QuestionText]);
    let vFocusQuestion2 = Mode({1<[Survey|QuestionCode]={$(vFocusQuestionCode2)}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[QuestionText]);

    let vFocusQuestionMostPositive = Mode({1<[Survey|QuestionCode]={$(vFocusQuestionCode)}, IsHighest={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText]);
    let vFocusQuestion2MostPositive = Mode({1<[Survey|QuestionCode]={$(vFocusQuestionCode2)}, IsHighest={1}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText]);
    
    // for reference lines in district and network
    let vCount_FocusQuestion_Current_District = Count({1< [Survey|QuestionCode]={"$(=$(vFocusQuestionCode))"}, YearEnd = {$(=$(vMaxYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>}  DisplayScore);
    let vPercMP_FocusQuestion_Current_District = Sum({1< [Survey|QuestionCode]={"$(=$(vFocusQuestionCode))"}, YearEnd = {$(=$(vMaxYearEnd))} $(vSetOpts_EPD)$(vSetOpts_EPD)>}  IsHighest) / $(vCount_FocusQuestion_Current_District);

    let vCount_FocusQuestion_Current_Network = Count({1< [Survey|QuestionCode]={"$(=$(vFocusQuestionCode))"}, YearEnd = {$(=$(vMaxYearEnd))}, learningnetwork = p() $(vSetOpts_EPD)$(vSetOpts_EPD)>}  DisplayScore);
    let vPercMP_FocusQuestion_Current_Network = Sum({1< [Survey|QuestionCode]={"$(=$(vFocusQuestionCode))"}, YearEnd = {$(=$(vMaxYearEnd))}, learningnetwork = p()  $(vSetOpts_EPD)$(vSetOpts_EPD)>}  IsHighest) / $(vCount_FocusQuestion_Current_Network);

///// Survey Focus Respondent Group and Topic
  
  //// Selection vars
    
    /// Basic group and respondent selection
      let vCurrentRespondentSimple = 'Student';
      let vCurrentRespondentSimple2 = 'Teacher';
      let vCurrentTopic = 'School Climate';
      // vCurrentRespondent takes into account if there are any topics for this respondent group
      // update Parent's now have School Leadership
      let vCurrentRespondent = If($(vCurrentRespondentSimple) = 'Student' and ($(vCurrentTopic) = 'Parent/Guardian-Community Ties' or $(vCurrentTopic) = 'School Leadership'), 'Parent',
        If(($(vCurrentRespondentSimple) = 'Student' or $(vCurrentRespondentSimple2) = 'Parent') and ($(vCurrentTopic) = 'Professional Capacity'),'Teacher',
        $(vCurrentRespondentSimple)
      ));
      let vCurrentRespondent2 = If($(vCurrentRespondentSimple2) = 'Student' and ($(vCurrentTopic) = 'Parent/Guardian-Community Ties' or $(vCurrentTopic) = 'School Leadership'), 'Parent',
        If(($(vCurrentRespondentSimple2) = 'Student' or $(vCurrentRespondentSimple2) = 'Parent') and ($(vCurrentTopic) = 'Professional Capacity'),'Teacher',
        $(vCurrentRespondentSimple2)
      ));
      // vCurrentOrFirstRespondent takes account of any selections the user has made to limit groups
      let vCurrentOrFirstRespondent = If(GetSelectedCount([Respondent Group])=0 or WildMatch(GetFieldSelections([Respondent Group]), '*'&$(vCurrentRespondent)&'*') > 0, 
        $(vCurrentRespondent), MinString([Respondent Group]));
      let vCurrentOrFirstRespondent2 = If(GetSelectedCount([Respondent Group])=0 or WildMatch(GetFieldSelections([Respondent Group]), '*'&$(=$(vCurrentRespondent2))&'*') > 0, 
        $(vCurrentRespondent2), MinString([Respondent Group]));

    /// First Question available (with sorting at sub-construct level)
      // vFirstSubTopic is the first available subtopic for the given topic and available respondent
      let vFirstSubTopic = MinString({<
          [Respondent Group]={$(=$(vCurrentOrFirstRespondent))}, 
          [Construct]={$(vCurrentTopic)}, 
          [SubConstruct]={"*"}
          $(vSetOpts_EPD)$(vSetOpts_EPD)>}[SubConstruct]);
      // vFirstQuestionDisplayed is the first available question for the first available sub-topic
      // Note we replace single quotes with two single quotes, this allows set analysis later on where a single-quote would break the string
      let vFirstQuestionDisplayed = If(GetSelectedCount([QuestionText]) > 0,
          Replace(MinString([QuestionText]), Chr(39), Chr(39)&Chr(39)),
          Replace(MinString({<[Respondent Group]={"$(=$(vCurrentOrFirstRespondent))"}, [Construct]={$(vCurrentTopic)}, [SubConstruct]={"$(=$(vFirstSubTopic))"}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[QuestionText]), Chr(39), Chr(39)&Chr(39))
      );

      // vFirstQuestionKey is the code corresponding to the first displayed question
      let vFirstQuestionKey = If(GetSelectedCount([QuestionText]) = 0,
        MinString(total {<[QuestionText]={'$(=$(vFirstQuestionDisplayed))'}, [Construct]={$(vCurrentTopic)}, [Respondent Group]={"$(=$(vCurrentOrFirstRespondent))"} $(vSetOpts_EPD)$(vSetOpts_EPD)>}[%Survey|SchoolYear|QuestionCode])
        ,
        If( Count(total {<[QuestionText]={'$(=$(vFirstQuestionDisplayed))'}, [Respondent Group]={"$(=$(vCurrentOrFirstRespondent))"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [%Survey|SchoolYear|QuestionCode]) > 0,
          MinString(total {<[QuestionText]={'$(=$(vFirstQuestionDisplayed))'}, [Respondent Group]={"$(=$(vCurrentOrFirstRespondent))"}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[%Survey|SchoolYear|QuestionCode]),
           MinString(total {<[QuestionText]={'$(=$(vFirstQuestionDisplayed))'}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[%Survey|SchoolYear|QuestionCode])
        )
      );
      
      // vFirstQuestionm, vFirstQuestionRespondent and vFirstQuestionTopic are derived from the code (for display, not set analysis, use code)
      //let vFirstQuestionCode = SubField($(vFirstQuestionKey),'|',1) &'|'& SubField($(vFirstQuestionKey),'|',3);
      let vFirstQuestionCode = Only({<[%Survey|SchoolYear|QuestionCode]={"$(=$(vFirstQuestionKey))"}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[Survey|QuestionCode]);
      //let vFirstQuestionYear = SubField($(vFirstQuestionKey),'|',2);
      //let vFirstQuestionYearEnd = SubField($(vFirstQuestionYear),'-',2);
      let vFirstQuestion = MinString({<[%Survey|SchoolYear|QuestionCode]={"$(=$(vFirstQuestionKey))"}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[QuestionText]);
      let vFirstQuestionRespondent = Only(total {<[%Survey|SchoolYear|QuestionCode]={"$(=$(vFirstQuestionKey))"}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[Respondent Group]);
      let vFirstQuestionTopic = Only({<[%Survey|SchoolYear|QuestionCode]={"$(=$(vFirstQuestionKey))"}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[Construct]);
  
      // measures for the graph.
      let vCount_Respondent_Topic_Question_Current = Count(total {<[Survey|QuestionCode]={"$(=$(vFirstQuestionCode))"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[DisplayScore]);
      
      let vCountNA_Respondent_Topic_Question_Current = Sum({<
          [Survey|QuestionCode]={'$(=$(vFirstQuestionCode))'}, 
          YearEnd = {$(=$(vMaxYearEnd))}, Score_NoSkips={">100"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);

      let vRatio_Respondent_Topic_Question_Current = Count({<[Survey|QuestionCode]={"$(=$(vFirstQuestionCode))"},YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[DisplayScore])
          /
          Count(total{<[Survey|QuestionCode]={"$(=$(vFirstQuestionCode))"},YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[DisplayScore])
          + 0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vFirstQuestionCode))"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore])$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);

      let vmmRatio_Respondent_Topic_Question_Current = Num(
            If(
              '$(=$(vFirstQuestionRespondent))' = 'Student' and $(vMinStudents) <= $(vCount_Respondent_Topic_Question_Current) or
              '$(=$(vFirstQuestionRespondent))' = 'Parent' and $(vMinParents) <= $(vCount_Respondent_Topic_Question_Current) or
              '$(=$(vFirstQuestionRespondent))' = 'Teacher' and $(vMinTeachers) <= $(vCount_Respondent_Topic_Question_Current) or
              '$(=$(vFirstQuestionRespondent))' = 'Principal' and $(vMinPrincipals) <= $(vCount_Respondent_Topic_Question_Current)
            , 
            $(vRatio_Respondent_Topic_Question_Current), 0)
          ,'#.#%');

      
      let vCount_Respondent_Topic_Question_Previous = Count(total {<[Survey|QuestionCode]={"$(=$(vFirstQuestionCode))"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[DisplayScore]);
      
      let vCountNA_Respondent_Topic_Question_Previous = Sum({<
          [Survey|QuestionCode]={'$(=$(vFirstQuestionCode))'}, 
          YearEnd = {$(=$(vLastYearEnd))}, Score_NoSkips={">100"}$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);


      let vRatio_Respondent_Topic_Question_Previous = Count({<[Survey|QuestionCode]={"$(=$(vFirstQuestionCode))"},YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[DisplayScore])
          /
          Count(total{<[Survey|QuestionCode]={"$(=$(vFirstQuestionCode))"},YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[DisplayScore])
          - 0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vFirstQuestionCode))"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore])$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);

      let vmmRatio_Respondent_Topic_Question_Previous = Num(
            If(
              '$(=$(vFirstQuestionRespondent))' = 'Student' and $(vMinStudents) <= $(vCount_Respondent_Topic_Question_Previous) or
              '$(=$(vFirstQuestionRespondent))' = 'Parent' and $(vMinParents) <= $(vCount_Respondent_Topic_Question_Previous) or
              '$(=$(vFirstQuestionRespondent))' = 'Teacher' and $(vMinTeachers) <= $(vCount_Respondent_Topic_Question_Previous) or
              '$(=$(vFirstQuestionRespondent))' = 'Principal' and $(vMinPrincipals) <= $(vCount_Respondent_Topic_Question_Previous)
            , 
            $(vRatio_Respondent_Topic_Question_Previous), 0)
          ,'#.#%');

      let vCount_Respondent_Topic_Question_Current_Alt = Count(total {1<[Survey|QuestionCode]={"$(=$(vFirstQuestionCode))"}, YearEnd={$(=$(vMaxYearEnd))}> * Alt} [DisplayScore]);
      
      let vCountNA_Respondent_Topic_Question_Current_Alt = Sum({1<
          [Survey|QuestionCode]={'$(=$(vFirstQuestionCode))'}, 
          YearEnd = {$(=$(vMaxYearEnd))}, Score_NoSkips={">100"}> * Alt} [Responded]); 

      let vRatio_Respondent_Topic_Question_Current_Alt = Count({1<[Survey|QuestionCode]={"$(=$(vFirstQuestionCode))"},YearEnd={$(=$(vMaxYearEnd))}> * Alt} [DisplayScore])
          /
          Count(total{1<[Survey|QuestionCode]={"$(=$(vFirstQuestionCode))"},YearEnd={$(=$(vMaxYearEnd))}> * Alt} [DisplayScore])
          + 0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vFirstQuestionCode))"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore])$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);

     
      let vmmRatio_Respondent_Topic_Question_Current_Alt = Num(
            If(
              '$(=$(vFirstQuestionRespondent))' = 'Student' and $(vMinStudents) <= $(vCount_Respondent_Topic_Question_Current_Alt) or
              '$(=$(vFirstQuestionRespondent))' = 'Parent' and $(vMinParents) <= $(vCount_Respondent_Topic_Question_Current_Alt) or
              '$(=$(vFirstQuestionRespondent))' = 'Teacher' and $(vMinTeachers) <= $(vCount_Respondent_Topic_Question_Current_Alt) or
              '$(=$(vFirstQuestionRespondent))' = 'Principal' and $(vMinPrincipals) <= $(vCount_Respondent_Topic_Question_Current_Alt)
            , 
            $(vRatio_Respondent_Topic_Question_Current_Alt), 0)
          ,'#.#%');

      let vCount_Respondent_Topic_Question_Previous_Alt = Count(total {1<[Survey|QuestionCode]={"$(=$(vFirstQuestionCode))"}, YearEnd={$(=$(vLastYearEnd))}> * Alt} [DisplayScore]);
      
      let vCountNA_Respondent_Topic_Question_Previous_Alt = Sum({1<
          [Survey|QuestionCode]={'$(=$(vFirstQuestionCode))'}, 
          YearEnd = {$(=$(vLastYearEnd))}, Score_NoSkips={">100"}> * Alt} [Responded]); 


      let vRatio_Respondent_Topic_Question_Previous_Alt = Count({1<[Survey|QuestionCode]={"$(=$(vFirstQuestionCode))"},YearEnd={$(=$(vLastYearEnd))}> * Alt} [DisplayScore])
          /
          Count(total{1<[Survey|QuestionCode]={"$(=$(vFirstQuestionCode))"},YearEnd={$(=$(vLastYearEnd))}> * Alt} [DisplayScore])
          - 0.000001 * Max({1<[AnswerText_DisplayScore]=P({1<[Survey|QuestionCode]={"$(=$(vFirstQuestionCode))"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>}[AnswerText_DisplayScore])$(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]);

      let vmmRatio_Respondent_Topic_Question_Previous_Alt = Num(
            If(
              '$(=$(vFirstQuestionRespondent))' = 'Student' and $(vMinStudents) <= $(vCount_Respondent_Topic_Question_Previous_Alt) or
              '$(=$(vFirstQuestionRespondent))' = 'Parent' and $(vMinParents) <= $(vCount_Respondent_Topic_Question_Previous_Alt) or
              '$(=$(vFirstQuestionRespondent))' = 'Teacher' and $(vMinTeachers) <= $(vCount_Respondent_Topic_Question_Previous_Alt) or
              '$(=$(vFirstQuestionRespondent))' = 'Principal' and $(vMinPrincipals) <= $(vCount_Respondent_Topic_Question_Previous_Alt)
            , 
            $(vRatio_Respondent_Topic_Question_Previous_Alt), 0)
          ,'#.#%');
        
///// Survey Constructs and Subconstruct - Percent Most Positive (down and across method)
  //// Selected Respondent and Selected Topic
     let vCurrentOrFirstRespondent_Min = IF($(vCurrentOrFirstRespondent) = 'Student', $(vMinStudents), IF($(vCurrentOrFirstRespondent) = 'Parent', $(vMinParents), IF($(vCurrentOrFirstRespondent) = 'Teacher', $(vMinTeachers), IF($(vCurrentOrFirstRespondent) = 'Principal', $(vMinPrincipals), 5))));
     
    /// Current Year
      let vSet_Respondent_Topic_Current = {<[Respondent Group]={"$(=$(vCurrentOrFirstRespondent))"}, [Construct]={$(vCurrentTopic)}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vCount_Respondent_Topic_Current = Count(distinct $(vSet_Respondent_Topic_Current) RespondentID);
      let vPercMP_Respondent_Topic_Current = RangeAvg(Sum($(vSet_Respondent_Topic_Current) NHighest_1)/Sum($(vSet_Respondent_Topic_Current) NCompleted_1), Sum($(vSet_Respondent_Topic_Current) NHighest_2)/Sum($(vSet_Respondent_Topic_Current) NCompleted_2), Sum($(vSet_Respondent_Topic_Current) NHighest_3)/Sum($(vSet_Respondent_Topic_Current) NCompleted_3), Sum($(vSet_Respondent_Topic_Current) NHighest_4)/Sum($(vSet_Respondent_Topic_Current) NCompleted_4), Sum($(vSet_Respondent_Topic_Current) NHighest_5)/Sum($(vSet_Respondent_Topic_Current) NCompleted_5), Sum($(vSet_Respondent_Topic_Current) NHighest_6)/Sum($(vSet_Respondent_Topic_Current) NCompleted_6), Sum($(vSet_Respondent_Topic_Current) NHighest_7)/Sum($(vSet_Respondent_Topic_Current) NCompleted_7));
      let vmmPercMP_Respondent_Topic_Current = Num(IF($(vCurrentOrFirstRespondent_Min) <= $(vCount_Respondent_Topic_Current), $(vPercMP_Respondent_Topic_Current), Null()),'#.#%');
  
    // Previous Year
      let vSet_Respondent_Topic_Previous = {<[Respondent Group]={"$(=$(vCurrentOrFirstRespondent))"}, [Construct]={$(vCurrentTopic)}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vCount_Respondent_Topic_Previous = Count(distinct $(vSet_Respondent_Topic_Previous) RespondentID);
      let vPercMP_Respondent_Topic_Previous = RangeAvg(Sum($(vSet_Respondent_Topic_Previous) NHighest_1)/Sum($(vSet_Respondent_Topic_Previous) NCompleted_1), Sum($(vSet_Respondent_Topic_Previous) NHighest_2)/Sum($(vSet_Respondent_Topic_Previous) NCompleted_2), Sum($(vSet_Respondent_Topic_Previous) NHighest_3)/Sum($(vSet_Respondent_Topic_Previous) NCompleted_3), Sum($(vSet_Respondent_Topic_Previous) NHighest_4)/Sum($(vSet_Respondent_Topic_Previous) NCompleted_4), Sum($(vSet_Respondent_Topic_Previous) NHighest_5)/Sum($(vSet_Respondent_Topic_Previous) NCompleted_5), Sum($(vSet_Respondent_Topic_Previous) NHighest_6)/Sum($(vSet_Respondent_Topic_Previous) NCompleted_6), Sum($(vSet_Respondent_Topic_Previous) NHighest_7)/Sum($(vSet_Respondent_Topic_Previous) NCompleted_7));
      let vmmPercMP_Respondent_Topic_Previous = Num(IF($(vCurrentOrFirstRespondent_Min) <= $(vCount_Respondent_Topic_Previous), $(vPercMP_Respondent_Topic_Previous), Null()),'#.#%');

    // District and network wide (for reference lines)
      let vSet_Respondent_Topic_Current_District = {1<[Respondent Group]={"$(=$(vCurrentOrFirstRespondent))"}, [Construct]={$(vCurrentTopic)}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vCount_Respondent_Topic_Current_District = Count(distinct $(vSet_Respondent_Topic_Current_District) RespondentID);
      let vPercMP_Respondent_Topic_Current_District = RangeAvg(Sum($(vSet_Respondent_Topic_Current_District) NHighest_1)/Sum($(vSet_Respondent_Topic_Current_District) NCompleted_1), Sum($(vSet_Respondent_Topic_Current_District) NHighest_2)/Sum($(vSet_Respondent_Topic_Current_District) NCompleted_2), Sum($(vSet_Respondent_Topic_Current_District) NHighest_3)/Sum($(vSet_Respondent_Topic_Current_District) NCompleted_3), Sum($(vSet_Respondent_Topic_Current_District) NHighest_4)/Sum($(vSet_Respondent_Topic_Current_District) NCompleted_4), Sum($(vSet_Respondent_Topic_Current_District) NHighest_5)/Sum($(vSet_Respondent_Topic_Current_District) NCompleted_5), Sum($(vSet_Respondent_Topic_Current_District) NHighest_6)/Sum($(vSet_Respondent_Topic_Current_District) NCompleted_6), Sum($(vSet_Respondent_Topic_Current_District) NHighest_7)/Sum($(vSet_Respondent_Topic_Current_District) NCompleted_7));
      
      let vSet_Respondent_Topic_Current_Network = {1<[Respondent Group]={"$(=$(vCurrentOrFirstRespondent))"}, [Construct]={$(vCurrentTopic)}, YearEnd={$(=$(vMaxYearEnd))}, learningnetwork = p() $(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vCount_Respondent_Topic_Current_Network = Count(distinct $(vSet_Respondent_Topic_Current_Network) RespondentID);
      let vPercMP_Respondent_Topic_Current_Network = RangeAvg(Sum($(vSet_Respondent_Topic_Current_Network) NHighest_1)/Sum($(vSet_Respondent_Topic_Current_Network) NCompleted_1), Sum($(vSet_Respondent_Topic_Current_Network) NHighest_2)/Sum($(vSet_Respondent_Topic_Current_Network) NCompleted_2), Sum($(vSet_Respondent_Topic_Current_Network) NHighest_3)/Sum($(vSet_Respondent_Topic_Current_Network) NCompleted_3), Sum($(vSet_Respondent_Topic_Current_Network) NHighest_4)/Sum($(vSet_Respondent_Topic_Current_Network) NCompleted_4), Sum($(vSet_Respondent_Topic_Current_Network) NHighest_5)/Sum($(vSet_Respondent_Topic_Current_Network) NCompleted_5), Sum($(vSet_Respondent_Topic_Current_Network) NHighest_6)/Sum($(vSet_Respondent_Topic_Current_Network) NCompleted_6), Sum($(vSet_Respondent_Topic_Current_Network) NHighest_7)/Sum($(vSet_Respondent_Topic_Current_Network) NCompleted_7));

    // YOY
    let vmmPercMP_Respondent_Topic_YOY = Num($(vmmPercMP_Respondent_Topic_Current) - $(vmmPercMP_Respondent_Topic_Previous),  '#.#%');

  //// Selected Topic each respondent
    /// Current Year
      let vSet_Student_Topic_Current = {<[Respondent Group]={"Student"}, [Construct]={$(vCurrentTopic)}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vCount_Student_Topic_Current = Count(distinct $(vSet_Student_Topic_Current) RespondentID);
      let vPercMP_Student_Topic_Current = RangeAvg(Sum($(vSet_Student_Topic_Current) NHighest_1)/Sum($(vSet_Student_Topic_Current) NCompleted_1), Sum($(vSet_Student_Topic_Current) NHighest_2)/Sum($(vSet_Student_Topic_Current) NCompleted_2), Sum($(vSet_Student_Topic_Current) NHighest_3)/Sum($(vSet_Student_Topic_Current) NCompleted_3), Sum($(vSet_Student_Topic_Current) NHighest_4)/Sum($(vSet_Student_Topic_Current) NCompleted_4), Sum($(vSet_Student_Topic_Current) NHighest_5)/Sum($(vSet_Student_Topic_Current) NCompleted_5), Sum($(vSet_Student_Topic_Current) NHighest_6)/Sum($(vSet_Student_Topic_Current) NCompleted_6), Sum($(vSet_Student_Topic_Current) NHighest_7)/Sum($(vSet_Student_Topic_Current) NCompleted_7));
      let vmmPercMP_Student_Topic_Current = Num(IF($(vMinStudents) <= $(vCount_Student_Topic_Current), $(vPercMP_Student_Topic_Current), Null()),'#.#%');
      let vmmPercMP_Student_Topic_Current_Neg = Num(IF($(vMinStudents) <= $(vCount_Student_Topic_Current), $(vPercMP_Student_Topic_Current), -1),'#.#%');
      
      let vSet_Parent_Topic_Current = {<[Respondent Group]={"Parent"}, [Construct]={$(vCurrentTopic)}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vCount_Parent_Topic_Current = Count(distinct $(vSet_Parent_Topic_Current) RespondentID);
      let vPercMP_Parent_Topic_Current = RangeAvg(Sum($(vSet_Parent_Topic_Current) NHighest_1)/Sum($(vSet_Parent_Topic_Current) NCompleted_1), Sum($(vSet_Parent_Topic_Current) NHighest_2)/Sum($(vSet_Parent_Topic_Current) NCompleted_2), Sum($(vSet_Parent_Topic_Current) NHighest_3)/Sum($(vSet_Parent_Topic_Current) NCompleted_3), Sum($(vSet_Parent_Topic_Current) NHighest_4)/Sum($(vSet_Parent_Topic_Current) NCompleted_4), Sum($(vSet_Parent_Topic_Current) NHighest_5)/Sum($(vSet_Parent_Topic_Current) NCompleted_5), Sum($(vSet_Parent_Topic_Current) NHighest_6)/Sum($(vSet_Parent_Topic_Current) NCompleted_6), Sum($(vSet_Parent_Topic_Current) NHighest_7)/Sum($(vSet_Parent_Topic_Current) NCompleted_7));
      let vmmPercMP_Parent_Topic_Current = Num(IF($(vMinParents) <= $(vCount_Parent_Topic_Current), $(vPercMP_Parent_Topic_Current), Null()),'#.#%');
      let vmmPercMP_Parent_Topic_Current_Neg = Num(IF($(vMinParents) <= $(vCount_Parent_Topic_Current), $(vPercMP_Parent_Topic_Current), -1),'#.#%');
      
      let vSet_Teacher_Topic_Current = {<[Respondent Group]={"Teacher"}, [Construct]={$(vCurrentTopic)}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vCount_Teacher_Topic_Current = Count(distinct $(vSet_Teacher_Topic_Current) RespondentID);
      let vPercMP_Teacher_Topic_Current = RangeAvg(Sum($(vSet_Teacher_Topic_Current) NHighest_1)/Sum($(vSet_Teacher_Topic_Current) NCompleted_1), Sum($(vSet_Teacher_Topic_Current) NHighest_2)/Sum($(vSet_Teacher_Topic_Current) NCompleted_2), Sum($(vSet_Teacher_Topic_Current) NHighest_3)/Sum($(vSet_Teacher_Topic_Current) NCompleted_3), Sum($(vSet_Teacher_Topic_Current) NHighest_4)/Sum($(vSet_Teacher_Topic_Current) NCompleted_4), Sum($(vSet_Teacher_Topic_Current) NHighest_5)/Sum($(vSet_Teacher_Topic_Current) NCompleted_5), Sum($(vSet_Teacher_Topic_Current) NHighest_6)/Sum($(vSet_Teacher_Topic_Current) NCompleted_6), Sum($(vSet_Teacher_Topic_Current) NHighest_7)/Sum($(vSet_Teacher_Topic_Current) NCompleted_7));
      let vmmPercMP_Teacher_Topic_Current = Num(IF($(vMinTeachers) <= $(vCount_Teacher_Topic_Current), $(vPercMP_Teacher_Topic_Current), Null()),'#.#%');
      let vmmPercMP_Teacher_Topic_Current_Neg = Num(IF($(vMinTeachers) <= $(vCount_Teacher_Topic_Current), $(vPercMP_Teacher_Topic_Current), -1),'#.#%');
      
      let vSet_Principal_Topic_Current = {<[Respondent Group]={"Principal"}, [Construct]={$(vCurrentTopic)}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vCount_Principal_Topic_Current = Count(distinct $(vSet_Principal_Topic_Current) RespondentID);
      let vPercMP_Principal_Topic_Current = RangeAvg(Sum($(vSet_Principal_Topic_Current) NHighest_1)/Sum($(vSet_Principal_Topic_Current) NCompleted_1), Sum($(vSet_Principal_Topic_Current) NHighest_2)/Sum($(vSet_Principal_Topic_Current) NCompleted_2), Sum($(vSet_Principal_Topic_Current) NHighest_3)/Sum($(vSet_Principal_Topic_Current) NCompleted_3), Sum($(vSet_Principal_Topic_Current) NHighest_4)/Sum($(vSet_Principal_Topic_Current) NCompleted_4), Sum($(vSet_Principal_Topic_Current) NHighest_5)/Sum($(vSet_Principal_Topic_Current) NCompleted_5), Sum($(vSet_Principal_Topic_Current) NHighest_6)/Sum($(vSet_Principal_Topic_Current) NCompleted_6), Sum($(vSet_Principal_Topic_Current) NHighest_7)/Sum($(vSet_Principal_Topic_Current) NCompleted_7));
      let vmmPercMP_Principal_Topic_Current = Num(IF($(vMinPrincipals) <= $(vCount_Principal_Topic_Current), $(vPercMP_Principal_Topic_Current), Null()),'#.#%');
      let vmmPercMP_Principal_Topic_Current_Neg = Num(IF($(vMinPrincipals) <= $(vCount_Principal_Topic_Current), $(vPercMP_Principal_Topic_Current), -1),'#.#%');

    /// Previous Year
      let vSet_Student_Topic_Previous = {<[Respondent Group]={"Student"}, [Construct]={$(vCurrentTopic)}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vCount_Student_Topic_Previous = RangeMax(Sum($(vSet_Student_Topic_Previous) NCompleted_1),Sum($(vSet_Student_Topic_Previous) NCompleted_2), Sum($(vSet_Student_Topic_Previous) NCompleted_3), Sum($(vSet_Student_Topic_Previous) NCompleted_4), Sum($(vSet_Student_Topic_Previous) NCompleted_5), Sum($(vSet_Student_Topic_Previous) NCompleted_6), Sum($(vSet_Student_Topic_Previous) NCompleted_7));
      let vPercMP_Student_Topic_Previous = RangeAvg(Sum($(vSet_Student_Topic_Previous) NHighest_1)/Sum($(vSet_Student_Topic_Previous) NCompleted_1), Sum($(vSet_Student_Topic_Previous) NHighest_2)/Sum($(vSet_Student_Topic_Previous) NCompleted_2), Sum($(vSet_Student_Topic_Previous) NHighest_3)/Sum($(vSet_Student_Topic_Previous) NCompleted_3), Sum($(vSet_Student_Topic_Previous) NHighest_4)/Sum($(vSet_Student_Topic_Previous) NCompleted_4), Sum($(vSet_Student_Topic_Previous) NHighest_5)/Sum($(vSet_Student_Topic_Previous) NCompleted_5), Sum($(vSet_Student_Topic_Previous) NHighest_6)/Sum($(vSet_Student_Topic_Previous) NCompleted_6), Sum($(vSet_Student_Topic_Previous) NHighest_7)/Sum($(vSet_Student_Topic_Previous) NCompleted_7));
      let vmmPercMP_Student_Topic_Previous = Num(IF($(vMinStudents) <= $(vCount_Student_Topic_Previous), $(vPercMP_Student_Topic_Previous), Null()),'#.#%');
      
      let vSet_Parent_Topic_Previous = {<[Respondent Group]={"Parent"}, [Construct]={$(vCurrentTopic)}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vCount_Parent_Topic_Previous = RangeMax(Sum($(vSet_Parent_Topic_Previous) NCompleted_1),Sum($(vSet_Parent_Topic_Previous) NCompleted_2), Sum($(vSet_Parent_Topic_Previous) NCompleted_3), Sum($(vSet_Parent_Topic_Previous) NCompleted_4), Sum($(vSet_Parent_Topic_Previous) NCompleted_5), Sum($(vSet_Parent_Topic_Previous) NCompleted_6), Sum($(vSet_Parent_Topic_Previous) NCompleted_7));
      let vPercMP_Parent_Topic_Previous = RangeAvg(Sum($(vSet_Parent_Topic_Previous) NHighest_1)/Sum($(vSet_Parent_Topic_Previous) NCompleted_1), Sum($(vSet_Parent_Topic_Previous) NHighest_2)/Sum($(vSet_Parent_Topic_Previous) NCompleted_2), Sum($(vSet_Parent_Topic_Previous) NHighest_3)/Sum($(vSet_Parent_Topic_Previous) NCompleted_3), Sum($(vSet_Parent_Topic_Previous) NHighest_4)/Sum($(vSet_Parent_Topic_Previous) NCompleted_4), Sum($(vSet_Parent_Topic_Previous) NHighest_5)/Sum($(vSet_Parent_Topic_Previous) NCompleted_5), Sum($(vSet_Parent_Topic_Previous) NHighest_6)/Sum($(vSet_Parent_Topic_Previous) NCompleted_6), Sum($(vSet_Parent_Topic_Previous) NHighest_7)/Sum($(vSet_Parent_Topic_Previous) NCompleted_7));
      let vmmPercMP_Parent_Topic_Previous = Num(IF($(vMinParents) <= $(vCount_Parent_Topic_Previous), $(vPercMP_Parent_Topic_Previous), Null()),'#.#%');
      
      let vSet_Teacher_Topic_Previous = {<[Respondent Group]={"Teacher"}, [Construct]={$(vCurrentTopic)}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vCount_Teacher_Topic_Previous = RangeMax(Sum($(vSet_Teacher_Topic_Previous) NCompleted_1),Sum($(vSet_Teacher_Topic_Previous) NCompleted_2), Sum($(vSet_Teacher_Topic_Previous) NCompleted_3), Sum($(vSet_Teacher_Topic_Previous) NCompleted_4), Sum($(vSet_Teacher_Topic_Previous) NCompleted_5), Sum($(vSet_Teacher_Topic_Previous) NCompleted_6), Sum($(vSet_Teacher_Topic_Previous) NCompleted_7));
      let vPercMP_Teacher_Topic_Previous = RangeAvg(Sum($(vSet_Teacher_Topic_Previous) NHighest_1)/Sum($(vSet_Teacher_Topic_Previous) NCompleted_1), Sum($(vSet_Teacher_Topic_Previous) NHighest_2)/Sum($(vSet_Teacher_Topic_Previous) NCompleted_2), Sum($(vSet_Teacher_Topic_Previous) NHighest_3)/Sum($(vSet_Teacher_Topic_Previous) NCompleted_3), Sum($(vSet_Teacher_Topic_Previous) NHighest_4)/Sum($(vSet_Teacher_Topic_Previous) NCompleted_4), Sum($(vSet_Teacher_Topic_Previous) NHighest_5)/Sum($(vSet_Teacher_Topic_Previous) NCompleted_5), Sum($(vSet_Teacher_Topic_Previous) NHighest_6)/Sum($(vSet_Teacher_Topic_Previous) NCompleted_6), Sum($(vSet_Teacher_Topic_Previous) NHighest_7)/Sum($(vSet_Teacher_Topic_Previous) NCompleted_7));
      let vmmPercMP_Teacher_Topic_Previous = Num(IF($(vMinTeachers) <= $(vCount_Teacher_Topic_Previous), $(vPercMP_Teacher_Topic_Previous), Null()),'#.#%');
      
      let vSet_Principal_Topic_Previous = {<[Respondent Group]={"Principal"}, [Construct]={$(vCurrentTopic)}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vCount_Principal_Topic_Previous = RangeMax(Sum($(vSet_Principal_Topic_Previous) NCompleted_1),Sum($(vSet_Principal_Topic_Previous) NCompleted_2), Sum($(vSet_Principal_Topic_Previous) NCompleted_3), Sum($(vSet_Principal_Topic_Previous) NCompleted_4), Sum($(vSet_Principal_Topic_Previous) NCompleted_5), Sum($(vSet_Principal_Topic_Previous) NCompleted_6), Sum($(vSet_Principal_Topic_Previous) NCompleted_7));
      let vPercMP_Principal_Topic_Previous = RangeAvg(Sum($(vSet_Principal_Topic_Previous) NHighest_1)/Sum($(vSet_Principal_Topic_Previous) NCompleted_1), Sum($(vSet_Principal_Topic_Previous) NHighest_2)/Sum($(vSet_Principal_Topic_Previous) NCompleted_2), Sum($(vSet_Principal_Topic_Previous) NHighest_3)/Sum($(vSet_Principal_Topic_Previous) NCompleted_3), Sum($(vSet_Principal_Topic_Previous) NHighest_4)/Sum($(vSet_Principal_Topic_Previous) NCompleted_4), Sum($(vSet_Principal_Topic_Previous) NHighest_5)/Sum($(vSet_Principal_Topic_Previous) NCompleted_5), Sum($(vSet_Principal_Topic_Previous) NHighest_6)/Sum($(vSet_Principal_Topic_Previous) NCompleted_6), Sum($(vSet_Principal_Topic_Previous) NHighest_7)/Sum($(vSet_Principal_Topic_Previous) NCompleted_7));
      let vmmPercMP_Principal_Topic_Previous = Num(IF($(vMinPrincipals) <= $(vCount_Principal_Topic_Previous), $(vPercMP_Principal_Topic_Previous), Null()),'#.#%');

    /// AllYears
      let vSet_Student_Topic_AllYears = {<[Respondent Group]={"Student"}, [Construct]={$(vCurrentTopic)}, YearEnd=$(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vCount_Student_Topic_AllYears = RangeMax(Sum($(vSet_Student_Topic_AllYears) NCompleted_1),Sum($(vSet_Student_Topic_AllYears) NCompleted_2), Sum($(vSet_Student_Topic_AllYears) NCompleted_3), Sum($(vSet_Student_Topic_AllYears) NCompleted_4), Sum($(vSet_Student_Topic_AllYears) NCompleted_5), Sum($(vSet_Student_Topic_AllYears) NCompleted_6), Sum($(vSet_Student_Topic_AllYears) NCompleted_7));
      let vPercMP_Student_Topic_AllYears = RangeAvg(Sum($(vSet_Student_Topic_AllYears) NHighest_1)/Sum($(vSet_Student_Topic_AllYears) NCompleted_1), Sum($(vSet_Student_Topic_AllYears) NHighest_2)/Sum($(vSet_Student_Topic_AllYears) NCompleted_2), Sum($(vSet_Student_Topic_AllYears) NHighest_3)/Sum($(vSet_Student_Topic_AllYears) NCompleted_3), Sum($(vSet_Student_Topic_AllYears) NHighest_4)/Sum($(vSet_Student_Topic_AllYears) NCompleted_4), Sum($(vSet_Student_Topic_AllYears) NHighest_5)/Sum($(vSet_Student_Topic_AllYears) NCompleted_5), Sum($(vSet_Student_Topic_AllYears) NHighest_6)/Sum($(vSet_Student_Topic_AllYears) NCompleted_6), Sum($(vSet_Student_Topic_AllYears) NHighest_7)/Sum($(vSet_Student_Topic_AllYears) NCompleted_7));
      let vmmPercMP_Student_Topic_AllYears = Num(IF($(vMinStudents) <= $(vCount_Student_Topic_AllYears), $(vPercMP_Student_Topic_AllYears), Null()),'#.#%');
      
      let vSet_Parent_Topic_AllYears = {<[Respondent Group]={"Parent"}, [Construct]={$(vCurrentTopic)}, YearEnd=$(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vCount_Parent_Topic_AllYears = RangeMax(Sum($(vSet_Parent_Topic_AllYears) NCompleted_1),Sum($(vSet_Parent_Topic_AllYears) NCompleted_2), Sum($(vSet_Parent_Topic_AllYears) NCompleted_3), Sum($(vSet_Parent_Topic_AllYears) NCompleted_4), Sum($(vSet_Parent_Topic_AllYears) NCompleted_5), Sum($(vSet_Parent_Topic_AllYears) NCompleted_6), Sum($(vSet_Parent_Topic_AllYears) NCompleted_7));
      let vPercMP_Parent_Topic_AllYears = RangeAvg(Sum($(vSet_Parent_Topic_AllYears) NHighest_1)/Sum($(vSet_Parent_Topic_AllYears) NCompleted_1), Sum($(vSet_Parent_Topic_AllYears) NHighest_2)/Sum($(vSet_Parent_Topic_AllYears) NCompleted_2), Sum($(vSet_Parent_Topic_AllYears) NHighest_3)/Sum($(vSet_Parent_Topic_AllYears) NCompleted_3), Sum($(vSet_Parent_Topic_AllYears) NHighest_4)/Sum($(vSet_Parent_Topic_AllYears) NCompleted_4), Sum($(vSet_Parent_Topic_AllYears) NHighest_5)/Sum($(vSet_Parent_Topic_AllYears) NCompleted_5), Sum($(vSet_Parent_Topic_AllYears) NHighest_6)/Sum($(vSet_Parent_Topic_AllYears) NCompleted_6), Sum($(vSet_Parent_Topic_AllYears) NHighest_7)/Sum($(vSet_Parent_Topic_AllYears) NCompleted_7));
      let vmmPercMP_Parent_Topic_AllYears = Num(IF($(vMinParents) <= $(vCount_Parent_Topic_AllYears), $(vPercMP_Parent_Topic_AllYears), Null()),'#.#%');
      
      let vSet_Teacher_Topic_AllYears = {<[Respondent Group]={"Teacher"}, [Construct]={$(vCurrentTopic)}, YearEnd=$(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vCount_Teacher_Topic_AllYears = RangeMax(Sum($(vSet_Teacher_Topic_AllYears) NCompleted_1),Sum($(vSet_Teacher_Topic_AllYears) NCompleted_2), Sum($(vSet_Teacher_Topic_AllYears) NCompleted_3), Sum($(vSet_Teacher_Topic_AllYears) NCompleted_4), Sum($(vSet_Teacher_Topic_AllYears) NCompleted_5), Sum($(vSet_Teacher_Topic_AllYears) NCompleted_6), Sum($(vSet_Teacher_Topic_AllYears) NCompleted_7));
      let vPercMP_Teacher_Topic_AllYears = RangeAvg(Sum($(vSet_Teacher_Topic_AllYears) NHighest_1)/Sum($(vSet_Teacher_Topic_AllYears) NCompleted_1), Sum($(vSet_Teacher_Topic_AllYears) NHighest_2)/Sum($(vSet_Teacher_Topic_AllYears) NCompleted_2), Sum($(vSet_Teacher_Topic_AllYears) NHighest_3)/Sum($(vSet_Teacher_Topic_AllYears) NCompleted_3), Sum($(vSet_Teacher_Topic_AllYears) NHighest_4)/Sum($(vSet_Teacher_Topic_AllYears) NCompleted_4), Sum($(vSet_Teacher_Topic_AllYears) NHighest_5)/Sum($(vSet_Teacher_Topic_AllYears) NCompleted_5), Sum($(vSet_Teacher_Topic_AllYears) NHighest_6)/Sum($(vSet_Teacher_Topic_AllYears) NCompleted_6), Sum($(vSet_Teacher_Topic_AllYears) NHighest_7)/Sum($(vSet_Teacher_Topic_AllYears) NCompleted_7));
      let vmmPercMP_Teacher_Topic_AllYears = Num(IF($(vMinTeachers) <= $(vCount_Teacher_Topic_AllYears), $(vPercMP_Teacher_Topic_AllYears), Null()),'#.#%');
      
      let vSet_Principal_Topic_AllYears = {<[Respondent Group]={"Principal"}, [Construct]={$(vCurrentTopic)}, YearEnd=$(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vCount_Principal_Topic_AllYears = RangeMax(Sum($(vSet_Principal_Topic_AllYears) NCompleted_1),Sum($(vSet_Principal_Topic_AllYears) NCompleted_2), Sum($(vSet_Principal_Topic_AllYears) NCompleted_3), Sum($(vSet_Principal_Topic_AllYears) NCompleted_4), Sum($(vSet_Principal_Topic_AllYears) NCompleted_5), Sum($(vSet_Principal_Topic_AllYears) NCompleted_6), Sum($(vSet_Principal_Topic_AllYears) NCompleted_7));
      let vPercMP_Principal_Topic_AllYears = RangeAvg(Sum($(vSet_Principal_Topic_AllYears) NHighest_1)/Sum($(vSet_Principal_Topic_AllYears) NCompleted_1), Sum($(vSet_Principal_Topic_AllYears) NHighest_2)/Sum($(vSet_Principal_Topic_AllYears) NCompleted_2), Sum($(vSet_Principal_Topic_AllYears) NHighest_3)/Sum($(vSet_Principal_Topic_AllYears) NCompleted_3), Sum($(vSet_Principal_Topic_AllYears) NHighest_4)/Sum($(vSet_Principal_Topic_AllYears) NCompleted_4), Sum($(vSet_Principal_Topic_AllYears) NHighest_5)/Sum($(vSet_Principal_Topic_AllYears) NCompleted_5), Sum($(vSet_Principal_Topic_AllYears) NHighest_6)/Sum($(vSet_Principal_Topic_AllYears) NCompleted_6), Sum($(vSet_Principal_Topic_AllYears) NHighest_7)/Sum($(vSet_Principal_Topic_AllYears) NCompleted_7));
      let vmmPercMP_Principal_Topic_AllYears = Num(IF($(vMinPrincipals) <= $(vCount_Principal_Topic_AllYears), $(vPercMP_Principal_Topic_AllYears), Null()),'#.#%');
  
  //// Selected Topic, each respondent
      let vCount_Responded_Student_Topic = Num(Sum({<[Respondent Group] = {"Student"}, [Construct]={$(vCurrentTopic)}, [SchoolYear]= $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#0.#');
      let vCount_Responded_Parent_Topic = Num(Sum({<[Respondent Group] = {"Parent"}, [Construct]={$(vCurrentTopic)}, [SchoolYear]= $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]), '#0.#');
      let vCount_Responded_Teacher_Topic = Num(Sum({<[Respondent Group] = {"Teacher"}, [Construct]={$(vCurrentTopic)}, [SchoolYear]= $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]),'#0.#');
      let vCount_Responded_Principal_Topic = Num(Sum({<[Respondent Group] = {"Principal"}, [Construct]={$(vCurrentTopic)}, [SchoolYear]= $(vSetOpts_EPD)$(vSetOpts_EPD)>} [Responded]),'#0.#');

  //// All Respondents and Selected Topic
    /// Current Year
      let vSet_AnyRespondent_Topic_Current = {<[Respondent Group]=, [Construct]={$(vCurrentTopic)}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vSet_AnyRespondent_AnyTopic_Current = {<[Respondent Group]=, [Construct]=, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vCount_AnyRespondent_Topic_Current = Count(distinct $(vSet_AnyRespondent_Topic_Current) RespondentID);
      let vCount_AnyRespondent_AnyTopic_Current = Count(distinct $(vSet_AnyRespondent_Topic_Current) RespondentID);
      let vPercMP_AnyRespondent_Topic_Current = RangeAvg(Sum($(vSet_AnyRespondent_Topic_Current) NHighest_1)/Sum($(vSet_AnyRespondent_Topic_Current) NCompleted_1), Sum($(vSet_AnyRespondent_Topic_Current) NHighest_2)/Sum($(vSet_AnyRespondent_Topic_Current) NCompleted_2), Sum($(vSet_AnyRespondent_Topic_Current) NHighest_3)/Sum($(vSet_AnyRespondent_Topic_Current) NCompleted_3), Sum($(vSet_AnyRespondent_Topic_Current) NHighest_4)/Sum($(vSet_AnyRespondent_Topic_Current) NCompleted_4), Sum($(vSet_AnyRespondent_Topic_Current) NHighest_5)/Sum($(vSet_AnyRespondent_Topic_Current) NCompleted_5), Sum($(vSet_AnyRespondent_Topic_Current) NHighest_6)/Sum($(vSet_AnyRespondent_Topic_Current) NCompleted_6), Sum($(vSet_AnyRespondent_Topic_Current) NHighest_7)/Sum($(vSet_AnyRespondent_Topic_Current) NCompleted_7));
      let vPercMP_AnyRespondent_AnyTopic_Current = RangeAvg(Sum($(vSet_AnyRespondent_AnyTopic_Current) NHighest_1)/Sum($(vSet_AnyRespondent_AnyTopic_Current) NCompleted_1), Sum($(vSet_AnyRespondent_AnyTopic_Current) NHighest_2)/Sum($(vSet_AnyRespondent_AnyTopic_Current) NCompleted_2), Sum($(vSet_AnyRespondent_AnyTopic_Current) NHighest_3)/Sum($(vSet_AnyRespondent_AnyTopic_Current) NCompleted_3), Sum($(vSet_AnyRespondent_AnyTopic_Current) NHighest_4)/Sum($(vSet_AnyRespondent_AnyTopic_Current) NCompleted_4), Sum($(vSet_AnyRespondent_AnyTopic_Current) NHighest_5)/Sum($(vSet_AnyRespondent_AnyTopic_Current) NCompleted_5), Sum($(vSet_AnyRespondent_AnyTopic_Current) NHighest_6)/Sum($(vSet_AnyRespondent_AnyTopic_Current) NCompleted_6), Sum($(vSet_AnyRespondent_AnyTopic_Current) NHighest_7)/Sum($(vSet_AnyRespondent_AnyTopic_Current) NCompleted_7));
      let vmmPercMP_AnyRespondent_Topic_Current = Num(IF([Respondent Group] = 'Student', IF($(vMinStudents) <= $(vCount_Student_Topic_Current), $(vPercMP_Student_Topic_Current), Null()), IF([Respondent Group] = 'Parent', IF($(vMinParents) <= $(vCount_Parent_Topic_Current), $(vPercMP_Parent_Topic_Current), Null()), IF([Respondent Group] = 'Teacher', IF($(vMinTeachers) <= $(vCount_Teacher_Topic_Current), $(vPercMP_Teacher_Topic_Current), Null()), IF([Respondent Group] = 'Principal', IF($(vMinPrincipals) <= $(vCount_Principal_Topic_Current), $(vPercMP_Principal_Topic_Current), Null()), 5)))),'#.#%');
      let vmmPercMP_AnyRespondent_AnyTopic_Current = Num(IF([Respondent Group] = 'Student', IF($(vMinStudents) <= $(vCount_AnyRespondent_AnyTopic_Current), $(vPercMP_AnyRespondent_AnyTopic_Current), Null()), IF([Respondent Group] = 'Parent', IF($(vMinParents) <= $(vCount_AnyRespondent_AnyTopic_Current), $(vPercMP_AnyRespondent_AnyTopic_Current), Null()), IF([Respondent Group] = 'Teacher', IF($(vMinTeachers) <= $(vCount_AnyRespondent_AnyTopic_Current), $(vPercMP_AnyRespondent_AnyTopic_Current), Null()), IF([Respondent Group] = 'Principal', IF($(vMinPrincipals) <= $(vCount_AnyRespondent_AnyTopic_Current), $(vPercMP_AnyRespondent_AnyTopic_Current), Null()), 5)))),'#.#%');
      
    /// Previous Year
      let vSet_AnyRespondent_Topic_Previous = {<[Respondent Group]=, [Construct]={$(vCurrentTopic)}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vCount_AnyRespondent_Topic_Previous = RangeMax(Sum($(vSet_AnyRespondent_Topic_Previous) NCompleted_1),Sum($(vSet_AnyRespondent_Topic_Previous) NCompleted_2), Sum($(vSet_AnyRespondent_Topic_Previous) NCompleted_3), Sum($(vSet_AnyRespondent_Topic_Previous) NCompleted_4), Sum($(vSet_AnyRespondent_Topic_Previous) NCompleted_5), Sum($(vSet_AnyRespondent_Topic_Previous) NCompleted_6), Sum($(vSet_AnyRespondent_Topic_Previous) NCompleted_7));
      let vPercMP_AnyRespondent_Topic_Previous = RangeAvg(Sum($(vSet_AnyRespondent_Topic_Previous) NHighest_1)/Sum($(vSet_AnyRespondent_Topic_Previous) NCompleted_1), Sum($(vSet_AnyRespondent_Topic_Previous) NHighest_2)/Sum($(vSet_AnyRespondent_Topic_Previous) NCompleted_2), Sum($(vSet_AnyRespondent_Topic_Previous) NHighest_3)/Sum($(vSet_AnyRespondent_Topic_Previous) NCompleted_3), Sum($(vSet_AnyRespondent_Topic_Previous) NHighest_4)/Sum($(vSet_AnyRespondent_Topic_Previous) NCompleted_4), Sum($(vSet_AnyRespondent_Topic_Previous) NHighest_5)/Sum($(vSet_AnyRespondent_Topic_Previous) NCompleted_5), Sum($(vSet_AnyRespondent_Topic_Previous) NHighest_6)/Sum($(vSet_AnyRespondent_Topic_Previous) NCompleted_6), Sum($(vSet_AnyRespondent_Topic_Previous) NHighest_7)/Sum($(vSet_AnyRespondent_Topic_Previous) NCompleted_7));
      let vmmPercMP_AnyRespondent_Topic_Previous = Num(IF([Respondent Group] = 'Student', IF($(vMinStudents) <= $(vCount_Student_Topic_Previous), $(vPercMP_Student_Topic_Previous), Null()), IF([Respondent Group] = 'Parent', IF($(vMinParents) <= $(vCount_Parent_Topic_Previous), $(vPercMP_Parent_Topic_Previous), Null()), IF([Respondent Group] = 'Teacher', IF($(vMinTeachers) <= $(vCount_Teacher_Topic_Previous), $(vPercMP_Teacher_Topic_Previous), Null()), IF([Respondent Group] = 'Principal', IF($(vMinPrincipals) <= $(vCount_Principal_Topic_Previous), $(vPercMP_Principal_Topic_Previous), Null()), 5)))),'#.#%');
    
  //// each Topic each respondent  
    /// Current Year   
      // Climate 
        let vSet_Student_Climate = {<[Respondent Group]={"Student"}, [Construct]={"School Climate"}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vSet_Essential_Current = {<[Respondent Group]={"Student"}, [Construct]={"School Climate"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Student_Climate_Current = Count(distinct $(vSet_Student_Climate_Current) RespondentID);
        let vPercMP_Student_Climate_Current = RangeAvg(Sum($(vSet_Student_Climate_Current) NHighest_1)/Sum($(vSet_Student_Climate_Current) NCompleted_1), Sum($(vSet_Student_Climate_Current) NHighest_2)/Sum($(vSet_Student_Climate_Current) NCompleted_2), Sum($(vSet_Student_Climate_Current) NHighest_3)/Sum($(vSet_Student_Climate_Current) NCompleted_3), Sum($(vSet_Student_Climate_Current) NHighest_4)/Sum($(vSet_Student_Climate_Current) NCompleted_4), Sum($(vSet_Student_Climate_Current) NHighest_5)/Sum($(vSet_Student_Climate_Current) NCompleted_5), Sum($(vSet_Student_Climate_Current) NHighest_6)/Sum($(vSet_Student_Climate_Current) NCompleted_6), Sum($(vSet_Student_Climate_Current) NHighest_7)/Sum($(vSet_Student_Climate_Current) NCompleted_7));
        let vmmPercMP_Student_Climate_Current = Num(IF($(vMinStudents) <= $(vCount_Student_Climate_Current), $(vPercMP_Student_Climate_Current), Null()),'#.#%');
        let vAvgScore_Student_Climate_Current = RangeAvg(Sum($(vSet_Student_Climate_Current) SumScaledScore_1)/Sum($(vSet_Student_Climate_Current) NCompleted_1), Sum($(vSet_Student_Climate_Current) SumScaledScore_2)/Sum($(vSet_Student_Climate_Current) NCompleted_2), Sum($(vSet_Student_Climate_Current) SumScaledScore_3)/Sum($(vSet_Student_Climate_Current) NCompleted_3), Sum($(vSet_Student_Climate_Current) SumScaledScore_4)/Sum($(vSet_Student_Climate_Current) NCompleted_4), Sum($(vSet_Student_Climate_Current) SumScaledScore_5)/Sum($(vSet_Student_Climate_Current) NCompleted_5), Sum($(vSet_Student_Climate_Current) SumScaledScore_6)/Sum($(vSet_Student_Climate_Current) NCompleted_6), Sum($(vSet_Student_Climate_Current) SumScaledScore_7)/Sum($(vSet_Student_Climate_Current) NCompleted_7));
        let vmmAvgScore_Student_Climate_Current = Num(IF($(vMinStudents) <= $(vCount_Student_Climate_Current), $(vAvgScore_Student_Climate_Current), Null()),'##0.##');
        
        let vSet_Parent_Climate = {<[Respondent Group]={"Parent"}, [Construct]={"School Climate"}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vSet_Parent_Climate_Current = {<[Respondent Group]={"Parent"}, [Construct]={"School Climate"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Parent_Climate_Current = Count(distinct $(vSet_Parent_Climate_Current) RespondentID);
        let vPercMP_Parent_Climate_Current = RangeAvg(Sum($(vSet_Parent_Climate_Current) NHighest_1)/Sum($(vSet_Parent_Climate_Current) NCompleted_1), Sum($(vSet_Parent_Climate_Current) NHighest_2)/Sum($(vSet_Parent_Climate_Current) NCompleted_2), Sum($(vSet_Parent_Climate_Current) NHighest_3)/Sum($(vSet_Parent_Climate_Current) NCompleted_3), Sum($(vSet_Parent_Climate_Current) NHighest_4)/Sum($(vSet_Parent_Climate_Current) NCompleted_4), Sum($(vSet_Parent_Climate_Current) NHighest_5)/Sum($(vSet_Parent_Climate_Current) NCompleted_5), Sum($(vSet_Parent_Climate_Current) NHighest_6)/Sum($(vSet_Parent_Climate_Current) NCompleted_6), Sum($(vSet_Parent_Climate_Current) NHighest_7)/Sum($(vSet_Parent_Climate_Current) NCompleted_7));
        let vmmPercMP_Parent_Climate_Current = Num(IF($(vMinParents) <= $(vCount_Parent_Climate_Current), $(vPercMP_Parent_Climate_Current), Null()),'#.#%');
        let vAvgScore_Parent_Climate_Current = RangeAvg(Sum($(vSet_Parent_Climate_Current) SumScaledScore_1)/Sum($(vSet_Parent_Climate_Current) NCompleted_1), Sum($(vSet_Parent_Climate_Current) SumScaledScore_2)/Sum($(vSet_Parent_Climate_Current) NCompleted_2), Sum($(vSet_Parent_Climate_Current) SumScaledScore_3)/Sum($(vSet_Parent_Climate_Current) NCompleted_3), Sum($(vSet_Parent_Climate_Current) SumScaledScore_4)/Sum($(vSet_Parent_Climate_Current) NCompleted_4), Sum($(vSet_Parent_Climate_Current) SumScaledScore_5)/Sum($(vSet_Parent_Climate_Current) NCompleted_5), Sum($(vSet_Parent_Climate_Current) SumScaledScore_6)/Sum($(vSet_Parent_Climate_Current) NCompleted_6), Sum($(vSet_Parent_Climate_Current) SumScaledScore_7)/Sum($(vSet_Parent_Climate_Current) NCompleted_7));
        let vmmAvgScore_Parent_Climate_Current = Num(IF($(vMinParents) <= $(vCount_Parent_Climate_Current), $(vAvgScore_Parent_Climate_Current), Null()),'##0.##');
      
        let vSet_Teacher_Climate_Current = {<[Respondent Group]={"Teacher"}, [Construct]={"School Climate"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Teacher_Climate_Current = Count(distinct $(vSet_Teacher_Climate_Current) RespondentID);
        let vPercMP_Teacher_Climate_Current = RangeAvg(Sum($(vSet_Teacher_Climate_Current) NHighest_1)/Sum($(vSet_Teacher_Climate_Current) NCompleted_1), Sum($(vSet_Teacher_Climate_Current) NHighest_2)/Sum($(vSet_Teacher_Climate_Current) NCompleted_2), Sum($(vSet_Teacher_Climate_Current) NHighest_3)/Sum($(vSet_Teacher_Climate_Current) NCompleted_3), Sum($(vSet_Teacher_Climate_Current) NHighest_4)/Sum($(vSet_Teacher_Climate_Current) NCompleted_4), Sum($(vSet_Teacher_Climate_Current) NHighest_5)/Sum($(vSet_Teacher_Climate_Current) NCompleted_5), Sum($(vSet_Teacher_Climate_Current) NHighest_6)/Sum($(vSet_Teacher_Climate_Current) NCompleted_6), Sum($(vSet_Teacher_Climate_Current) NHighest_7)/Sum($(vSet_Teacher_Climate_Current) NCompleted_7));
        let vmmPercMP_Teacher_Climate_Current = Num(IF($(vMinTeachers) <= $(vCount_Teacher_Climate_Current), $(vPercMP_Teacher_Climate_Current), Null()),'#.#%');
        let vAvgScore_Teacher_Climate_Current = RangeAvg(Sum($(vSet_Teacher_Climate_Current) SumScaledScore_1)/Sum($(vSet_Teacher_Climate_Current) NCompleted_1), Sum($(vSet_Teacher_Climate_Current) SumScaledScore_2)/Sum($(vSet_Teacher_Climate_Current) NCompleted_2), Sum($(vSet_Teacher_Climate_Current) SumScaledScore_3)/Sum($(vSet_Teacher_Climate_Current) NCompleted_3), Sum($(vSet_Teacher_Climate_Current) SumScaledScore_4)/Sum($(vSet_Teacher_Climate_Current) NCompleted_4), Sum($(vSet_Teacher_Climate_Current) SumScaledScore_5)/Sum($(vSet_Teacher_Climate_Current) NCompleted_5), Sum($(vSet_Teacher_Climate_Current) SumScaledScore_6)/Sum($(vSet_Teacher_Climate_Current) NCompleted_6), Sum($(vSet_Teacher_Climate_Current) SumScaledScore_7)/Sum($(vSet_Teacher_Climate_Current) NCompleted_7));
        let vmmAvgScore_Teacher_Climate_Current = Num(IF($(vMinTeachers) <= $(vCount_Teacher_Climate_Current), $(vAvgScore_Teacher_Climate_Current), Null()),'##0.##');
        
        let vSet_Principal_Climate_Current = {<[Respondent Group]={"Principal"}, [Construct]={"School Climate"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Principal_Climate_Current = Count(distinct $(vSet_Principal_Climate_Current) RespondentID);
        let vPercMP_Principal_Climate_Current = RangeAvg(Sum($(vSet_Principal_Climate_Current) NHighest_1)/Sum($(vSet_Principal_Climate_Current) NCompleted_1), Sum($(vSet_Principal_Climate_Current) NHighest_2)/Sum($(vSet_Principal_Climate_Current) NCompleted_2), Sum($(vSet_Principal_Climate_Current) NHighest_3)/Sum($(vSet_Principal_Climate_Current) NCompleted_3), Sum($(vSet_Principal_Climate_Current) NHighest_4)/Sum($(vSet_Principal_Climate_Current) NCompleted_4), Sum($(vSet_Principal_Climate_Current) NHighest_5)/Sum($(vSet_Principal_Climate_Current) NCompleted_5), Sum($(vSet_Principal_Climate_Current) NHighest_6)/Sum($(vSet_Principal_Climate_Current) NCompleted_6), Sum($(vSet_Principal_Climate_Current) NHighest_7)/Sum($(vSet_Principal_Climate_Current) NCompleted_7));
        let vmmPercMP_Principal_Climate_Current = Num(IF($(vMinPrincipals) <= $(vCount_Principal_Climate_Current), $(vPercMP_Principal_Climate_Current), Null()),'#.#%');
        let vAvgScore_Principal_Climate_Current = RangeAvg(Sum($(vSet_Principal_Climate_Current) SumScaledScore_1)/Sum($(vSet_Principal_Climate_Current) NCompleted_1), Sum($(vSet_Principal_Climate_Current) SumScaledScore_2)/Sum($(vSet_Principal_Climate_Current) NCompleted_2), Sum($(vSet_Principal_Climate_Current) SumScaledScore_3)/Sum($(vSet_Principal_Climate_Current) NCompleted_3), Sum($(vSet_Principal_Climate_Current) SumScaledScore_4)/Sum($(vSet_Principal_Climate_Current) NCompleted_4), Sum($(vSet_Principal_Climate_Current) SumScaledScore_5)/Sum($(vSet_Principal_Climate_Current) NCompleted_5), Sum($(vSet_Principal_Climate_Current) SumScaledScore_6)/Sum($(vSet_Principal_Climate_Current) NCompleted_6), Sum($(vSet_Principal_Climate_Current) SumScaledScore_7)/Sum($(vSet_Principal_Climate_Current) NCompleted_7));
        let vmmAvgScore_Principal_Climate_Current = Num(IF($(vMinPrincipals) <= $(vCount_Principal_Climate_Current), $(vAvgScore_Principal_Climate_Current), Null()),'##0.##');
      

        // subconstructs for PSSA scatter
        // Student: Belonging, Bullying, Safety/Building Condition
        let vSet_Student_Climate_Belonging_Current = {<[Respondent Group]={"Student"}, [Construct]={"School Climate"}, [SubConstruct]={"Belonging"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Student_Climate_Belonging_Current = Count(distinct $(vSet_Student_Climate_Belonging_Current) RespondentID);
        let vAvgScore_Student_Climate_Belonging_Current = Sum($(vSet_Student_Climate_Belonging_Current) SubConstruct_SumScaledScore)/Sum($(vSet_Student_Climate_Belonging_Current) SubConstruct_NCompleted);
        let vmmAvgScore_Student_Climate_Belonging_Current = Num(IF($(vMinStudents) <= $(vCount_Student_Climate_Belonging_Current), $(vAvgScore_Student_Climate_Belonging_Current), Null()),'##0.##');
        
        let vSet_Student_Climate_Bullying_Current = {<[Respondent Group]={"Student"}, [Construct]={"School Climate"}, [SubConstruct]={"Bullying"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Student_Climate_Bullying_Current = Count(distinct $(vSet_Student_Climate_Bullying_Current) RespondentID);
        let vAvgScore_Student_Climate_Bullying_Current = Sum($(vSet_Student_Climate_Bullying_Current) SubConstruct_SumScaledScore)/Sum($(vSet_Student_Climate_Bullying_Current) SubConstruct_NCompleted);
        let vmmAvgScore_Student_Climate_Bullying_Current = Num(IF($(vMinStudents) <= $(vCount_Student_Climate_Bullying_Current), $(vAvgScore_Student_Climate_Bullying_Current), Null()),'##0.##');
        
        let vSet_Student_Climate_Safety_Current = {<[Respondent Group]={"Student"}, [Construct]={"School Climate"}, [SubConstruct]={"Safety/Building Condition"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Student_Climate_Safety_Current = Count(distinct $(vSet_Student_Climate_Safety_Current) RespondentID);
        let vAvgScore_Student_Climate_Safety_Current = Sum($(vSet_Student_Climate_Safety_Current) SubConstruct_SumScaledScore)/Sum($(vSet_Student_Climate_Safety_Current) SubConstruct_NCompleted);
        let vmmAvgScore_Student_Climate_Safety_Current = Num(IF($(vMinStudents) <= $(vCount_Student_Climate_Safety_Current), $(vAvgScore_Student_Climate_Safety_Current), Null()),'##0.##');
        
        // Parent: Bullying, Safety/Building Condition
        let vSet_Parent_Climate_Bullying_Current = {<[Respondent Group]={"Parent"}, [Construct]={"School Climate"}, [SubConstruct]={"Bullying"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Parent_Climate_Bullying_Current = Count(distinct $(vSet_Parent_Climate_Bullying_Current) RespondentID);
        let vAvgScore_Parent_Climate_Bullying_Current = Sum($(vSet_Parent_Climate_Bullying_Current) SubConstruct_SumScaledScore)/Sum($(vSet_Parent_Climate_Bullying_Current) SubConstruct_NCompleted);
        let vmmAvgScore_Parent_Climate_Bullying_Current = Num(IF($(vMinParents) <= $(vCount_Parent_Climate_Bullying_Current), $(vAvgScore_Parent_Climate_Bullying_Current), Null()),'##0.##');
        
        let vSet_Parent_Climate_Safety_Current = {<[Respondent Group]={"Parent"}, [Construct]={"School Climate"}, [SubConstruct]={"Safety/Building Condition"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Parent_Climate_Safety_Current = Count(distinct $(vSet_Parent_Climate_Safety_Current) RespondentID);
        let vAvgScore_Parent_Climate_Safety_Current = Sum($(vSet_Parent_Climate_Safety_Current) SubConstruct_SumScaledScore)/Sum($(vSet_Parent_Climate_Safety_Current) SubConstruct_NCompleted);
        let vmmAvgScore_Parent_Climate_Safety_Current = Num(IF($(vMinParents) <= $(vCount_Parent_Climate_Safety_Current), $(vAvgScore_Parent_Climate_Safety_Current), Null()),'##0.##');
        
        // Teacher: Student-Centered Learning Climate, Respect, Classroom Level Challenges to Student Learning, School Level Challenges, External Challenges
        let vSet_Teacher_Climate_StudentCenteredLearningClimate_Current = {<[Respondent Group]={"Teacher"}, [Construct]={"School Climate"}, [SubConstruct]={"Student-Centered Learning Climate"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Teacher_Climate_StudentCenteredLearningClimate_Current = Count(distinct $(vSet_Teacher_Climate_StudentCenteredLearningClimate_Current) RespondentID);
        let vAvgScore_Teacher_Climate_StudentCenteredLearningClimate_Current = Sum($(vSet_Teacher_Climate_StudentCenteredLearningClimate_Current) SubConstruct_SumScaledScore)/Sum($(vSet_Teacher_Climate_StudentCenteredLearningClimate_Current) SubConstruct_NCompleted);
        let vmmAvgScore_Teacher_Climate_StudentCenteredLearningClimate_Current = Num(IF($(vMinTeachers) <= $(vCount_Teacher_Climate_StudentCenteredLearningClimate_Current), $(vAvgScore_Teacher_Climate_StudentCenteredLearningClimate_Current), Null()),'##0.##');
       
        let vSet_Teacher_Climate_Respect_Current = {<[Respondent Group]={"Teacher"}, [Construct]={"School Climate"}, [SubConstruct]={"Respect"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Teacher_Climate_Respect_Current = Count(distinct $(vSet_Teacher_Climate_Respect_Current) RespondentID);
        let vAvgScore_Teacher_Climate_Respect_Current = Sum($(vSet_Teacher_Climate_Respect_Current) SubConstruct_SumScaledScore)/Sum($(vSet_Teacher_Climate_Respect_Current) SubConstruct_NCompleted);
        let vmmAvgScore_Teacher_Climate_Respect_Current = Num(IF($(vMinTeachers) <= $(vCount_Teacher_Climate_Respect_Current), $(vAvgScore_Teacher_Climate_Respect_Current), Null()),'##0.##');
       
        let vSet_Teacher_Climate_ClassroomLevelChallenges_Current = {<[Respondent Group]={"Teacher"}, [Construct]={"School Climate"}, [SubConstruct]={"Classroom Level Challenges to Student Learning"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Teacher_Climate_ClassroomLevelChallenges_Current = Count(distinct $(vSet_Teacher_Climate_ClassroomLevelChallenges_Current) RespondentID);
        let vAvgScore_Teacher_Climate_ClassroomLevelChallenges_Current = Sum($(vSet_Teacher_Climate_ClassroomLevelChallenges_Current) SubConstruct_SumScaledScore)/Sum($(vSet_Teacher_Climate_ClassroomLevelChallenges_Current) SubConstruct_NCompleted);
        let vmmAvgScore_Teacher_Climate_ClassroomLevelChallenges_Current = Num(IF($(vMinTeachers) <= $(vCount_Teacher_Climate_ClassroomLevelChallenges_Current), $(vAvgScore_Teacher_Climate_ClassroomLevelChallenges_Current), Null()),'##0.##');
       
        let vSet_Teacher_Climate_SchoolLevelChallenges_Current = {<[Respondent Group]={"Teacher"}, [Construct]={"School Climate"}, [SubConstruct]={"School Level Challenges to Student Learning"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Teacher_Climate_SchoolLevelChallenges_Current = Count(distinct $(vSet_Teacher_Climate_SchoolLevelChallenges_Current) RespondentID);
        let vAvgScore_Teacher_Climate_SchoolLevelChallenges_Current = Sum($(vSet_Teacher_Climate_SchoolLevelChallenges_Current) SubConstruct_SumScaledScore)/Sum($(vSet_Teacher_Climate_SchoolLevelChallenges_Current) SubConstruct_NCompleted);
        let vmmAvgScore_Teacher_Climate_SchoolLevelChallenges_Current = Num(IF($(vMinTeachers) <= $(vCount_Teacher_Climate_SchoolLevelChallenges_Current), $(vAvgScore_Teacher_Climate_SchoolLevelChallenges_Current), Null()),'##0.##');

        let vSet_Teacher_Climate_ExternalChallenges_Current = {<[Respondent Group]={"Teacher"}, [Construct]={"School Climate"}, [SubConstruct]={"External Challenges to Student Learning"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Teacher_Climate_ExternalChallenges_Current = Count(distinct $(vSet_Teacher_Climate_ExternalChallenges_Current) RespondentID);
        let vAvgScore_Teacher_Climate_ExternalChallenges_Current = Sum($(vSet_Teacher_Climate_ExternalChallenges_Current) SubConstruct_SumScaledScore)/Sum($(vSet_Teacher_Climate_ExternalChallenges_Current) SubConstruct_NCompleted);
        let vmmAvgScore_Teacher_Climate_ExternalChallenges_Current = Num(IF($(vMinTeachers) <= $(vCount_Teacher_Climate_ExternalChallenges_Current), $(vAvgScore_Teacher_Climate_ExternalChallenges_Current), Null()),'##0.##');
       
      // Instruction 
        let vSet_Student_Instruction_Current = {<[Respondent Group]={"Student"}, [Construct]={"Instruction"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Student_Instruction_Current = Count(distinct $(vSet_Student_Instruction_Current) RespondentID);
        let vPercMP_Student_Instruction_Current = RangeAvg(Sum($(vSet_Student_Instruction_Current) NHighest_1)/Sum($(vSet_Student_Instruction_Current) NCompleted_1), Sum($(vSet_Student_Instruction_Current) NHighest_2)/Sum($(vSet_Student_Instruction_Current) NCompleted_2), Sum($(vSet_Student_Instruction_Current) NHighest_3)/Sum($(vSet_Student_Instruction_Current) NCompleted_3), Sum($(vSet_Student_Instruction_Current) NHighest_4)/Sum($(vSet_Student_Instruction_Current) NCompleted_4), Sum($(vSet_Student_Instruction_Current) NHighest_5)/Sum($(vSet_Student_Instruction_Current) NCompleted_5), Sum($(vSet_Student_Instruction_Current) NHighest_6)/Sum($(vSet_Student_Instruction_Current) NCompleted_6), Sum($(vSet_Student_Instruction_Current) NHighest_7)/Sum($(vSet_Student_Instruction_Current) NCompleted_7));
        let vmmPercMP_Student_Instruction_Current = Num(IF($(vMinStudents) <= $(vCount_Student_Instruction_Current), $(vPercMP_Student_Instruction_Current), Null()),'#.#%');
        let vAvgScore_Student_Instruction_Current = RangeAvg(Sum($(vSet_Student_Instruction_Current) SumScaledScore_1)/Sum($(vSet_Student_Instruction_Current) NCompleted_1), Sum($(vSet_Student_Instruction_Current) SumScaledScore_2)/Sum($(vSet_Student_Instruction_Current) NCompleted_2), Sum($(vSet_Student_Instruction_Current) SumScaledScore_3)/Sum($(vSet_Student_Instruction_Current) NCompleted_3), Sum($(vSet_Student_Instruction_Current) SumScaledScore_4)/Sum($(vSet_Student_Instruction_Current) NCompleted_4), Sum($(vSet_Student_Instruction_Current) SumScaledScore_5)/Sum($(vSet_Student_Instruction_Current) NCompleted_5), Sum($(vSet_Student_Instruction_Current) SumScaledScore_6)/Sum($(vSet_Student_Instruction_Current) NCompleted_6), Sum($(vSet_Student_Instruction_Current) SumScaledScore_7)/Sum($(vSet_Student_Instruction_Current) NCompleted_7));
        let vmmAvgScore_Student_Instruction_Current = Num(IF($(vMinStudents) <= $(vCount_Student_Instruction_Current), $(vAvgScore_Student_Instruction_Current), Null()),'##0.##');
        
        let vSet_Parent_Instruction_Current = {<[Respondent Group]={"Parent"}, [Construct]={"Instruction"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Parent_Instruction_Current = Count(distinct $(vSet_Parent_Instruction_Current) RespondentID);
        let vPercMP_Parent_Instruction_Current = RangeAvg(Sum($(vSet_Parent_Instruction_Current) NHighest_1)/Sum($(vSet_Parent_Instruction_Current) NCompleted_1), Sum($(vSet_Parent_Instruction_Current) NHighest_2)/Sum($(vSet_Parent_Instruction_Current) NCompleted_2), Sum($(vSet_Parent_Instruction_Current) NHighest_3)/Sum($(vSet_Parent_Instruction_Current) NCompleted_3), Sum($(vSet_Parent_Instruction_Current) NHighest_4)/Sum($(vSet_Parent_Instruction_Current) NCompleted_4), Sum($(vSet_Parent_Instruction_Current) NHighest_5)/Sum($(vSet_Parent_Instruction_Current) NCompleted_5), Sum($(vSet_Parent_Instruction_Current) NHighest_6)/Sum($(vSet_Parent_Instruction_Current) NCompleted_6), Sum($(vSet_Parent_Instruction_Current) NHighest_7)/Sum($(vSet_Parent_Instruction_Current) NCompleted_7));
        let vmmPercMP_Parent_Instruction_Current = Num(IF($(vMinParents) <= $(vCount_Parent_Instruction_Current), $(vPercMP_Parent_Instruction_Current), Null()),'#.#%');
        let vAvgScore_Parent_Instruction_Current = RangeAvg(Sum($(vSet_Parent_Instruction_Current) SumScaledScore_1)/Sum($(vSet_Parent_Instruction_Current) NCompleted_1), Sum($(vSet_Parent_Instruction_Current) SumScaledScore_2)/Sum($(vSet_Parent_Instruction_Current) NCompleted_2), Sum($(vSet_Parent_Instruction_Current) SumScaledScore_3)/Sum($(vSet_Parent_Instruction_Current) NCompleted_3), Sum($(vSet_Parent_Instruction_Current) SumScaledScore_4)/Sum($(vSet_Parent_Instruction_Current) NCompleted_4), Sum($(vSet_Parent_Instruction_Current) SumScaledScore_5)/Sum($(vSet_Parent_Instruction_Current) NCompleted_5), Sum($(vSet_Parent_Instruction_Current) SumScaledScore_6)/Sum($(vSet_Parent_Instruction_Current) NCompleted_6), Sum($(vSet_Parent_Instruction_Current) SumScaledScore_7)/Sum($(vSet_Parent_Instruction_Current) NCompleted_7));
        let vmmAvgScore_Parent_Instruction_Current = Num(IF($(vMinParents) <= $(vCount_Parent_Instruction_Current), $(vAvgScore_Parent_Instruction_Current), Null()),'##0.##');
        
        let vSet_Teacher_Instruction_Current = {<[Respondent Group]={"Teacher"}, [Construct]={"Instruction"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Teacher_Instruction_Current = Count(distinct $(vSet_Teacher_Instruction_Current) RespondentID);
        let vPercMP_Teacher_Instruction_Current = RangeAvg(Sum($(vSet_Teacher_Instruction_Current) NHighest_1)/Sum($(vSet_Teacher_Instruction_Current) NCompleted_1), Sum($(vSet_Teacher_Instruction_Current) NHighest_2)/Sum($(vSet_Teacher_Instruction_Current) NCompleted_2), Sum($(vSet_Teacher_Instruction_Current) NHighest_3)/Sum($(vSet_Teacher_Instruction_Current) NCompleted_3), Sum($(vSet_Teacher_Instruction_Current) NHighest_4)/Sum($(vSet_Teacher_Instruction_Current) NCompleted_4), Sum($(vSet_Teacher_Instruction_Current) NHighest_5)/Sum($(vSet_Teacher_Instruction_Current) NCompleted_5), Sum($(vSet_Teacher_Instruction_Current) NHighest_6)/Sum($(vSet_Teacher_Instruction_Current) NCompleted_6), Sum($(vSet_Teacher_Instruction_Current) NHighest_7)/Sum($(vSet_Teacher_Instruction_Current) NCompleted_7));
        let vmmPercMP_Teacher_Instruction_Current = Num(IF($(vMinTeachers) <= $(vCount_Teacher_Instruction_Current), $(vPercMP_Teacher_Instruction_Current), Null()),'#.#%');
        let vAvgScore_Teacher_Instruction_Current = RangeAvg(Sum($(vSet_Teacher_Instruction_Current) SumScaledScore_1)/Sum($(vSet_Teacher_Instruction_Current) NCompleted_1), Sum($(vSet_Teacher_Instruction_Current) SumScaledScore_2)/Sum($(vSet_Teacher_Instruction_Current) NCompleted_2), Sum($(vSet_Teacher_Instruction_Current) SumScaledScore_3)/Sum($(vSet_Teacher_Instruction_Current) NCompleted_3), Sum($(vSet_Teacher_Instruction_Current) SumScaledScore_4)/Sum($(vSet_Teacher_Instruction_Current) NCompleted_4), Sum($(vSet_Teacher_Instruction_Current) SumScaledScore_5)/Sum($(vSet_Teacher_Instruction_Current) NCompleted_5), Sum($(vSet_Teacher_Instruction_Current) SumScaledScore_6)/Sum($(vSet_Teacher_Instruction_Current) NCompleted_6), Sum($(vSet_Teacher_Instruction_Current) SumScaledScore_7)/Sum($(vSet_Teacher_Instruction_Current) NCompleted_7));
        let vmmAvgScore_Teacher_Instruction_Current = Num(IF($(vMinTeachers) <= $(vCount_Teacher_Instruction_Current), $(vAvgScore_Teacher_Instruction_Current), Null()),'##0.##');
        
        let vSet_Principal_Instruction_Current = {<[Respondent Group]={"Principal"}, [Construct]={"Instruction"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Principal_Instruction_Current = Count(distinct $(vSet_Principal_Instruction_Current) RespondentID);
        let vPercMP_Principal_Instruction_Current = RangeAvg(Sum($(vSet_Principal_Instruction_Current) NHighest_1)/Sum($(vSet_Principal_Instruction_Current) NCompleted_1), Sum($(vSet_Principal_Instruction_Current) NHighest_2)/Sum($(vSet_Principal_Instruction_Current) NCompleted_2), Sum($(vSet_Principal_Instruction_Current) NHighest_3)/Sum($(vSet_Principal_Instruction_Current) NCompleted_3), Sum($(vSet_Principal_Instruction_Current) NHighest_4)/Sum($(vSet_Principal_Instruction_Current) NCompleted_4), Sum($(vSet_Principal_Instruction_Current) NHighest_5)/Sum($(vSet_Principal_Instruction_Current) NCompleted_5), Sum($(vSet_Principal_Instruction_Current) NHighest_6)/Sum($(vSet_Principal_Instruction_Current) NCompleted_6), Sum($(vSet_Principal_Instruction_Current) NHighest_7)/Sum($(vSet_Principal_Instruction_Current) NCompleted_7));
        let vmmPercMP_Principal_Instruction_Current = Num(IF($(vMinPrincipals) <= $(vCount_Principal_Instruction_Current), $(vPercMP_Principal_Instruction_Current), Null()),'#.#%');
        let vAvgScore_Principal_Instruction_Current = RangeAvg(Sum($(vSet_Principal_Instruction_Current) SumScaledScore_1)/Sum($(vSet_Principal_Instruction_Current) NCompleted_1), Sum($(vSet_Principal_Instruction_Current) SumScaledScore_2)/Sum($(vSet_Principal_Instruction_Current) NCompleted_2), Sum($(vSet_Principal_Instruction_Current) SumScaledScore_3)/Sum($(vSet_Principal_Instruction_Current) NCompleted_3), Sum($(vSet_Principal_Instruction_Current) SumScaledScore_4)/Sum($(vSet_Principal_Instruction_Current) NCompleted_4), Sum($(vSet_Principal_Instruction_Current) SumScaledScore_5)/Sum($(vSet_Principal_Instruction_Current) NCompleted_5), Sum($(vSet_Principal_Instruction_Current) SumScaledScore_6)/Sum($(vSet_Principal_Instruction_Current) NCompleted_6), Sum($(vSet_Principal_Instruction_Current) SumScaledScore_7)/Sum($(vSet_Principal_Instruction_Current) NCompleted_7));
        let vmmAvgScore_Principal_Instruction_Current = Num(IF($(vMinPrincipals) <= $(vCount_Principal_Instruction_Current), $(vAvgScore_Principal_Instruction_Current), Null()),'##0.##');
           
      // Parent/Guardian Community Ties
        let vSet_Parent_CommunityTies_Current = {<[Respondent Group]={"Parent"}, [Construct]={"Parent/Guardian-Community Ties"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Parent_CommunityTies_Current = Count(distinct $(vSet_Parent_CommunityTies_Current) RespondentID);
        let vPercMP_Parent_CommunityTies_Current = RangeAvg(Sum($(vSet_Parent_CommunityTies_Current) NHighest_1)/Sum($(vSet_Parent_CommunityTies_Current) NCompleted_1), Sum($(vSet_Parent_CommunityTies_Current) NHighest_2)/Sum($(vSet_Parent_CommunityTies_Current) NCompleted_2), Sum($(vSet_Parent_CommunityTies_Current) NHighest_3)/Sum($(vSet_Parent_CommunityTies_Current) NCompleted_3), Sum($(vSet_Parent_CommunityTies_Current) NHighest_4)/Sum($(vSet_Parent_CommunityTies_Current) NCompleted_4), Sum($(vSet_Parent_CommunityTies_Current) NHighest_5)/Sum($(vSet_Parent_CommunityTies_Current) NCompleted_5), Sum($(vSet_Parent_CommunityTies_Current) NHighest_6)/Sum($(vSet_Parent_CommunityTies_Current) NCompleted_6), Sum($(vSet_Parent_CommunityTies_Current) NHighest_7)/Sum($(vSet_Parent_CommunityTies_Current) NCompleted_7));
        let vmmPercMP_Parent_CommunityTies_Current = Num(IF($(vMinParents) <= $(vCount_Parent_CommunityTies_Current), $(vPercMP_Parent_CommunityTies_Current), Null()),'#.#%');
        let vAvgScore_Parent_CommunityTies_Current = RangeAvg(Sum($(vSet_Parent_CommunityTies_Current) SumScaledScore_1)/Sum($(vSet_Parent_CommunityTies_Current) NCompleted_1), Sum($(vSet_Parent_CommunityTies_Current) SumScaledScore_2)/Sum($(vSet_Parent_CommunityTies_Current) NCompleted_2), Sum($(vSet_Parent_CommunityTies_Current) SumScaledScore_3)/Sum($(vSet_Parent_CommunityTies_Current) NCompleted_3), Sum($(vSet_Parent_CommunityTies_Current) SumScaledScore_4)/Sum($(vSet_Parent_CommunityTies_Current) NCompleted_4), Sum($(vSet_Parent_CommunityTies_Current) SumScaledScore_5)/Sum($(vSet_Parent_CommunityTies_Current) NCompleted_5), Sum($(vSet_Parent_CommunityTies_Current) SumScaledScore_6)/Sum($(vSet_Parent_CommunityTies_Current) NCompleted_6), Sum($(vSet_Parent_CommunityTies_Current) SumScaledScore_7)/Sum($(vSet_Parent_CommunityTies_Current) NCompleted_7));
        let vmmAvgScore_Parent_CommunityTies_Current = Num(IF($(vMinParents) <= $(vCount_Parent_CommunityTies_Current), $(vAvgScore_Parent_CommunityTies_Current), Null()),'##0.##');
        
        let vSet_Teacher_CommunityTies_Current = {<[Respondent Group]={"Teacher"}, [Construct]={"Parent/Guardian-Community Ties"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Teacher_CommunityTies_Current = Count(distinct $(vSet_Teacher_CommunityTies_Current) RespondentID);
        let vPercMP_Teacher_CommunityTies_Current = RangeAvg(Sum($(vSet_Teacher_CommunityTies_Current) NHighest_1)/Sum($(vSet_Teacher_CommunityTies_Current) NCompleted_1), Sum($(vSet_Teacher_CommunityTies_Current) NHighest_2)/Sum($(vSet_Teacher_CommunityTies_Current) NCompleted_2), Sum($(vSet_Teacher_CommunityTies_Current) NHighest_3)/Sum($(vSet_Teacher_CommunityTies_Current) NCompleted_3), Sum($(vSet_Teacher_CommunityTies_Current) NHighest_4)/Sum($(vSet_Teacher_CommunityTies_Current) NCompleted_4), Sum($(vSet_Teacher_CommunityTies_Current) NHighest_5)/Sum($(vSet_Teacher_CommunityTies_Current) NCompleted_5), Sum($(vSet_Teacher_CommunityTies_Current) NHighest_6)/Sum($(vSet_Teacher_CommunityTies_Current) NCompleted_6), Sum($(vSet_Teacher_CommunityTies_Current) NHighest_7)/Sum($(vSet_Teacher_CommunityTies_Current) NCompleted_7));
        let vmmPercMP_Teacher_CommunityTies_Current = Num(IF($(vMinTeachers) <= $(vCount_Teacher_CommunityTies_Current), $(vPercMP_Teacher_CommunityTies_Current), Null()),'#.#%');
        let vAvgScore_Teacher_CommunityTies_Current = RangeAvg(Sum($(vSet_Teacher_CommunityTies_Current) SumScaledScore_1)/Sum($(vSet_Teacher_CommunityTies_Current) NCompleted_1), Sum($(vSet_Teacher_CommunityTies_Current) SumScaledScore_2)/Sum($(vSet_Teacher_CommunityTies_Current) NCompleted_2), Sum($(vSet_Teacher_CommunityTies_Current) SumScaledScore_3)/Sum($(vSet_Teacher_CommunityTies_Current) NCompleted_3), Sum($(vSet_Teacher_CommunityTies_Current) SumScaledScore_4)/Sum($(vSet_Teacher_CommunityTies_Current) NCompleted_4), Sum($(vSet_Teacher_CommunityTies_Current) SumScaledScore_5)/Sum($(vSet_Teacher_CommunityTies_Current) NCompleted_5), Sum($(vSet_Teacher_CommunityTies_Current) SumScaledScore_6)/Sum($(vSet_Teacher_CommunityTies_Current) NCompleted_6), Sum($(vSet_Teacher_CommunityTies_Current) SumScaledScore_7)/Sum($(vSet_Teacher_CommunityTies_Current) NCompleted_7));
        let vmmAvgScore_Teacher_CommunityTies_Current = Num(IF($(vMinTeachers) <= $(vCount_Teacher_CommunityTies_Current), $(vAvgScore_Teacher_CommunityTies_Current), Null()),'##0.##');
        
        let vSet_Principal_CommunityTies_Current = {<[Respondent Group]={"Principal"}, [Construct]={"Parent/Guardian-Community Ties"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Principal_CommunityTies_Current = Count(distinct $(vSet_Principal_CommunityTies_Current) RespondentID);
        let vPercMP_Principal_CommunityTies_Current = RangeAvg(Sum($(vSet_Principal_CommunityTies_Current) NHighest_1)/Sum($(vSet_Principal_CommunityTies_Current) NCompleted_1), Sum($(vSet_Principal_CommunityTies_Current) NHighest_2)/Sum($(vSet_Principal_CommunityTies_Current) NCompleted_2), Sum($(vSet_Principal_CommunityTies_Current) NHighest_3)/Sum($(vSet_Principal_CommunityTies_Current) NCompleted_3), Sum($(vSet_Principal_CommunityTies_Current) NHighest_4)/Sum($(vSet_Principal_CommunityTies_Current) NCompleted_4), Sum($(vSet_Principal_CommunityTies_Current) NHighest_5)/Sum($(vSet_Principal_CommunityTies_Current) NCompleted_5), Sum($(vSet_Principal_CommunityTies_Current) NHighest_6)/Sum($(vSet_Principal_CommunityTies_Current) NCompleted_6), Sum($(vSet_Principal_CommunityTies_Current) NHighest_7)/Sum($(vSet_Principal_CommunityTies_Current) NCompleted_7));
        let vmmPercMP_Principal_CommunityTies_Current = Num(IF($(vMinPrincipals) <= $(vCount_Principal_CommunityTies_Current), $(vPercMP_Principal_CommunityTies_Current), Null()),'#.#%');
        let vAvgScore_Principal_CommunityTies_Current = RangeAvg(Sum($(vSet_Principal_CommunityTies_Current) SumScaledScore_1)/Sum($(vSet_Principal_CommunityTies_Current) NCompleted_1), Sum($(vSet_Principal_CommunityTies_Current) SumScaledScore_2)/Sum($(vSet_Principal_CommunityTies_Current) NCompleted_2), Sum($(vSet_Principal_CommunityTies_Current) SumScaledScore_3)/Sum($(vSet_Principal_CommunityTies_Current) NCompleted_3), Sum($(vSet_Principal_CommunityTies_Current) SumScaledScore_4)/Sum($(vSet_Principal_CommunityTies_Current) NCompleted_4), Sum($(vSet_Principal_CommunityTies_Current) SumScaledScore_5)/Sum($(vSet_Principal_CommunityTies_Current) NCompleted_5), Sum($(vSet_Principal_CommunityTies_Current) SumScaledScore_6)/Sum($(vSet_Principal_CommunityTies_Current) NCompleted_6), Sum($(vSet_Principal_CommunityTies_Current) SumScaledScore_7)/Sum($(vSet_Principal_CommunityTies_Current) NCompleted_7));
        let vmmAvgScore_Principal_CommunityTies_Current = Num(IF($(vMinPrincipals) <= $(vCount_Principal_CommunityTies_Current), $(vAvgScore_Principal_CommunityTies_Current), Null()),'##0.##');
      
        // subconstructs for PSSA scatter
        // parent: Communication Quality, School Relationship, Communication Frequency, Parent/Guardian Involvement, Parent/Guardian-School Networks 
        let vSet_Parent_CommunityTies_CommunicationQuality_Current = {<[Respondent Group]={"Parent"}, [Construct]={"Parent/Guardian-Community Ties"}, [SubConstruct]={"Communication Quality"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Parent_CommunityTies_CommunicationQuality_Current = Count(distinct $(vSet_Parent_CommunityTies_CommunicationQuality_Current) RespondentID);
        let vAvgScore_Parent_CommunityTies_CommunicationQuality_Current = Sum($(vSet_Parent_CommunityTies_CommunicationQuality_Current) SubConstruct_SumScaledScore)/Sum($(vSet_Parent_CommunityTies_CommunicationQuality_Current) SubConstruct_NCompleted);
        let vmmAvgScore_Parent_CommunityTies_CommunicationQuality_Current = Num(IF($(vMinParents) <= $(vCount_Parent_CommunityTies_CommunicationQuality_Current), $(vAvgScore_Parent_CommunityTies_CommunicationQuality_Current), Null()),'##0.##');
        
        let vSet_Parent_CommunityTies_SchoolRelationship_Current = {<[Respondent Group]={"Parent"}, [Construct]={"Parent/Guardian-Community Ties"}, [SubConstruct]={"School Relationship"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Parent_CommunityTies_SchoolRelationship_Current = Count(distinct $(vSet_Parent_CommunityTies_SchoolRelationship_Current) RespondentID);
        let vAvgScore_Parent_CommunityTies_SchoolRelationship_Current = Sum($(vSet_Parent_CommunityTies_SchoolRelationship_Current) SubConstruct_SumScaledScore)/Sum($(vSet_Parent_CommunityTies_SchoolRelationship_Current) SubConstruct_NCompleted);
        let vmmAvgScore_Parent_CommunityTies_SchoolRelationship_Current = Num(IF($(vMinParents) <= $(vCount_Parent_CommunityTies_SchoolRelationship_Current), $(vAvgScore_Parent_CommunityTies_SchoolRelationship_Current), Null()),'##0.##');
        
        let vSet_Parent_CommunityTies_CommunicationFrequency_Current = {<[Respondent Group]={"Parent"}, [Construct]={"Parent/Guardian-Community Ties"}, [SubConstruct]={"Communication Frequency"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Parent_CommunityTies_CommunicationFrequency_Current = Count(distinct $(vSet_Parent_CommunityTies_CommunicationFrequency_Current) RespondentID);
        let vAvgScore_Parent_CommunityTies_CommunicationFrequency_Current = Sum($(vSet_Parent_CommunityTies_CommunicationFrequency_Current) SubConstruct_SumScaledScore)/Sum($(vSet_Parent_CommunityTies_CommunicationFrequency_Current) SubConstruct_NCompleted);
        let vmmAvgScore_Parent_CommunityTies_CommunicationFrequency_Current = Num(IF($(vMinParents) <= $(vCount_Parent_CommunityTies_CommunicationFrequency_Current), $(vAvgScore_Parent_CommunityTies_CommunicationFrequency_Current), Null()),'##0.##');
       
        let vSet_Parent_CommunityTies_Involvement_Current = {<[Respondent Group]={"Parent"}, [Construct]={"Parent/Guardian-Community Ties"}, [SubConstruct]={"Parent/Guardian Involvement"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Parent_CommunityTies_Involvement_Current = Count(distinct $(vSet_Parent_CommunityTies_Involvement_Current) RespondentID);
        let vAvgScore_Parent_CommunityTies_Involvement_Current = Sum($(vSet_Parent_CommunityTies_Involvement_Current) SubConstruct_SumScaledScore)/Sum($(vSet_Parent_CommunityTies_Involvement_Current) SubConstruct_NCompleted);
        let vmmAvgScore_Parent_CommunityTies_Involvement_Current = Num(IF($(vMinParents) <= $(vCount_Parent_CommunityTies_Involvement_Current), $(vAvgScore_Parent_CommunityTies_Involvement_Current), Null()),'##0.##');
        
        let vSet_Parent_CommunityTies_Networks_Current = {<[Respondent Group]={"Parent"}, [Construct]={"Parent/Guardian-Community Ties"}, [SubConstruct]={"Parent/Guardian-School Networks"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Parent_CommunityTies_Networks_Current = Count(distinct $(vSet_Parent_CommunityTies_Networks_Current) RespondentID);
        let vAvgScore_Parent_CommunityTies_Networks_Current = Sum($(vSet_Parent_CommunityTies_Networks_Current) SubConstruct_SumScaledScore)/Sum($(vSet_Parent_CommunityTies_Networks_Current) SubConstruct_NCompleted);
        let vmmAvgScore_Parent_CommunityTies_Networks_Current = Num(IF($(vMinParents) <= $(vCount_Parent_CommunityTies_Networks_Current), $(vAvgScore_Parent_CommunityTies_Networks_Current), Null()),'##0.##');
       
      // Professional Capacity
        let vSet_Teacher_ProfessionalCapacity_Current = {<[Respondent Group]={"Teacher"}, [Construct]={"Professional Capacity"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Teacher_ProfessionalCapacity_Current = Count(distinct $(vSet_Teacher_ProfessionalCapacity_Current) RespondentID);
        let vPercMP_Teacher_ProfessionalCapacity_Current = RangeAvg(Sum($(vSet_Teacher_ProfessionalCapacity_Current) NHighest_1)/Sum($(vSet_Teacher_ProfessionalCapacity_Current) NCompleted_1), Sum($(vSet_Teacher_ProfessionalCapacity_Current) NHighest_2)/Sum($(vSet_Teacher_ProfessionalCapacity_Current) NCompleted_2), Sum($(vSet_Teacher_ProfessionalCapacity_Current) NHighest_3)/Sum($(vSet_Teacher_ProfessionalCapacity_Current) NCompleted_3), Sum($(vSet_Teacher_ProfessionalCapacity_Current) NHighest_4)/Sum($(vSet_Teacher_ProfessionalCapacity_Current) NCompleted_4), Sum($(vSet_Teacher_ProfessionalCapacity_Current) NHighest_5)/Sum($(vSet_Teacher_ProfessionalCapacity_Current) NCompleted_5), Sum($(vSet_Teacher_ProfessionalCapacity_Current) NHighest_6)/Sum($(vSet_Teacher_ProfessionalCapacity_Current) NCompleted_6), Sum($(vSet_Teacher_ProfessionalCapacity_Current) NHighest_7)/Sum($(vSet_Teacher_ProfessionalCapacity_Current) NCompleted_7));
        let vmmPercMP_Teacher_ProfessionalCapacity_Current = Num(IF($(vMinTeachers) <= $(vCount_Teacher_ProfessionalCapacity_Current), $(vPercMP_Teacher_ProfessionalCapacity_Current), Null()),'#.#%');
        let vAvgScore_Teacher_ProfessionalCapacity_Current = RangeAvg(Sum($(vSet_Teacher_ProfessionalCapacity_Current) SumScaledScore_1)/Sum($(vSet_Teacher_ProfessionalCapacity_Current) NCompleted_1), Sum($(vSet_Teacher_ProfessionalCapacity_Current) SumScaledScore_2)/Sum($(vSet_Teacher_ProfessionalCapacity_Current) NCompleted_2), Sum($(vSet_Teacher_ProfessionalCapacity_Current) SumScaledScore_3)/Sum($(vSet_Teacher_ProfessionalCapacity_Current) NCompleted_3), Sum($(vSet_Teacher_ProfessionalCapacity_Current) SumScaledScore_4)/Sum($(vSet_Teacher_ProfessionalCapacity_Current) NCompleted_4), Sum($(vSet_Teacher_ProfessionalCapacity_Current) SumScaledScore_5)/Sum($(vSet_Teacher_ProfessionalCapacity_Current) NCompleted_5), Sum($(vSet_Teacher_ProfessionalCapacity_Current) SumScaledScore_6)/Sum($(vSet_Teacher_ProfessionalCapacity_Current) NCompleted_6), Sum($(vSet_Teacher_ProfessionalCapacity_Current) SumScaledScore_7)/Sum($(vSet_Teacher_ProfessionalCapacity_Current) NCompleted_7));
        let vmmAvgScore_Teacher_ProfessionalCapacity_Current = Num(IF($(vMinTeachers) <= $(vCount_Teacher_ProfessionalCapacity_Current), $(vAvgScore_Teacher_ProfessionalCapacity_Current), Null()),'##0.##');
        
        let vSet_Principal_ProfessionalCapacity_Current = {<[Respondent Group]={"Principal"}, [Construct]={"Professional Capacity"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Principal_ProfessionalCapacity_Current = Count(distinct $(vSet_Principal_ProfessionalCapacity_Current) RespondentID);
        let vPercMP_Principal_ProfessionalCapacity_Current = RangeAvg(Sum($(vSet_Principal_ProfessionalCapacity_Current) NHighest_1)/Sum($(vSet_Principal_ProfessionalCapacity_Current) NCompleted_1), Sum($(vSet_Principal_ProfessionalCapacity_Current) NHighest_2)/Sum($(vSet_Principal_ProfessionalCapacity_Current) NCompleted_2), Sum($(vSet_Principal_ProfessionalCapacity_Current) NHighest_3)/Sum($(vSet_Principal_ProfessionalCapacity_Current) NCompleted_3), Sum($(vSet_Principal_ProfessionalCapacity_Current) NHighest_4)/Sum($(vSet_Principal_ProfessionalCapacity_Current) NCompleted_4), Sum($(vSet_Principal_ProfessionalCapacity_Current) NHighest_5)/Sum($(vSet_Principal_ProfessionalCapacity_Current) NCompleted_5), Sum($(vSet_Principal_ProfessionalCapacity_Current) NHighest_6)/Sum($(vSet_Principal_ProfessionalCapacity_Current) NCompleted_6), Sum($(vSet_Principal_ProfessionalCapacity_Current) NHighest_7)/Sum($(vSet_Principal_ProfessionalCapacity_Current) NCompleted_7));
        let vmmPercMP_Principal_ProfessionalCapacity_Current = Num(IF($(vMinPrincipals) <= $(vCount_Principal_ProfessionalCapacity_Current), $(vPercMP_Principal_ProfessionalCapacity_Current), Null()),'#.#%');
        let vAvgScore_Principal_ProfessionalCapacity_Current = RangeAvg(Sum($(vSet_Principal_ProfessionalCapacity_Current) SumScaledScore_1)/Sum($(vSet_Principal_ProfessionalCapacity_Current) NCompleted_1), Sum($(vSet_Principal_ProfessionalCapacity_Current) SumScaledScore_2)/Sum($(vSet_Principal_ProfessionalCapacity_Current) NCompleted_2), Sum($(vSet_Principal_ProfessionalCapacity_Current) SumScaledScore_3)/Sum($(vSet_Principal_ProfessionalCapacity_Current) NCompleted_3), Sum($(vSet_Principal_ProfessionalCapacity_Current) SumScaledScore_4)/Sum($(vSet_Principal_ProfessionalCapacity_Current) NCompleted_4), Sum($(vSet_Principal_ProfessionalCapacity_Current) SumScaledScore_5)/Sum($(vSet_Principal_ProfessionalCapacity_Current) NCompleted_5), Sum($(vSet_Principal_ProfessionalCapacity_Current) SumScaledScore_6)/Sum($(vSet_Principal_ProfessionalCapacity_Current) NCompleted_6), Sum($(vSet_Principal_ProfessionalCapacity_Current) SumScaledScore_7)/Sum($(vSet_Principal_ProfessionalCapacity_Current) NCompleted_7));
        let vmmAvgScore_Principal_ProfessionalCapacity_Current = Num(IF($(vMinPrincipals) <= $(vCount_Principal_ProfessionalCapacity_Current), $(vAvgScore_Principal_ProfessionalCapacity_Current), Null()),'##0.##');
    
        // subconstructs for PSSA scatter
        // Teacher: Innovation, Quality of Professional Development: Delivery, Quality of Professional Development: Consistency
        let vSet_Teacher_ProfessionalCapacity_Innovation_Current = {<[Respondent Group]={"Teacher"}, [Construct]={"Professional Capacity"}, [SubConstruct]={"Innovation"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Teacher_ProfessionalCapacity_Innovation_Current = Count(distinct $(vSet_Teacher_ProfessionalCapacity_Innovation_Current) RespondentID);
        let vAvgScore_Teacher_ProfessionalCapacity_Innovation_Current = Sum($(vSet_Teacher_ProfessionalCapacity_Innovation_Current) SubConstruct_SumScaledScore)/Sum($(vSet_Teacher_ProfessionalCapacity_Innovation_Current) SubConstruct_NCompleted);
        let vmmAvgScore_Teacher_ProfessionalCapacity_Innovation_Current = Num(IF($(vMinTeachers) <= $(vCount_Teacher_ProfessionalCapacity_Innovation_Current), $(vAvgScore_Teacher_ProfessionalCapacity_Innovation_Current), Null()),'##0.##');
        
        let vSet_Teacher_ProfessionalCapacity_QualityofPDDelivery_Current = {<[Respondent Group]={"Teacher"}, [Construct]={"Professional Capacity"}, [SubConstruct]={"Quality of Professional Development: Delivery"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Teacher_ProfessionalCapacity_QualityofPDDelivery_Current = Count(distinct $(vSet_Teacher_ProfessionalCapacity_QualityofPDDelivery_Current) RespondentID);
        let vAvgScore_Teacher_ProfessionalCapacity_QualityofPDDelivery_Current = Sum($(vSet_Teacher_ProfessionalCapacity_QualityofPDDelivery_Current) SubConstruct_SumScaledScore)/Sum($(vSet_Teacher_ProfessionalCapacity_QualityofPDDelivery_Current) SubConstruct_NCompleted);
        let vmmAvgScore_Teacher_ProfessionalCapacity_QualityofPDDelivery_Current = Num(IF($(vMinTeachers) <= $(vCount_Teacher_ProfessionalCapacity_QualityofPDDelivery_Current), $(vAvgScore_Teacher_ProfessionalCapacity_QualityofPDDelivery_Current), Null()),'##0.##');
        
        let vSet_Teacher_ProfessionalCapacity_QualityofPDConsistency_Current = {<[Respondent Group]={"Teacher"}, [Construct]={"Professional Capacity"}, [SubConstruct]={"Quality of Professional Development: Consistency"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Teacher_ProfessionalCapacity_QualityofPDConsistency_Current = Count(distinct $(vSet_Teacher_ProfessionalCapacity_QualityofPDConsistency_Current) RespondentID);
        let vAvgScore_Teacher_ProfessionalCapacity_QualityofPDConsistency_Current = Sum($(vSet_Teacher_ProfessionalCapacity_QualityofPDConsistency_Current) SubConstruct_SumScaledScore)/Sum($(vSet_Teacher_ProfessionalCapacity_QualityofPDConsistency_Current) SubConstruct_NCompleted);
        let vmmAvgScore_Teacher_ProfessionalCapacity_QualityofPDConsistency_Current = Num(IF($(vMinTeachers) <= $(vCount_Teacher_ProfessionalCapacity_QualityofPDConsistency_Current), $(vAvgScore_Teacher_ProfessionalCapacity_QualityofPDConsistency_Current), Null()),'##0.##');

      // School Leadership
        let vSet_Parent_SchoolLeadership_Current = {<[Respondent Group]={"Parent"}, [Construct]={"School Leadership"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Parent_SchoolLeadership_Current = Count(distinct $(vSet_Parent_SchoolLeadership_Current) RespondentID);
        let vPercMP_Parent_SchoolLeadership_Current = RangeAvg(Sum($(vSet_Parent_SchoolLeadership_Current) NHighest_1)/Sum($(vSet_Parent_SchoolLeadership_Current) NCompleted_1), Sum($(vSet_Parent_SchoolLeadership_Current) NHighest_2)/Sum($(vSet_Parent_SchoolLeadership_Current) NCompleted_2), Sum($(vSet_Parent_SchoolLeadership_Current) NHighest_3)/Sum($(vSet_Parent_SchoolLeadership_Current) NCompleted_3), Sum($(vSet_Parent_SchoolLeadership_Current) NHighest_4)/Sum($(vSet_Parent_SchoolLeadership_Current) NCompleted_4), Sum($(vSet_Parent_SchoolLeadership_Current) NHighest_5)/Sum($(vSet_Parent_SchoolLeadership_Current) NCompleted_5), Sum($(vSet_Parent_SchoolLeadership_Current) NHighest_6)/Sum($(vSet_Parent_SchoolLeadership_Current) NCompleted_6), Sum($(vSet_Parent_SchoolLeadership_Current) NHighest_7)/Sum($(vSet_Parent_SchoolLeadership_Current) NCompleted_7));
        let vmmPercMP_Parent_SchoolLeadership_Current = Num(IF($(vMinParents) <= $(vCount_Parent_SchoolLeadership_Current), $(vPercMP_Parent_SchoolLeadership_Current), Null()),'#.#%');
        let vAvgScore_Parent_SchoolLeadership_Current = RangeAvg(Sum($(vSet_Parent_SchoolLeadership_Current) SumScaledScore_1)/Sum($(vSet_Parent_SchoolLeadership_Current) NCompleted_1), Sum($(vSet_Parent_SchoolLeadership_Current) SumScaledScore_2)/Sum($(vSet_Parent_SchoolLeadership_Current) NCompleted_2), Sum($(vSet_Parent_SchoolLeadership_Current) SumScaledScore_3)/Sum($(vSet_Parent_SchoolLeadership_Current) NCompleted_3), Sum($(vSet_Parent_SchoolLeadership_Current) SumScaledScore_4)/Sum($(vSet_Parent_SchoolLeadership_Current) NCompleted_4), Sum($(vSet_Parent_SchoolLeadership_Current) SumScaledScore_5)/Sum($(vSet_Parent_SchoolLeadership_Current) NCompleted_5), Sum($(vSet_Parent_SchoolLeadership_Current) SumScaledScore_6)/Sum($(vSet_Parent_SchoolLeadership_Current) NCompleted_6), Sum($(vSet_Parent_SchoolLeadership_Current) SumScaledScore_7)/Sum($(vSet_Parent_SchoolLeadership_Current) NCompleted_7));
        let vmmAvgScore_Parent_SchoolLeadership_Current = Num(IF($(vMinParents) <= $(vCount_Parent_SchoolLeadership_Current), $(vAvgScore_Parent_SchoolLeadership_Current), Null()),'##0.##');
       
        let vSet_Teacher_SchoolLeadership_Current = {<[Respondent Group]={"Teacher"}, [Construct]={"School Leadership"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Teacher_SchoolLeadership_Current = Count(distinct $(vSet_Teacher_SchoolLeadership_Current) RespondentID);
        let vPercMP_Teacher_SchoolLeadership_Current = RangeAvg(Sum($(vSet_Teacher_SchoolLeadership_Current) NHighest_1)/Sum($(vSet_Teacher_SchoolLeadership_Current) NCompleted_1), Sum($(vSet_Teacher_SchoolLeadership_Current) NHighest_2)/Sum($(vSet_Teacher_SchoolLeadership_Current) NCompleted_2), Sum($(vSet_Teacher_SchoolLeadership_Current) NHighest_3)/Sum($(vSet_Teacher_SchoolLeadership_Current) NCompleted_3), Sum($(vSet_Teacher_SchoolLeadership_Current) NHighest_4)/Sum($(vSet_Teacher_SchoolLeadership_Current) NCompleted_4), Sum($(vSet_Teacher_SchoolLeadership_Current) NHighest_5)/Sum($(vSet_Teacher_SchoolLeadership_Current) NCompleted_5), Sum($(vSet_Teacher_SchoolLeadership_Current) NHighest_6)/Sum($(vSet_Teacher_SchoolLeadership_Current) NCompleted_6), Sum($(vSet_Teacher_SchoolLeadership_Current) NHighest_7)/Sum($(vSet_Teacher_SchoolLeadership_Current) NCompleted_7));
        let vmmPercMP_Teacher_SchoolLeadership_Current = Num(IF($(vMinTeachers) <= $(vCount_Teacher_SchoolLeadership_Current), $(vPercMP_Teacher_SchoolLeadership_Current), Null()),'#.#%');
        let vAvgScore_Teacher_SchoolLeadership_Current = RangeAvg(Sum($(vSet_Teacher_SchoolLeadership_Current) SumScaledScore_1)/Sum($(vSet_Teacher_SchoolLeadership_Current) NCompleted_1), Sum($(vSet_Teacher_SchoolLeadership_Current) SumScaledScore_2)/Sum($(vSet_Teacher_SchoolLeadership_Current) NCompleted_2), Sum($(vSet_Teacher_SchoolLeadership_Current) SumScaledScore_3)/Sum($(vSet_Teacher_SchoolLeadership_Current) NCompleted_3), Sum($(vSet_Teacher_SchoolLeadership_Current) SumScaledScore_4)/Sum($(vSet_Teacher_SchoolLeadership_Current) NCompleted_4), Sum($(vSet_Teacher_SchoolLeadership_Current) SumScaledScore_5)/Sum($(vSet_Teacher_SchoolLeadership_Current) NCompleted_5), Sum($(vSet_Teacher_SchoolLeadership_Current) SumScaledScore_6)/Sum($(vSet_Teacher_SchoolLeadership_Current) NCompleted_6), Sum($(vSet_Teacher_SchoolLeadership_Current) SumScaledScore_7)/Sum($(vSet_Teacher_SchoolLeadership_Current) NCompleted_7));
        let vmmAvgScore_Teacher_SchoolLeadership_Current = Num(IF($(vMinTeachers) <= $(vCount_Teacher_SchoolLeadership_Current), $(vAvgScore_Teacher_SchoolLeadership_Current), Null()),'##0.##');
       
        let vSet_Principal_SchoolLeadership_Current = {<[Respondent Group]={"Principal"}, [Construct]={"School Leadership"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Principal_SchoolLeadership_Current = Count(distinct $(vSet_Principal_SchoolLeadership_Current) RespondentID);
        let vPercMP_Principal_SchoolLeadership_Current = RangeAvg(Sum($(vSet_Principal_SchoolLeadership_Current) NHighest_1)/Sum($(vSet_Principal_SchoolLeadership_Current) NCompleted_1), Sum($(vSet_Principal_SchoolLeadership_Current) NHighest_2)/Sum($(vSet_Principal_SchoolLeadership_Current) NCompleted_2), Sum($(vSet_Principal_SchoolLeadership_Current) NHighest_3)/Sum($(vSet_Principal_SchoolLeadership_Current) NCompleted_3), Sum($(vSet_Principal_SchoolLeadership_Current) NHighest_4)/Sum($(vSet_Principal_SchoolLeadership_Current) NCompleted_4), Sum($(vSet_Principal_SchoolLeadership_Current) NHighest_5)/Sum($(vSet_Principal_SchoolLeadership_Current) NCompleted_5), Sum($(vSet_Principal_SchoolLeadership_Current) NHighest_6)/Sum($(vSet_Principal_SchoolLeadership_Current) NCompleted_6), Sum($(vSet_Principal_SchoolLeadership_Current) NHighest_7)/Sum($(vSet_Principal_SchoolLeadership_Current) NCompleted_7));
        let vmmPercMP_Principal_SchoolLeadership_Current = Num(IF($(vMinPrincipals) <= $(vCount_Principal_SchoolLeadership_Current), $(vPercMP_Principal_SchoolLeadership_Current), Null()),'#.#%');
        let vAvgScore_Principal_SchoolLeadership_Current = RangeAvg(Sum($(vSet_Principal_SchoolLeadership_Current) SumScaledScore_1)/Sum($(vSet_Principal_SchoolLeadership_Current) NCompleted_1), Sum($(vSet_Principal_SchoolLeadership_Current) SumScaledScore_2)/Sum($(vSet_Principal_SchoolLeadership_Current) NCompleted_2), Sum($(vSet_Principal_SchoolLeadership_Current) SumScaledScore_3)/Sum($(vSet_Principal_SchoolLeadership_Current) NCompleted_3), Sum($(vSet_Principal_SchoolLeadership_Current) SumScaledScore_4)/Sum($(vSet_Principal_SchoolLeadership_Current) NCompleted_4), Sum($(vSet_Principal_SchoolLeadership_Current) SumScaledScore_5)/Sum($(vSet_Principal_SchoolLeadership_Current) NCompleted_5), Sum($(vSet_Principal_SchoolLeadership_Current) SumScaledScore_6)/Sum($(vSet_Principal_SchoolLeadership_Current) NCompleted_6), Sum($(vSet_Principal_SchoolLeadership_Current) SumScaledScore_7)/Sum($(vSet_Principal_SchoolLeadership_Current) NCompleted_7));
        let vmmAvgScore_Principal_SchoolLeadership_Current = Num(IF($(vMinPrincipals) <= $(vCount_Principal_SchoolLeadership_Current), $(vAvgScore_Principal_SchoolLeadership_Current), Null()),'##0.##');
              
        // subconstructs for PSSA scatter
        // Teacher: Expectations & Feedback, Inclusive Leadership 
        let vSet_Teacher_SchoolLeadership_ExpectationsFeedback_Current = {<[Respondent Group]={"Teacher"}, [Construct]={"School Leadership"}, [SubConstruct]={"Expectations & Feedback"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Teacher_SchoolLeadership_ExpectationsFeedback_Current = Count(distinct $(vSet_Teacher_SchoolLeadership_ExpectationsFeedback_Current) RespondentID);
        let vAvgScore_Teacher_SchoolLeadership_ExpectationsFeedback_Current = Sum($(vSet_Teacher_SchoolLeadership_ExpectationsFeedback_Current) SubConstruct_SumScaledScore)/Sum($(vSet_Teacher_SchoolLeadership_ExpectationsFeedback_Current) SubConstruct_NCompleted);
        let vmmAvgScore_Teacher_SchoolLeadership_ExpectationsFeedback_Current = Num(IF($(vMinTeachers) <= $(vCount_Teacher_SchoolLeadership_ExpectationsFeedback_Current), $(vAvgScore_Teacher_SchoolLeadership_ExpectationsFeedback_Current), Null()),'##0.##');
        
        let vSet_Teacher_SchoolLeadership_InclusiveLeadership_Current = {<[Respondent Group]={"Teacher"}, [Construct]={"School Leadership"}, [SubConstruct]={"Inclusive Leadership"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Teacher_SchoolLeadership_InclusiveLeadership_Current = Count(distinct $(vSet_Teacher_SchoolLeadership_InclusiveLeadership_Current) RespondentID);
        let vAvgScore_Teacher_SchoolLeadership_InclusiveLeadership_Current = Sum($(vSet_Teacher_SchoolLeadership_InclusiveLeadership_Current) SubConstruct_SumScaledScore)/Sum($(vSet_Teacher_SchoolLeadership_InclusiveLeadership_Current) SubConstruct_NCompleted);
        let vmmAvgScore_Teacher_SchoolLeadership_InclusiveLeadership_Current = Num(IF($(vMinTeachers) <= $(vCount_Teacher_SchoolLeadership_InclusiveLeadership_Current), $(vAvgScore_Teacher_SchoolLeadership_InclusiveLeadership_Current), Null()),'##0.##');
        
          
    /// Previous Year (don't have AvgScore because we're not using it at the moment)  
      // Climate 
        let vSet_Student_Climate_Previous = {<[Respondent Group]={"Student"}, [Construct]={"School Climate"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Student_Climate_Previous = RangeMax(Sum($(vSet_Student_Climate_Previous) NCompleted_1),Sum($(vSet_Student_Climate_Previous) NCompleted_2), Sum($(vSet_Student_Climate_Previous) NCompleted_3), Sum($(vSet_Student_Climate_Previous) NCompleted_4), Sum($(vSet_Student_Climate_Previous) NCompleted_5), Sum($(vSet_Student_Climate_Previous) NCompleted_6), Sum($(vSet_Student_Climate_Previous) NCompleted_7));
        let vPercMP_Student_Climate_Previous = RangeAvg(Sum($(vSet_Student_Climate_Previous) NHighest_1)/Sum($(vSet_Student_Climate_Previous) NCompleted_1), Sum($(vSet_Student_Climate_Previous) NHighest_2)/Sum($(vSet_Student_Climate_Previous) NCompleted_2), Sum($(vSet_Student_Climate_Previous) NHighest_3)/Sum($(vSet_Student_Climate_Previous) NCompleted_3), Sum($(vSet_Student_Climate_Previous) NHighest_4)/Sum($(vSet_Student_Climate_Previous) NCompleted_4), Sum($(vSet_Student_Climate_Previous) NHighest_5)/Sum($(vSet_Student_Climate_Previous) NCompleted_5), Sum($(vSet_Student_Climate_Previous) NHighest_6)/Sum($(vSet_Student_Climate_Previous) NCompleted_6), Sum($(vSet_Student_Climate_Previous) NHighest_7)/Sum($(vSet_Student_Climate_Previous) NCompleted_7));
        let vmmPercMP_Student_Climate_Previous = Num(IF($(vMinStudents) <= $(vCount_Student_Climate_Previous), $(vPercMP_Student_Climate_Previous), Null()),'#.#%');
        
        let vSet_Parent_Climate_Previous = {<[Respondent Group]={"Parent"}, [Construct]={"School Climate"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Parent_Climate_Previous = RangeMax(Sum($(vSet_Parent_Climate_Previous) NCompleted_1),Sum($(vSet_Parent_Climate_Previous) NCompleted_2), Sum($(vSet_Parent_Climate_Previous) NCompleted_3), Sum($(vSet_Parent_Climate_Previous) NCompleted_4), Sum($(vSet_Parent_Climate_Previous) NCompleted_5), Sum($(vSet_Parent_Climate_Previous) NCompleted_6), Sum($(vSet_Parent_Climate_Previous) NCompleted_7));
        let vPercMP_Parent_Climate_Previous = RangeAvg(Sum($(vSet_Parent_Climate_Previous) NHighest_1)/Sum($(vSet_Parent_Climate_Previous) NCompleted_1), Sum($(vSet_Parent_Climate_Previous) NHighest_2)/Sum($(vSet_Parent_Climate_Previous) NCompleted_2), Sum($(vSet_Parent_Climate_Previous) NHighest_3)/Sum($(vSet_Parent_Climate_Previous) NCompleted_3), Sum($(vSet_Parent_Climate_Previous) NHighest_4)/Sum($(vSet_Parent_Climate_Previous) NCompleted_4), Sum($(vSet_Parent_Climate_Previous) NHighest_5)/Sum($(vSet_Parent_Climate_Previous) NCompleted_5), Sum($(vSet_Parent_Climate_Previous) NHighest_6)/Sum($(vSet_Parent_Climate_Previous) NCompleted_6), Sum($(vSet_Parent_Climate_Previous) NHighest_7)/Sum($(vSet_Parent_Climate_Previous) NCompleted_7));
        let vmmPercMP_Parent_Climate_Previous = Num(IF($(vMinParents) <= $(vCount_Parent_Climate_Previous), $(vPercMP_Parent_Climate_Previous), Null()),'#.#%');
        
        let vSet_Teacher_Climate_Previous = {<[Respondent Group]={"Teacher"}, [Construct]={"School Climate"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Teacher_Climate_Previous = Count(distinct $(vSet_Teacher_Climate_Previous) RespondentID);
        let vPercMP_Teacher_Climate_Previous = RangeAvg(Sum($(vSet_Teacher_Climate_Previous) NHighest_1)/Sum($(vSet_Teacher_Climate_Previous) NCompleted_1), Sum($(vSet_Teacher_Climate_Previous) NHighest_2)/Sum($(vSet_Teacher_Climate_Previous) NCompleted_2), Sum($(vSet_Teacher_Climate_Previous) NHighest_3)/Sum($(vSet_Teacher_Climate_Previous) NCompleted_3), Sum($(vSet_Teacher_Climate_Previous) NHighest_4)/Sum($(vSet_Teacher_Climate_Previous) NCompleted_4), Sum($(vSet_Teacher_Climate_Previous) NHighest_5)/Sum($(vSet_Teacher_Climate_Previous) NCompleted_5), Sum($(vSet_Teacher_Climate_Previous) NHighest_6)/Sum($(vSet_Teacher_Climate_Previous) NCompleted_6), Sum($(vSet_Teacher_Climate_Previous) NHighest_7)/Sum($(vSet_Teacher_Climate_Previous) NCompleted_7));
        let vmmPercMP_Teacher_Climate_Previous = Num(IF($(vMinTeachers) <= $(vCount_Teacher_Climate_Previous), $(vPercMP_Teacher_Climate_Previous), Null()),'#.#%');
        
        let vSet_Principal_Climate_Previous = {<[Respondent Group]={"Principal"}, [Construct]={"School Climate"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Principal_Climate_Previous = Count(distinct $(vSet_Principal_Climate_Previous) RespondentID);
        let vPercMP_Principal_Climate_Previous = RangeAvg(Sum($(vSet_Principal_Climate_Previous) NHighest_1)/Sum($(vSet_Principal_Climate_Previous) NCompleted_1), Sum($(vSet_Principal_Climate_Previous) NHighest_2)/Sum($(vSet_Principal_Climate_Previous) NCompleted_2), Sum($(vSet_Principal_Climate_Previous) NHighest_3)/Sum($(vSet_Principal_Climate_Previous) NCompleted_3), Sum($(vSet_Principal_Climate_Previous) NHighest_4)/Sum($(vSet_Principal_Climate_Previous) NCompleted_4), Sum($(vSet_Principal_Climate_Previous) NHighest_5)/Sum($(vSet_Principal_Climate_Previous) NCompleted_5), Sum($(vSet_Principal_Climate_Previous) NHighest_6)/Sum($(vSet_Principal_Climate_Previous) NCompleted_6), Sum($(vSet_Principal_Climate_Previous) NHighest_7)/Sum($(vSet_Principal_Climate_Previous) NCompleted_7));
        let vmmPercMP_Principal_Climate_Previous = Num(IF($(vMinPrincipals) <= $(vCount_Principal_Climate_Previous), $(vPercMP_Principal_Climate_Previous), Null()),'#.#%');
      
      // Instruction 
        let vSet_Student_Instruction_Previous = {<[Respondent Group]={"Student"}, [Construct]={"Instruction"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Student_Instruction_Previous = Count(distinct $(vSet_Student_Instruction_Previous) RespondentID);
        let vPercMP_Student_Instruction_Previous = RangeAvg(Sum($(vSet_Student_Instruction_Previous) NHighest_1)/Sum($(vSet_Student_Instruction_Previous) NCompleted_1), Sum($(vSet_Student_Instruction_Previous) NHighest_2)/Sum($(vSet_Student_Instruction_Previous) NCompleted_2), Sum($(vSet_Student_Instruction_Previous) NHighest_3)/Sum($(vSet_Student_Instruction_Previous) NCompleted_3), Sum($(vSet_Student_Instruction_Previous) NHighest_4)/Sum($(vSet_Student_Instruction_Previous) NCompleted_4), Sum($(vSet_Student_Instruction_Previous) NHighest_5)/Sum($(vSet_Student_Instruction_Previous) NCompleted_5), Sum($(vSet_Student_Instruction_Previous) NHighest_6)/Sum($(vSet_Student_Instruction_Previous) NCompleted_6), Sum($(vSet_Student_Instruction_Previous) NHighest_7)/Sum($(vSet_Student_Instruction_Previous) NCompleted_7));
        let vmmPercMP_Student_Instruction_Previous = Num(IF($(vMinStudents) <= $(vCount_Student_Instruction_Previous), $(vPercMP_Student_Instruction_Previous), Null()),'#.#%');
        
        let vSet_Parent_Instruction_Previous = {<[Respondent Group]={"Parent"}, [Construct]={"Instruction"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Parent_Instruction_Previous = Count(distinct $(vSet_Parent_Instruction_Previous) RespondentID);
        let vPercMP_Parent_Instruction_Previous = RangeAvg(Sum($(vSet_Parent_Instruction_Previous) NHighest_1)/Sum($(vSet_Parent_Instruction_Previous) NCompleted_1), Sum($(vSet_Parent_Instruction_Previous) NHighest_2)/Sum($(vSet_Parent_Instruction_Previous) NCompleted_2), Sum($(vSet_Parent_Instruction_Previous) NHighest_3)/Sum($(vSet_Parent_Instruction_Previous) NCompleted_3), Sum($(vSet_Parent_Instruction_Previous) NHighest_4)/Sum($(vSet_Parent_Instruction_Previous) NCompleted_4), Sum($(vSet_Parent_Instruction_Previous) NHighest_5)/Sum($(vSet_Parent_Instruction_Previous) NCompleted_5), Sum($(vSet_Parent_Instruction_Previous) NHighest_6)/Sum($(vSet_Parent_Instruction_Previous) NCompleted_6), Sum($(vSet_Parent_Instruction_Previous) NHighest_7)/Sum($(vSet_Parent_Instruction_Previous) NCompleted_7));
        let vmmPercMP_Parent_Instruction_Previous = Num(IF($(vMinParents) <= $(vCount_Parent_Instruction_Previous), $(vPercMP_Parent_Instruction_Previous), Null()),'#.#%');
        
        let vSet_Teacher_Instruction_Previous = {<[Respondent Group]={"Teacher"}, [Construct]={"Instruction"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Teacher_Instruction_Previous = Count(distinct $(vSet_Teacher_Instruction_Previous) RespondentID);
        let vPercMP_Teacher_Instruction_Previous = RangeAvg(Sum($(vSet_Teacher_Instruction_Previous) NHighest_1)/Sum($(vSet_Teacher_Instruction_Previous) NCompleted_1), Sum($(vSet_Teacher_Instruction_Previous) NHighest_2)/Sum($(vSet_Teacher_Instruction_Previous) NCompleted_2), Sum($(vSet_Teacher_Instruction_Previous) NHighest_3)/Sum($(vSet_Teacher_Instruction_Previous) NCompleted_3), Sum($(vSet_Teacher_Instruction_Previous) NHighest_4)/Sum($(vSet_Teacher_Instruction_Previous) NCompleted_4), Sum($(vSet_Teacher_Instruction_Previous) NHighest_5)/Sum($(vSet_Teacher_Instruction_Previous) NCompleted_5), Sum($(vSet_Teacher_Instruction_Previous) NHighest_6)/Sum($(vSet_Teacher_Instruction_Previous) NCompleted_6), Sum($(vSet_Teacher_Instruction_Previous) NHighest_7)/Sum($(vSet_Teacher_Instruction_Previous) NCompleted_7));
        let vmmPercMP_Teacher_Instruction_Previous = Num(IF($(vMinTeachers) <= $(vCount_Teacher_Instruction_Previous), $(vPercMP_Teacher_Instruction_Previous), Null()),'#.#%');
        
        let vSet_Principal_Instruction_Previous = {<[Respondent Group]={"Principal"}, [Construct]={"Instruction"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Principal_Instruction_Previous = Count(distinct $(vSet_Principal_Instruction_Previous) RespondentID);
        let vPercMP_Principal_Instruction_Previous = RangeAvg(Sum($(vSet_Principal_Instruction_Previous) NHighest_1)/Sum($(vSet_Principal_Instruction_Previous) NCompleted_1), Sum($(vSet_Principal_Instruction_Previous) NHighest_2)/Sum($(vSet_Principal_Instruction_Previous) NCompleted_2), Sum($(vSet_Principal_Instruction_Previous) NHighest_3)/Sum($(vSet_Principal_Instruction_Previous) NCompleted_3), Sum($(vSet_Principal_Instruction_Previous) NHighest_4)/Sum($(vSet_Principal_Instruction_Previous) NCompleted_4), Sum($(vSet_Principal_Instruction_Previous) NHighest_5)/Sum($(vSet_Principal_Instruction_Previous) NCompleted_5), Sum($(vSet_Principal_Instruction_Previous) NHighest_6)/Sum($(vSet_Principal_Instruction_Previous) NCompleted_6), Sum($(vSet_Principal_Instruction_Previous) NHighest_7)/Sum($(vSet_Principal_Instruction_Previous) NCompleted_7));
        let vmmPercMP_Principal_Instruction_Previous = Num(IF($(vMinPrincipals) <= $(vCount_Principal_Instruction_Previous), $(vPercMP_Principal_Instruction_Previous), Null()),'#.#%');
           
      // Parent/Guardian Community Ties
        let vSet_Parent_CommunityTies_Previous = {<[Respondent Group]={"Parent"}, [Construct]={"Parent/Guardian-Community Ties"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Parent_CommunityTies_Previous = Count(distinct $(vSet_Parent_CommunityTies_Previous) RespondentID);
        let vPercMP_Parent_CommunityTies_Previous = RangeAvg(Sum($(vSet_Parent_CommunityTies_Previous) NHighest_1)/Sum($(vSet_Parent_CommunityTies_Previous) NCompleted_1), Sum($(vSet_Parent_CommunityTies_Previous) NHighest_2)/Sum($(vSet_Parent_CommunityTies_Previous) NCompleted_2), Sum($(vSet_Parent_CommunityTies_Previous) NHighest_3)/Sum($(vSet_Parent_CommunityTies_Previous) NCompleted_3), Sum($(vSet_Parent_CommunityTies_Previous) NHighest_4)/Sum($(vSet_Parent_CommunityTies_Previous) NCompleted_4), Sum($(vSet_Parent_CommunityTies_Previous) NHighest_5)/Sum($(vSet_Parent_CommunityTies_Previous) NCompleted_5), Sum($(vSet_Parent_CommunityTies_Previous) NHighest_6)/Sum($(vSet_Parent_CommunityTies_Previous) NCompleted_6), Sum($(vSet_Parent_CommunityTies_Previous) NHighest_7)/Sum($(vSet_Parent_CommunityTies_Previous) NCompleted_7));
        let vmmPercMP_Parent_CommunityTies_Previous = Num(IF($(vMinParents) <= $(vCount_Parent_CommunityTies_Previous), $(vPercMP_Parent_CommunityTies_Previous), Null()),'#.#%');
        
        let vSet_Teacher_CommunityTies_Previous = {<[Respondent Group]={"Teacher"}, [Construct]={"Parent/Guardian-Community Ties"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Teacher_CommunityTies_Previous = Count(distinct $(vSet_Teacher_CommunityTies_Previous) RespondentID);
        let vPercMP_Teacher_CommunityTies_Previous = RangeAvg(Sum($(vSet_Teacher_CommunityTies_Previous) NHighest_1)/Sum($(vSet_Teacher_CommunityTies_Previous) NCompleted_1), Sum($(vSet_Teacher_CommunityTies_Previous) NHighest_2)/Sum($(vSet_Teacher_CommunityTies_Previous) NCompleted_2), Sum($(vSet_Teacher_CommunityTies_Previous) NHighest_3)/Sum($(vSet_Teacher_CommunityTies_Previous) NCompleted_3), Sum($(vSet_Teacher_CommunityTies_Previous) NHighest_4)/Sum($(vSet_Teacher_CommunityTies_Previous) NCompleted_4), Sum($(vSet_Teacher_CommunityTies_Previous) NHighest_5)/Sum($(vSet_Teacher_CommunityTies_Previous) NCompleted_5), Sum($(vSet_Teacher_CommunityTies_Previous) NHighest_6)/Sum($(vSet_Teacher_CommunityTies_Previous) NCompleted_6), Sum($(vSet_Teacher_CommunityTies_Previous) NHighest_7)/Sum($(vSet_Teacher_CommunityTies_Previous) NCompleted_7));
        let vmmPercMP_Teacher_CommunityTies_Previous = Num(IF($(vMinTeachers) <= $(vCount_Teacher_CommunityTies_Previous), $(vPercMP_Teacher_CommunityTies_Previous), Null()),'#.#%');
        
        let vSet_Principal_CommunityTies_Previous = {<[Respondent Group]={"Principal"}, [Construct]={"Parent/Guardian-Community Ties"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Principal_CommunityTies_Previous = Count(distinct $(vSet_Principal_CommunityTies_Previous) RespondentID);
        let vPercMP_Principal_CommunityTies_Previous = RangeAvg(Sum($(vSet_Principal_CommunityTies_Previous) NHighest_1)/Sum($(vSet_Principal_CommunityTies_Previous) NCompleted_1), Sum($(vSet_Principal_CommunityTies_Previous) NHighest_2)/Sum($(vSet_Principal_CommunityTies_Previous) NCompleted_2), Sum($(vSet_Principal_CommunityTies_Previous) NHighest_3)/Sum($(vSet_Principal_CommunityTies_Previous) NCompleted_3), Sum($(vSet_Principal_CommunityTies_Previous) NHighest_4)/Sum($(vSet_Principal_CommunityTies_Previous) NCompleted_4), Sum($(vSet_Principal_CommunityTies_Previous) NHighest_5)/Sum($(vSet_Principal_CommunityTies_Previous) NCompleted_5), Sum($(vSet_Principal_CommunityTies_Previous) NHighest_6)/Sum($(vSet_Principal_CommunityTies_Previous) NCompleted_6), Sum($(vSet_Principal_CommunityTies_Previous) NHighest_7)/Sum($(vSet_Principal_CommunityTies_Previous) NCompleted_7));
        let vmmPercMP_Principal_CommunityTies_Previous = Num(IF($(vMinPrincipals) <= $(vCount_Principal_CommunityTies_Previous), $(vPercMP_Principal_CommunityTies_Previous), Null()),'#.#%');
      
      // Professional Capacity
        let vSet_Teacher_ProfessionalCapacity_Previous = {<[Respondent Group]={"Teacher"}, [Construct]={"Professional Capacity"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Teacher_ProfessionalCapacity_Previous = Count(distinct $(vSet_Teacher_ProfessionalCapacity_Previous) RespondentID);
        let vPercMP_Teacher_ProfessionalCapacity_Previous = RangeAvg(Sum($(vSet_Teacher_ProfessionalCapacity_Previous) NHighest_1)/Sum($(vSet_Teacher_ProfessionalCapacity_Previous) NCompleted_1), Sum($(vSet_Teacher_ProfessionalCapacity_Previous) NHighest_2)/Sum($(vSet_Teacher_ProfessionalCapacity_Previous) NCompleted_2), Sum($(vSet_Teacher_ProfessionalCapacity_Previous) NHighest_3)/Sum($(vSet_Teacher_ProfessionalCapacity_Previous) NCompleted_3), Sum($(vSet_Teacher_ProfessionalCapacity_Previous) NHighest_4)/Sum($(vSet_Teacher_ProfessionalCapacity_Previous) NCompleted_4), Sum($(vSet_Teacher_ProfessionalCapacity_Previous) NHighest_5)/Sum($(vSet_Teacher_ProfessionalCapacity_Previous) NCompleted_5), Sum($(vSet_Teacher_ProfessionalCapacity_Previous) NHighest_6)/Sum($(vSet_Teacher_ProfessionalCapacity_Previous) NCompleted_6), Sum($(vSet_Teacher_ProfessionalCapacity_Previous) NHighest_7)/Sum($(vSet_Teacher_ProfessionalCapacity_Previous) NCompleted_7));
        let vmmPercMP_Teacher_ProfessionalCapacity_Previous = Num(IF($(vMinTeachers) <= $(vCount_Teacher_ProfessionalCapacity_Previous), $(vPercMP_Teacher_ProfessionalCapacity_Previous), Null()),'#.#%');
        
        let vSet_Principal_ProfessionalCapacity_Previous = {<[Respondent Group]={"Principal"}, [Construct]={"Professional Capacity"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Principal_ProfessionalCapacity_Previous = Count(distinct $(vSet_Principal_ProfessionalCapacity_Previous) RespondentID);
        let vPercMP_Principal_ProfessionalCapacity_Previous = RangeAvg(Sum($(vSet_Principal_ProfessionalCapacity_Previous) NHighest_1)/Sum($(vSet_Principal_ProfessionalCapacity_Previous) NCompleted_1), Sum($(vSet_Principal_ProfessionalCapacity_Previous) NHighest_2)/Sum($(vSet_Principal_ProfessionalCapacity_Previous) NCompleted_2), Sum($(vSet_Principal_ProfessionalCapacity_Previous) NHighest_3)/Sum($(vSet_Principal_ProfessionalCapacity_Previous) NCompleted_3), Sum($(vSet_Principal_ProfessionalCapacity_Previous) NHighest_4)/Sum($(vSet_Principal_ProfessionalCapacity_Previous) NCompleted_4), Sum($(vSet_Principal_ProfessionalCapacity_Previous) NHighest_5)/Sum($(vSet_Principal_ProfessionalCapacity_Previous) NCompleted_5), Sum($(vSet_Principal_ProfessionalCapacity_Previous) NHighest_6)/Sum($(vSet_Principal_ProfessionalCapacity_Previous) NCompleted_6), Sum($(vSet_Principal_ProfessionalCapacity_Previous) NHighest_7)/Sum($(vSet_Principal_ProfessionalCapacity_Previous) NCompleted_7));
        let vmmPercMP_Principal_ProfessionalCapacity_Previous = Num(IF($(vMinPrincipals) <= $(vCount_Principal_ProfessionalCapacity_Previous), $(vPercMP_Principal_ProfessionalCapacity_Previous), Null()),'#.#%');
    
      // School Leadership
        let vSet_Parent_SchoolLeadership_Previous = {<[Respondent Group]={"Parent"}, [Construct]={"School Leadership"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Parent_SchoolLeadership_Previous = Count(distinct $(vSet_Parent_SchoolLeadership_Previous) RespondentID);
        let vPercMP_Parent_SchoolLeadership_Previous = RangeAvg(Sum($(vSet_Parent_SchoolLeadership_Previous) NHighest_1)/Sum($(vSet_Parent_SchoolLeadership_Previous) NCompleted_1), Sum($(vSet_Parent_SchoolLeadership_Previous) NHighest_2)/Sum($(vSet_Parent_SchoolLeadership_Previous) NCompleted_2), Sum($(vSet_Parent_SchoolLeadership_Previous) NHighest_3)/Sum($(vSet_Parent_SchoolLeadership_Previous) NCompleted_3), Sum($(vSet_Parent_SchoolLeadership_Previous) NHighest_4)/Sum($(vSet_Parent_SchoolLeadership_Previous) NCompleted_4), Sum($(vSet_Parent_SchoolLeadership_Previous) NHighest_5)/Sum($(vSet_Parent_SchoolLeadership_Previous) NCompleted_5), Sum($(vSet_Parent_SchoolLeadership_Previous) NHighest_6)/Sum($(vSet_Parent_SchoolLeadership_Previous) NCompleted_6), Sum($(vSet_Parent_SchoolLeadership_Previous) NHighest_7)/Sum($(vSet_Parent_SchoolLeadership_Previous) NCompleted_7));
        let vmmPercMP_Parent_SchoolLeadership_Previous = Num(IF($(vMinParents) <= $(vCount_Parent_SchoolLeadership_Previous), $(vPercMP_Parent_SchoolLeadership_Previous), Null()),'#.#%');
        
        let vSet_Teacher_SchoolLeadership_Previous = {<[Respondent Group]={"Teacher"}, [Construct]={"School Leadership"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Teacher_SchoolLeadership_Previous = Count(distinct $(vSet_Teacher_SchoolLeadership_Previous) RespondentID);
        let vPercMP_Teacher_SchoolLeadership_Previous = RangeAvg(Sum($(vSet_Teacher_SchoolLeadership_Previous) NHighest_1)/Sum($(vSet_Teacher_SchoolLeadership_Previous) NCompleted_1), Sum($(vSet_Teacher_SchoolLeadership_Previous) NHighest_2)/Sum($(vSet_Teacher_SchoolLeadership_Previous) NCompleted_2), Sum($(vSet_Teacher_SchoolLeadership_Previous) NHighest_3)/Sum($(vSet_Teacher_SchoolLeadership_Previous) NCompleted_3), Sum($(vSet_Teacher_SchoolLeadership_Previous) NHighest_4)/Sum($(vSet_Teacher_SchoolLeadership_Previous) NCompleted_4), Sum($(vSet_Teacher_SchoolLeadership_Previous) NHighest_5)/Sum($(vSet_Teacher_SchoolLeadership_Previous) NCompleted_5), Sum($(vSet_Teacher_SchoolLeadership_Previous) NHighest_6)/Sum($(vSet_Teacher_SchoolLeadership_Previous) NCompleted_6), Sum($(vSet_Teacher_SchoolLeadership_Previous) NHighest_7)/Sum($(vSet_Teacher_SchoolLeadership_Previous) NCompleted_7));
        let vmmPercMP_Teacher_SchoolLeadership_Previous = Num(IF($(vMinTeachers) <= $(vCount_Teacher_SchoolLeadership_Previous), $(vPercMP_Teacher_SchoolLeadership_Previous), Null()),'#.#%');
        
        let vSet_Principal_SchoolLeadership_Previous = {<[Respondent Group]={"Principal"}, [Construct]={"School Leadership"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
        let vCount_Principal_SchoolLeadership_Previous = Count(distinct $(vSet_Principal_SchoolLeadership_Previous) RespondentID);
        let vPercMP_Principal_SchoolLeadership_Previous = RangeAvg(Sum($(vSet_Principal_SchoolLeadership_Previous) NHighest_1)/Sum($(vSet_Principal_SchoolLeadership_Previous) NCompleted_1), Sum($(vSet_Principal_SchoolLeadership_Previous) NHighest_2)/Sum($(vSet_Principal_SchoolLeadership_Previous) NCompleted_2), Sum($(vSet_Principal_SchoolLeadership_Previous) NHighest_3)/Sum($(vSet_Principal_SchoolLeadership_Previous) NCompleted_3), Sum($(vSet_Principal_SchoolLeadership_Previous) NHighest_4)/Sum($(vSet_Principal_SchoolLeadership_Previous) NCompleted_4), Sum($(vSet_Principal_SchoolLeadership_Previous) NHighest_5)/Sum($(vSet_Principal_SchoolLeadership_Previous) NCompleted_5), Sum($(vSet_Principal_SchoolLeadership_Previous) NHighest_6)/Sum($(vSet_Principal_SchoolLeadership_Previous) NCompleted_6), Sum($(vSet_Principal_SchoolLeadership_Previous) NHighest_7)/Sum($(vSet_Principal_SchoolLeadership_Previous) NCompleted_7));
        let vmmPercMP_Principal_SchoolLeadership_Previous = Num(IF($(vMinPrincipals) <= $(vCount_Principal_SchoolLeadership_Previous), $(vPercMP_Principal_SchoolLeadership_Previous), Null()),'#.#%');
               
///// Survey Constructs and Subconstruct - Scaled Score
    /// NOTES: For the school-level reports we will display both Avg scaled scores rolled up to the respondent-topic-year level
    /// as well as the topic-year level. For the latter, new business rules are needed to combine multiple respondents groups
    /// i.e., we cannot take a straight average of all of "Construct 1" across all users because: 
    /// a) Construct 1 will be different by group
    /// b) this will weight teachers heavily over principals
    /// As a workaround, in accordance with rules (seemingly) developed by Chicago, like the normal rules where we find averages
    /// for individual subconstructs and then average across these, we will do the same here; however, each respondent group's subtopics
    /// will be distinct from each other.
    /// Thus, for a topic like School Climate we'll take the average of (partially):
    /// Student - Belonging, Parent - Bullying, Student - Bullying, ... , Teacher - Student Centered Learning Climate etc. (up to 28 subconstructs, in theory)

  //// All Respondents and All Topics
    /// Create parameterized single respondent - all topics measures
      let vSet_pRespondent_AllConstructs = {<[Respondent Group]={"$1"}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vSet_pRespondent_AllConstructs_Current = {<[Respondent Group]={"$1"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vCount_pRespondent_AllConstructs_Current = Count(distinct $(vSet_pRespondent_AllConstructs_Current($1)) RespondentID);
      let vSet1_pRespondent_AllConstructs_Current = {1<[Respondent Group]={"$1"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vCount1_pRespondent_AllConstructs_Current = Count(distinct $(vSet1_pRespondent_AllConstructs_Current($1)) RespondentID);
      let vSet1_pRespondent_AllConstructs_KeepConstruct_Current = {1<[Respondent Group]={"$1"}, YearEnd={$(=$(vMaxYearEnd))}, [Construct]=P([Construct])$(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vCount1_pRespondent_AllConstructs_KeepConstruct_Current = Count(distinct $(vSet1_pRespondent_AllConstructs_KeepConstruct_Current($1)) RespondentID);
      let vAvgScore_pRespondent_AllConstructs_Current = RangeAvg(Sum($(vSet_pRespondent_AllConstructs_Current($1)) SumScaledScore_1)/Sum($(vSet_pRespondent_AllConstructs_Current($1)) NCompleted_1), Sum($(vSet_pRespondent_AllConstructs_Current($1)) SumScaledScore_2)/Sum($(vSet_pRespondent_AllConstructs_Current($1)) NCompleted_2), Sum($(vSet_pRespondent_AllConstructs_Current($1)) SumScaledScore_3)/Sum($(vSet_pRespondent_AllConstructs_Current($1)) NCompleted_3), Sum($(vSet_pRespondent_AllConstructs_Current($1)) SumScaledScore_4)/Sum($(vSet_pRespondent_AllConstructs_Current($1)) NCompleted_4), Sum($(vSet_pRespondent_AllConstructs_Current($1)) SumScaledScore_5)/Sum($(vSet_pRespondent_AllConstructs_Current($1)) NCompleted_5), Sum($(vSet_pRespondent_AllConstructs_Current($1)) SumScaledScore_6)/Sum($(vSet_pRespondent_AllConstructs_Current($1)) NCompleted_6), Sum($(vSet_pRespondent_AllConstructs_Current($1)) SumScaledScore_7)/Sum($(vSet_pRespondent_AllConstructs_Current($1)) NCompleted_7));
      let vmmAvgScore_pRespondent_AllConstructs_Current = Num(IF($(vMin$1s) <= $(vCount_pRespondent_AllConstructs_Current($1)), $(vAvgScore_pRespondent_AllConstructs_Current($1)), Null()),'##0.#');
    
      let vSet_pRespondent_AllConstructs_Previous = {<[Respondent Group]={"$1"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vCount_pRespondent_AllConstructs_Previous = Count(distinct $(vSet_pRespondent_AllConstructs_Previous($1)) RespondentID);
      let vAvgScore_pRespondent_AllConstructs_Previous = RangeAvg(Sum($(vSet_pRespondent_AllConstructs_Previous($1)) SumScaledScore_1)/Sum($(vSet_pRespondent_AllConstructs_Previous($1)) NCompleted_1), Sum($(vSet_pRespondent_AllConstructs_Previous($1)) SumScaledScore_2)/Sum($(vSet_pRespondent_AllConstructs_Previous($1)) NCompleted_2), Sum($(vSet_pRespondent_AllConstructs_Previous($1)) SumScaledScore_3)/Sum($(vSet_pRespondent_AllConstructs_Previous($1)) NCompleted_3), Sum($(vSet_pRespondent_AllConstructs_Previous($1)) SumScaledScore_4)/Sum($(vSet_pRespondent_AllConstructs_Previous($1)) NCompleted_4), Sum($(vSet_pRespondent_AllConstructs_Previous($1)) SumScaledScore_5)/Sum($(vSet_pRespondent_AllConstructs_Previous($1)) NCompleted_5), Sum($(vSet_pRespondent_AllConstructs_Previous($1)) SumScaledScore_6)/Sum($(vSet_pRespondent_AllConstructs_Previous($1)) NCompleted_6), Sum($(vSet_pRespondent_AllConstructs_Previous($1)) SumScaledScore_7)/Sum($(vSet_pRespondent_AllConstructs_Previous($1)) NCompleted_7));
      let vmmAvgScore_pRespondent_AllConstructs_Previous = Num(IF($(vMin$1s) <= $(vCount_pRespondent_AllConstructs_Previous($1)), $(vAvgScore_pRespondent_AllConstructs_Previous($1)), Null()),'##0.#');
    
      let vmmAvgScore_pRespondent_AllConstructs_YOY = Num($(vmmAvgScore_pRespondent_AllConstructs_Current($1)) - $(vmmAvgScore_pRespondent_AllConstructs_Previous($1)),'##0.#');

    /// Create parameterized single respondent - all sub-topics measures
      let vSet_pRespondent_AllSubConstructs = {<[Respondent Group]={"$1"}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vSet_pRespondent_AllSubConstructs_Current = {<[Respondent Group]={"$1"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vCount_pRespondent_AllSubConstructs_Current = Count(distinct $(vSet_pRespondent_AllSubConstructs_Current($1)) RespondentID);
      let vSet1_pRespondent_AllSubConstructs_Current = {1<[Respondent Group]={"$1"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)$(vSetOpts_EPD)>};
      let vCount1_pRespondent_AllSubConstructs_Current = Count(distinct $(vSet1_pRespondent_AllSubConstructs_Current($1)) RespondentID);
      let vAvgScore_pRespondent_AllSubConstructs_Current = Sum($(vSet_pRespondent_AllSubConstructs_Current($1)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_AllSubConstructs_Current($1)) SubConstruct_NCompleted);
      let vmmAvgScore_pRespondent_AllSubConstructs_Current = Num(IF($(vMin$1s) <= $(vCount_pRespondent_AllSubConstructs_Current($1)), $(vAvgScore_pRespondent_AllSubConstructs_Current($1)), Null()),'##0.#');
    
      let vSet_pRespondent_AllSubConstructs_Previous = {<[Respondent Group]={"$1"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)>};
      let vCount_pRespondent_AllSubConstructs_Previous = Count(distinct $(vSet_pRespondent_AllSubConstructs_Previous($1)) RespondentID);
      let vAvgScore_pRespondent_AllSubConstructs_Previous = Sum($(vSet_pRespondent_AllSubConstructs_Previous($1)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_AllSubConstructs_Previous($1)) SubConstruct_NCompleted);
      let vmmAvgScore_pRespondent_AllSubConstructs_Previous = Num(IF($(vMin$1s) <= $(vCount_pRespondent_AllSubConstructs_Previous($1)), $(vAvgScore_pRespondent_AllSubConstructs_Previous($1)), Null()),'##0.#');
    
      let vmmAvgScore_pRespondent_AllSubConstructs_YOY = Num($(vmmAvgScore_pRespondent_AllSubConstructs_Current($1)) - $(vmmAvgScore_pRespondent_AllSubConstructs_Previous($1)),'##0.#');


    /// Create parameterized single respondent - all sub-topics measures
      let vSet_pRespondent_Constructs_Current = {<[Respondent Group]={"$1"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)>};
      let vCount_pRespondent_Constructs_Current = Count(distinct $(vSet_pRespondent_Constructs_Current($1)) RespondentID);
      let vAvgScore_pRespondent_Constructs_Current = Sum($(vSet_pRespondent_Constructs_Current($1)) SumScaledScore_1)/Sum($(vSet_pRespondent_Constructs_Current($1)) NCompleted_1);
      let vmmAvgScore_pRespondent_Constructs_Current = Num(IF($(vMin$1s) <= $(vCount_pRespondent_Constructs_Current($1)), $(vAvgScore_pRespondent_Constructs_Current($1)), Null()),'##0.#');
    
      let vSet_pRespondent_Constructs_Previous = {<[Respondent Group]={"$1"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)>};
      let vCount_pRespondent_Constructs_Previous = Count(distinct $(vSet_pRespondent_Constructs_Previous($1)) RespondentID);
      let vAvgScore_pRespondent_Constructs_Previous = Sum($(vSet_pRespondent_Constructs_Previous($1)) SumScaledScore_1)/Sum($(vSet_pRespondent_Constructs_Previous($1)) NCompleted_1);
      let vmmAvgScore_pRespondent_Constructs_Previous = Num(IF($(vMin$1s) <= $(vCount_pRespondent_Constructs_Previous($1)), $(vAvgScore_pRespondent_Constructs_Previous($1)), Null()),'##0.#');
    
      let vmmAvgScore_pRespondent_Constructs_YOY = Num($(vmmAvgScore_pRespondent_Constructs_Current($1)) - $(vmmAvgScore_pRespondent_Constructs_Previous($1)),'##0.#');


    /// Create parameterized single topic - single respondents measures
      let vSet_pRespondent_pConstruct_Current = {<[Respondent Group]={"$1"}, [Construct]={"$2"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)>};
      let vCount_pRespondent_pConstruct_Current = Count(distinct $(vSet_pRespondent_pConstruct_Current($1, $2)) RespondentID);
      let vAvgScore_pRespondent_pConstruct_Current = RangeAvg(Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) SumScaledScore_1)/Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) NCompleted_1), Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) SumScaledScore_2)/Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) NCompleted_2), Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) SumScaledScore_3)/Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) NCompleted_3), Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) SumScaledScore_4)/Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) NCompleted_4), Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) SumScaledScore_5)/Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) NCompleted_5), Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) SumScaledScore_6)/Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) NCompleted_6), Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) SumScaledScore_7)/Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) NCompleted_7));
      let vmmAvgScore_pRespondent_pConstruct_Current = Num(IF($(vMin$1s) <= $(vCount_pRespondent_pConstruct_Current($1, $2)), $(vAvgScore_pRespondent_pConstruct_Current($1, $2)), Null()),'##0.#');
    
      let vSet_pRespondent_pConstruct_Previous = {<[Respondent Group]={"$1"}, [Construct]={"$2"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)>};
      let vCount_pRespondent_pConstruct_Previous = Count(distinct $(vSet_pRespondent_pConstruct_Previous($1, $2)) RespondentID);
      let vAvgScore_pRespondent_pConstruct_Previous = RangeAvg(Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) SumScaledScore_1)/Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) NCompleted_1), Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) SumScaledScore_2)/Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) NCompleted_2), Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) SumScaledScore_3)/Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) NCompleted_3), Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) SumScaledScore_4)/Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) NCompleted_4), Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) SumScaledScore_5)/Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) NCompleted_5), Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) SumScaledScore_6)/Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) NCompleted_6), Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) SumScaledScore_7)/Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) NCompleted_7));
      let vmmAvgScore_pRespondent_pConstruct_Previous = Num(IF($(vMin$1s) <= $(vCount_pRespondent_pConstruct_Previous($1, $2)), $(vAvgScore_pRespondent_pConstruct_Previous($1, $2)), Null()),'##0.#');
    
      let vmmAvgScore_pRespondent_pConstruct_YOY = Num($(vmmAvgScore_pRespondent_pConstruct_Current($1, $2)) - $(vmmAvgScore_pRespondent_pConstruct_Previous($1, $2)),'##0.#');
    
    /// Create parameterized single sub-topic - single sub-topic - single respondents measures  
      let vSet_pRespondent_pConstruct_pSubConstruct_Current = {<[Respondent Group]={"$1"}, [Construct]={"$2"}, [SubConstruct]={"$3"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)>};
      let vCount_pRespondent_pConstruct_pSubConstruct_Current = Count(distinct $(vSet_pRespondent_pConstruct_pSubConstruct_Current($1, $2, $3)) RespondentID);
      let vAvgScore_pRespondent_pConstruct_pSubConstruct_Current = Sum($(vSet_pRespondent_pConstruct_pSubConstruct_Current($1, $2, $3)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_pConstruct_pSubConstruct_Current($1, $2, $3)) SubConstruct_NCompleted);
      let vmmAvgScore_pRespondent_pConstruct_pSubConstruct_Current = Num(IF($(vMinTeachers) <= $(vCount_pRespondent_pConstruct_pSubConstruct_Current($1, $2, $3)), $(vAvgScore_pRespondent_pConstruct_pSubConstruct_Current($1, $2, $3)), Null()),'##0.#');
       
      let vSet_pRespondent_pConstruct_pSubConstruct_Previous = {<[Respondent Group]={"$1"}, [Construct]={"$2"}, [SubConstruct]={"$3"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)>};
      let vCount_pRespondent_pConstruct_pSubConstruct_Previous = Count(distinct $(vSet_pRespondent_pConstruct_pSubConstruct_Previous($1, $2, $3)) RespondentID);
      let vAvgScore_pRespondent_pConstruct_pSubConstruct_Previous = Sum($(vSet_pRespondent_pConstruct_pSubConstruct_Previous($1, $2, $3)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_pConstruct_pSubConstruct_Previous($1, $2, $3)) SubConstruct_NCompleted);
      let vmmAvgScore_pRespondent_pConstruct_pSubConstruct_Previous = Num(IF($(vMinTeachers) <= $(vCount_pRespondent_pConstruct_pSubConstruct_Previous($1, $2, $3)), $(vAvgScore_pRespondent_pConstruct_pSubConstruct_Previous($1, $2, $3)), Null()),'##0.#');
      
      let vmmAvgScore_pRespondent_pConstruct_pSubConstruct_YOY = Num($(vmmAvgScore_pRespondent_pConstruct_pSubConstruct_Current($1, $2, $3)) - $(vmmAvgScore_pRespondent_pConstruct_pSubConstruct_Previous($1, $2, $3)),'##0.#');
        
    
    /// Create parameterized single topic - single respondents measures, where we will display each of the subconstructs
      let vSet_pRespondent_pConstruct_Current = {<[Respondent Group]={"$1"}, [Construct]={"$2"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)>};
      let vCount_pRespondent_pConstruct_Current = Count(distinct $(vSet_pRespondent_pConstruct_Current($1, $2)) RespondentID);
      let vSet1_pRespondent_pConstruct_Current = {1<[Respondent Group]={"$1"}, [Construct]={"$2"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)>};
      let vCount1_pRespondent_pConstruct_Current = Count(distinct $(vSet1_pRespondent_pConstruct_Current($1, $2)) RespondentID);
      let vAvgScore_pRespondent_pConstruct_Current = RangeAvg(Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) SumScaledScore_1)/Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) NCompleted_1), Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) SumScaledScore_2)/Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) NCompleted_2), Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) SumScaledScore_3)/Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) NCompleted_3), Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) SumScaledScore_4)/Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) NCompleted_4), Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) SumScaledScore_5)/Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) NCompleted_5), Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) SumScaledScore_6)/Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) NCompleted_6), Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) SumScaledScore_7)/Sum($(vSet_pRespondent_pConstruct_Current($1, $2)) NCompleted_7));
      let vmmAvgScore_pRespondent_pConstruct_Current = Num(IF($(vMin$1s) <= $(vCount_pRespondent_pConstruct_Current($1, $2)), $(vAvgScore_pRespondent_pConstruct_Current($1, $2)), Null()),'##0.#');
    
      let vSet_pRespondent_pConstruct_Previous = {<[Respondent Group]={"$1"}, [Construct]={"$2"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)>};
      let vCount_pRespondent_pConstruct_Previous = Count(distinct $(vSet_pRespondent_pConstruct_Previous($1, $2)) RespondentID);
      let vAvgScore_pRespondent_pConstruct_Previous = RangeAvg(Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) SumScaledScore_1)/Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) NCompleted_1), Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) SumScaledScore_2)/Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) NCompleted_2), Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) SumScaledScore_3)/Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) NCompleted_3), Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) SumScaledScore_4)/Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) NCompleted_4), Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) SumScaledScore_5)/Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) NCompleted_5), Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) SumScaledScore_6)/Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) NCompleted_6), Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) SumScaledScore_7)/Sum($(vSet_pRespondent_pConstruct_Previous($1, $2)) NCompleted_7));
      let vmmAvgScore_pRespondent_pConstruct_Previous = Num(IF($(vMin$1s) <= $(vCount_pRespondent_pConstruct_Previous($1, $2)), $(vAvgScore_pRespondent_pConstruct_Previous($1, $2)), Null()),'##0.#');
      

      let vmmAvgScore_pRespondent_pConstruct_YOY = Num($(vmmAvgScore_pRespondent_pConstruct_Current($1, $2)) - $(vmmAvgScore_pRespondent_pConstruct_Previous($1, $2)),'##0.#');

   
   /// Create parameterized single topic - overall respondents measures, including all sub-constructs
      let vSet_AcrossRespondents_pConstruct_Current = {<[Respondent Group]-={"Principal"}, [Construct]={"$1"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)>};
      let vCount_AcrossRespondents_pConstruct_Current = Count(distinct $(vSet_AcrossRespondents_pConstruct_Current($1)) RespondentID);
      let vSet1_AcrossRespondents_pConstruct_Current = {1<[Respondent Group]-={"Principal"}, [Construct]={"$1"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)>};
      let vCount1_AcrossRespondents_pConstruct_Current = Count(distinct $(vSet1_AcrossRespondents_pConstruct_Current($1)) RespondentID);
      
      let vAvgScore_AcrossRespondents_pConstruct_Current = RangeAvg(
        Sum($(vSet_pRespondent_pConstruct_Current(Student, $1)) SumScaledScore_1)/Sum($(vSet_pRespondent_pConstruct_Current(Student, $1)) NCompleted_1), Sum($(vSet_pRespondent_pConstruct_Current(Student, $1)) SumScaledScore_2)/Sum($(vSet_pRespondent_pConstruct_Current(Student, $1)) NCompleted_2), Sum($(vSet_pRespondent_pConstruct_Current(Student, $1)) SumScaledScore_3)/Sum($(vSet_pRespondent_pConstruct_Current(Student, $1)) NCompleted_3), Sum($(vSet_pRespondent_pConstruct_Current(Student, $1)) SumScaledScore_4)/Sum($(vSet_pRespondent_pConstruct_Current(Student, $1)) NCompleted_4), Sum($(vSet_pRespondent_pConstruct_Current(Student, $1)) SumScaledScore_5)/Sum($(vSet_pRespondent_pConstruct_Current(Student, $1)) NCompleted_5), Sum($(vSet_pRespondent_pConstruct_Current(Student, $1)) SumScaledScore_6)/Sum($(vSet_pRespondent_pConstruct_Current(Student, $1)) NCompleted_6), Sum($(vSet_pRespondent_pConstruct_Current(Student, $1)) SumScaledScore_7)/Sum($(vSet_pRespondent_pConstruct_Current(Student, $1)) NCompleted_7),
        Sum($(vSet_pRespondent_pConstruct_Current(Parent, $1)) SumScaledScore_1)/Sum($(vSet_pRespondent_pConstruct_Current(Parent, $1)) NCompleted_1), Sum($(vSet_pRespondent_pConstruct_Current(Parent, $1)) SumScaledScore_2)/Sum($(vSet_pRespondent_pConstruct_Current(Parent, $1)) NCompleted_2), Sum($(vSet_pRespondent_pConstruct_Current(Parent, $1)) SumScaledScore_3)/Sum($(vSet_pRespondent_pConstruct_Current(Parent, $1)) NCompleted_3), Sum($(vSet_pRespondent_pConstruct_Current(Parent, $1)) SumScaledScore_4)/Sum($(vSet_pRespondent_pConstruct_Current(Parent, $1)) NCompleted_4), Sum($(vSet_pRespondent_pConstruct_Current(Parent, $1)) SumScaledScore_5)/Sum($(vSet_pRespondent_pConstruct_Current(Parent, $1)) NCompleted_5), Sum($(vSet_pRespondent_pConstruct_Current(Parent, $1)) SumScaledScore_6)/Sum($(vSet_pRespondent_pConstruct_Current(Parent, $1)) NCompleted_6), Sum($(vSet_pRespondent_pConstruct_Current(Parent, $1)) SumScaledScore_7)/Sum($(vSet_pRespondent_pConstruct_Current(Parent, $1)) NCompleted_7),
        Sum($(vSet_pRespondent_pConstruct_Current(Teacher, $1)) SumScaledScore_1)/Sum($(vSet_pRespondent_pConstruct_Current(Teacher, $1)) NCompleted_1), Sum($(vSet_pRespondent_pConstruct_Current(Teacher, $1)) SumScaledScore_2)/Sum($(vSet_pRespondent_pConstruct_Current(Teacher, $1)) NCompleted_2), Sum($(vSet_pRespondent_pConstruct_Current(Teacher, $1)) SumScaledScore_3)/Sum($(vSet_pRespondent_pConstruct_Current(Teacher, $1)) NCompleted_3), Sum($(vSet_pRespondent_pConstruct_Current(Teacher, $1)) SumScaledScore_4)/Sum($(vSet_pRespondent_pConstruct_Current(Teacher, $1)) NCompleted_4), Sum($(vSet_pRespondent_pConstruct_Current(Teacher, $1)) SumScaledScore_5)/Sum($(vSet_pRespondent_pConstruct_Current(Teacher, $1)) NCompleted_5), Sum($(vSet_pRespondent_pConstruct_Current(Teacher, $1)) SumScaledScore_6)/Sum($(vSet_pRespondent_pConstruct_Current(Teacher, $1)) NCompleted_6), Sum($(vSet_pRespondent_pConstruct_Current(Teacher, $1)) SumScaledScore_7)/Sum($(vSet_pRespondent_pConstruct_Current(Teacher, $1)) NCompleted_7)
      );
      let vmmAvgScore_AcrossRespondents_pConstruct_Current = Num(
          If(Only([Construct]) = 'Professional Capacity' or Only([Respondent Group]) = 'Teacher',
            If($(vMinTeachers) <= $(vCount_AcrossRespondents_pConstruct_Current($1)), $(vAvgScore_AcrossRespondents_pConstruct_Current($1)), Null()),
            If($(vMinStudents) <= $(vCount_AcrossRespondents_pConstruct_Current($1)), $(vAvgScore_AcrossRespondents_pConstruct_Current($1)), Null())
          )
        , '#0.#');

      let vSet_AcrossRespondents_pConstruct_Previous = {<[Respondent Group]-={"Principal"}, [Construct]={"$1"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)>};
      let vCount_AcrossRespondents_pConstruct_Previous = Count(distinct $(vSet_AcrossRespondents_pConstruct_Previous($1, $2)) RespondentID);
      let vAvgScore_AcrossRespondents_pConstruct_Previous = RangeAvg(
        Sum($(vSet_pRespondent_pConstruct_Previous(Student, $1)) SumScaledScore_1)/Sum($(vSet_pRespondent_pConstruct_Previous(Student, $1)) NCompleted_1), Sum($(vSet_pRespondent_pConstruct_Previous(Student, $1)) SumScaledScore_2)/Sum($(vSet_pRespondent_pConstruct_Previous(Student, $1)) NCompleted_2), Sum($(vSet_pRespondent_pConstruct_Previous(Student, $1)) SumScaledScore_3)/Sum($(vSet_pRespondent_pConstruct_Previous(Student, $1)) NCompleted_3), Sum($(vSet_pRespondent_pConstruct_Previous(Student, $1)) SumScaledScore_4)/Sum($(vSet_pRespondent_pConstruct_Previous(Student, $1)) NCompleted_4), Sum($(vSet_pRespondent_pConstruct_Previous(Student, $1)) SumScaledScore_5)/Sum($(vSet_pRespondent_pConstruct_Previous(Student, $1)) NCompleted_5), Sum($(vSet_pRespondent_pConstruct_Previous(Student, $1)) SumScaledScore_6)/Sum($(vSet_pRespondent_pConstruct_Previous(Student, $1)) NCompleted_6), Sum($(vSet_pRespondent_pConstruct_Previous(Student, $1)) SumScaledScore_7)/Sum($(vSet_pRespondent_pConstruct_Previous(Student, $1)) NCompleted_7),
        Sum($(vSet_pRespondent_pConstruct_Previous(Parent, $1)) SumScaledScore_1)/Sum($(vSet_pRespondent_pConstruct_Previous(Parent, $1)) NCompleted_1), Sum($(vSet_pRespondent_pConstruct_Previous(Parent, $1)) SumScaledScore_2)/Sum($(vSet_pRespondent_pConstruct_Previous(Parent, $1)) NCompleted_2), Sum($(vSet_pRespondent_pConstruct_Previous(Parent, $1)) SumScaledScore_3)/Sum($(vSet_pRespondent_pConstruct_Previous(Parent, $1)) NCompleted_3), Sum($(vSet_pRespondent_pConstruct_Previous(Parent, $1)) SumScaledScore_4)/Sum($(vSet_pRespondent_pConstruct_Previous(Parent, $1)) NCompleted_4), Sum($(vSet_pRespondent_pConstruct_Previous(Parent, $1)) SumScaledScore_5)/Sum($(vSet_pRespondent_pConstruct_Previous(Parent, $1)) NCompleted_5), Sum($(vSet_pRespondent_pConstruct_Previous(Parent, $1)) SumScaledScore_6)/Sum($(vSet_pRespondent_pConstruct_Previous(Parent, $1)) NCompleted_6), Sum($(vSet_pRespondent_pConstruct_Previous(Parent, $1)) SumScaledScore_7)/Sum($(vSet_pRespondent_pConstruct_Previous(Parent, $1)) NCompleted_7),
        Sum($(vSet_pRespondent_pConstruct_Previous(Teacher, $1)) SumScaledScore_1)/Sum($(vSet_pRespondent_pConstruct_Previous(Teacher, $1)) NCompleted_1), Sum($(vSet_pRespondent_pConstruct_Previous(Teacher, $1)) SumScaledScore_2)/Sum($(vSet_pRespondent_pConstruct_Previous(Teacher, $1)) NCompleted_2), Sum($(vSet_pRespondent_pConstruct_Previous(Teacher, $1)) SumScaledScore_3)/Sum($(vSet_pRespondent_pConstruct_Previous(Teacher, $1)) NCompleted_3), Sum($(vSet_pRespondent_pConstruct_Previous(Teacher, $1)) SumScaledScore_4)/Sum($(vSet_pRespondent_pConstruct_Previous(Teacher, $1)) NCompleted_4), Sum($(vSet_pRespondent_pConstruct_Previous(Teacher, $1)) SumScaledScore_5)/Sum($(vSet_pRespondent_pConstruct_Previous(Teacher, $1)) NCompleted_5), Sum($(vSet_pRespondent_pConstruct_Previous(Teacher, $1)) SumScaledScore_6)/Sum($(vSet_pRespondent_pConstruct_Previous(Teacher, $1)) NCompleted_6), Sum($(vSet_pRespondent_pConstruct_Previous(Teacher, $1)) SumScaledScore_7)/Sum($(vSet_pRespondent_pConstruct_Previous(Teacher, $1)) NCompleted_7)
      );
      let vmmAvgScore_AcrossRespondents_pConstruct_Previous = Num(
          If(Only([Construct]) = 'Professional Capacity' or Only([Respondent Group]) = 'Teacher',
            If($(vMinTeachers) <= $(vCount_AcrossRespondents_pConstruct_Previous($1)), $(vAvgScore_AcrossRespondents_pConstruct_Previous($1)), Null()),
            If($(vMinStudents) <= $(vCount_AcrossRespondents_pConstruct_Previous($1)), $(vAvgScore_AcrossRespondents_pConstruct_Previous($1)), Null())
          )
        , '#0.#');

      let vmmAvgScore_AcrossRespondents_pConstruct_YOY = Num($(vmmAvgScore_AcrossRespondents_pConstruct_Current($1)) - $(vmmAvgScore_AcrossRespondents_pConstruct_Previous($1)),'##0.#');
    


    /// Create parameterized single topic - single respondents measures, where we will display each of the subconstructs
      let vSet_pRespondent_pConstruct_AllSubConstructs_Current = {<[Respondent Group]={"$1"}, [Construct]={"$2"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)>};
      let vCount_pRespondent_pConstruct_AllSubConstructs_Current = Count(distinct $(vSet_pRespondent_pConstruct_AllSubConstructs_Current($1, $2)) RespondentID);
      let vSet1_pRespondent_pConstruct_AllSubConstructs_Current = {1<[Respondent Group]={"$1"}, [Construct]={"$2"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)>};
      let vCount1_pRespondent_pConstruct_AllSubConstructs_Current = Count(distinct $(vSet1_pRespondent_pConstruct_AllSubConstructs_Current($1, $2)) RespondentID);
      let vAvgScore_pRespondent_pConstruct_AllSubConstructs_Current = Sum($(vSet_pRespondent_pConstruct_AllSubConstructs_Current($1, $2)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_pConstruct_AllSubConstructs_Current($1, $2)) SubConstruct_NCompleted);
      let vmmAvgScore_pRespondent_pConstruct_AllSubConstructs_Current = Num(IF($(vMin$1s) <= $(vCount_pRespondent_pConstruct_AllSubConstructs_Current($1, $2)), $(vAvgScore_pRespondent_pConstruct_AllSubConstructs_Current($1, $2)), Null()),'##0.#');
    
      let vSet_pRespondent_pConstruct_AllSubConstructs_Previous = {<[Respondent Group]={"$1"}, [Construct]={"$2"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)>};
      let vCount_pRespondent_pConstruct_AllSubConstructs_Previous = Count(distinct $(vSet_pRespondent_pConstruct_AllSubConstructs_Previous($1, $2)) RespondentID);
      let vAvgScore_pRespondent_pConstruct_AllSubConstructs_Previous = Sum($(vSet_pRespondent_pConstruct_AllSubConstructs_Previous($1, $2)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_pConstruct_AllSubConstructs_Previous($1, $2)) SubConstruct_NCompleted);
      let vmmAvgScore_pRespondent_pConstruct_AllSubConstructs_Previous = Num(IF($(vMin$1s) <= $(vCount_pRespondent_pConstruct_AllSubConstructs_Previous($1, $2)), $(vAvgScore_pRespondent_pConstruct_AllSubConstructs_Previous($1, $2)), Null()),'##0.#');
      

      let vmmAvgScore_pRespondent_pConstruct_AllSubConstructs_YOY = Num($(vmmAvgScore_pRespondent_pConstruct_AllSubConstructs_Current($1, $2)) - $(vmmAvgScore_pRespondent_pConstruct_AllSubConstructs_Previous($1, $2)),'##0.#');

   
   /// Create parameterized single topic - overall respondents measures, where we will display each of the subconstructs
      let vSet_AcrossRespondents_pConstruct_AllSubConstructs_Current = {<[Respondent Group]-={"Principal"}, [Construct]={"$1"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)>};
      let vCount_AcrossRespondents_pConstruct_AllSubConstructs_Current = Count(distinct $(vSet_AcrossRespondents_pConstruct_AllSubConstructs_Current($1)) RespondentID);
      let vSet1_AcrossRespondents_pConstruct_AllSubConstructs_Current = {1<[Respondent Group]-={"Principal"}, [Construct]={"$1"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)>};
      let vCount1_AcrossRespondents_pConstruct_AllSubConstructs_Current = Count(distinct $(vSet1_AcrossRespondents_pConstruct_AllSubConstructs_Current($1)) RespondentID);
      
      let vAvgScore_AcrossRespondents_pConstruct_AllSubConstructs_Current = RangeAvg(
        Sum($(vSet_pRespondent_pConstruct_AllSubConstructs_Current(Student, $1)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_pConstruct_AllSubConstructs_Current(Student, $1)) SubConstruct_NCompleted),
        Sum($(vSet_pRespondent_pConstruct_AllSubConstructs_Current(Parent, $1)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_pConstruct_AllSubConstructs_Current(Parent, $1)) SubConstruct_NCompleted),
        Sum($(vSet_pRespondent_pConstruct_AllSubConstructs_Current(Teacher, $1)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_pConstruct_AllSubConstructs_Current(Teacher, $1)) SubConstruct_NCompleted)
      );
      let vmmAvgScore_AcrossRespondents_pConstruct_AllSubConstructs_Current = Num(
          If(Only([Construct]) = 'Professional Capacity' or Only([Respondent Group]) = 'Teacher',
            If($(vMinTeachers) <= $(vCount_AcrossRespondents_pConstruct_AllSubConstructs_Current($1)), $(vAvgScore_AcrossRespondents_pConstruct_AllSubConstructs_Current($1)), Null()),
            If($(vMinStudents) <= $(vCount_AcrossRespondents_pConstruct_AllSubConstructs_Current($1)), $(vAvgScore_AcrossRespondents_pConstruct_AllSubConstructs_Current($1)), Null())
          )
        , '#0.#');

      let vSet_AcrossRespondents_pConstruct_AllSubConstructs_Previous = {<[Respondent Group]-={"Principal"}, [Construct]={"$1"}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)>};
      let vCount_AcrossRespondents_pConstruct_AllSubConstructs_Previous = Count(distinct $(vSet_AcrossRespondents_pConstruct_AllSubConstructs_Previous($1, $2)) RespondentID);
      let vAvgScore_AcrossRespondents_pConstruct_AllSubConstructs_Previous = RangeAvg(
        Sum($(vSet_pRespondent_pConstruct_AllSubConstructs_Previous(Student, $1)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_pConstruct_AllSubConstructs_Previous(Student, $1)) SubConstruct_NCompleted),
        Sum($(vSet_pRespondent_pConstruct_AllSubConstructs_Previous(Parent, $1)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_pConstruct_AllSubConstructs_Previous(Parent, $1)) SubConstruct_NCompleted),
        Sum($(vSet_pRespondent_pConstruct_AllSubConstructs_Previous(Teacher, $1)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_pConstruct_AllSubConstructs_Previous(Teacher, $1)) SubConstruct_NCompleted)
      );
      let vmmAvgScore_AcrossRespondents_pConstruct_AllSubConstructs_Previous = Num(
          If(Only([Construct]) = 'Professional Capacity' or Only([Respondent Group]) = 'Teacher',
            If($(vMinTeachers) <= $(vCount_AcrossRespondents_pConstruct_AllSubConstructs_Previous($1)), $(vAvgScore_AcrossRespondents_pConstruct_AllSubConstructs_Previous($1)), Null()),
            If($(vMinStudents) <= $(vCount_AcrossRespondents_pConstruct_AllSubConstructs_Previous($1)), $(vAvgScore_AcrossRespondents_pConstruct_AllSubConstructs_Previous($1)), Null())
          )
        , '#0.#');

      let vmmAvgScore_AcrossRespondents_pConstruct_AllSubConstructs_YOY = Num($(vmmAvgScore_AcrossRespondents_pConstruct_AllSubConstructs_Current($1)) - $(vmmAvgScore_AcrossRespondents_pConstruct_AllSubConstructs_Previous($1)),'##0.#');
    
 

    /// Create parameterized overall respondent, single sub-topic - single subtopic measures  
      let vSet_AcrossRespondents_pConstruct_pSubConstruct_Current = {<[Respondent Group]-={"Principal"}, [Construct]={"$1"}, [SubConstruct]={"$2"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)>};
      let vCount_AcrossRespondents_pConstruct_pSubConstruct_Current = Count(distinct $(vSet_AcrossRespondents_pConstruct_pSubConstruct_Current($1, $2)) RespondentID);
      let vAvgScore_AcrossRespondents_pConstruct_pSubConstruct_Current = RangeAvg(
        Sum($(vSet_pRespondent_pConstruct_pSubConstruct_Current(Student, $1, $2)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_pConstruct_pSubConstruct_Current(Student, $1, $2)) SubConstruct_NCompleted),
        Sum($(vSet_pRespondent_pConstruct_pSubConstruct_Current(Parent, $1, $2)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_pConstruct_pSubConstruct_Current(Parent, $1, $2)) SubConstruct_NCompleted),
        Sum($(vSet_pRespondent_pConstruct_pSubConstruct_Current(Teacher, $1, $2)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_pConstruct_pSubConstruct_Current(Teacher, $1, $2)) SubConstruct_NCompleted)
      );
      let vmmAvgScore_AcrossRespondents_pConstruct_pSubConstruct_Current = Num(
          If(Only([Construct]) = 'Professional Capacity' or Only([Respondent Group]) = 'Teacher',
            If($(vMinTeachers) <= $(vCount_AcrossRespondents_pConstruct_pSubConstruct_Current($1, $2)), $(vAvgScore_AcrossRespondents_pConstruct_pSubConstruct_Current($1, $2)), Null()),
            If($(vMinStudents) <= $(vCount_AcrossRespondents_pConstruct_pSubConstruct_Current($1, $2)), $(vAvgScore_AcrossRespondents_pConstruct_pSubConstruct_Current($1, $2)), Null())
          )
        , '#0.#');

      let vSet_AcrossRespondents_pConstruct_pSubConstruct_Previous = {<[Respondent Group]-={"Principal"}, [Construct]={"$1"}, [SubConstruct]={"$2"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)>};
      let vCount_AcrossRespondents_pConstruct_pSubConstruct_Previous = Count(distinct $(vSet_AcrossRespondents_pConstruct_pSubConstruct_Previous($1, $2)) RespondentID);
      let vAvgScore_AcrossRespondents_pConstruct_pSubConstruct_Previous = RangeAvg(
        Sum($(vSet_pRespondent_pConstruct_pSubConstruct_Previous(Student, $1, $2)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_pConstruct_pSubConstruct_Previous(Student, $1, $2)) SubConstruct_NCompleted),
        Sum($(vSet_pRespondent_pConstruct_pSubConstruct_Previous(Parent, $1, $2)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_pConstruct_pSubConstruct_Previous(Parent, $1, $2)) SubConstruct_NCompleted),
        Sum($(vSet_pRespondent_pConstruct_pSubConstruct_Previous(Teacher, $1, $2)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_pConstruct_pSubConstruct_Previous(Teacher, $1, $2)) SubConstruct_NCompleted)
      );
      let vmmAvgScore_AcrossRespondents_pConstruct_pSubConstruct_Previous = Num(
          If(Only([Construct]) = 'Professional Capacity' or Only([Respondent Group]) = 'Teacher',
            If($(vMinTeachers) <= $(vCount_AcrossRespondents_pConstruct_pSubConstruct_Previous($1, $2)), $(vAvgScore_AcrossRespondents_pConstruct_pSubConstruct_Previous($1, $2)), Null()),
            If($(vMinStudents) <= $(vCount_AcrossRespondents_pConstruct_pSubConstruct_Previous($1, $2)), $(vAvgScore_AcrossRespondents_pConstruct_pSubConstruct_Previous($1, $2)), Null())
          )
        , '#0.#');
      let vmmAvgScore_AcrossRespondents_pConstruct_pSubConstruct_YOY = Num($(vmmAvgScore_AcrossRespondents_pConstruct_pSubConstruct_Current($1, $2)) - $(vmmAvgScore_AcrossRespondents_pConstruct_pSubConstruct_Previous($1, $2)),'##0.#');
        

    /// Create parameterized each topic - overall respondents measures, where we will display each of the subconstructs
      let vCount_AcrossRespondents_AllConstructs = Count(distinct {<[Respondent Group]-={"Principal"}$(vSetOpts_EPD)>} RespondentID);
      let vAvgScore_AcrossRespondents_AllConstructs = RangeAvg(
        Sum($(vSet_pRespondent_AllConstructs(Student)) SumScaledScore_1)/Sum($(vSet_pRespondent_AllConstructs(Student)) NCompleted_1), Sum($(vSet_pRespondent_AllConstructs(Student)) SumScaledScore_2)/Sum($(vSet_pRespondent_AllConstructs(Student)) NCompleted_2), Sum($(vSet_pRespondent_AllConstructs(Student)) SumScaledScore_3)/Sum($(vSet_pRespondent_AllConstructs(Student)) NCompleted_3), Sum($(vSet_pRespondent_AllConstructs(Student)) SumScaledScore_4)/Sum($(vSet_pRespondent_AllConstructs(Student)) NCompleted_4), Sum($(vSet_pRespondent_AllConstructs(Student)) SumScaledScore_5)/Sum($(vSet_pRespondent_AllConstructs(Student)) NCompleted_5), Sum($(vSet_pRespondent_AllConstructs(Student)) SumScaledScore_6)/Sum($(vSet_pRespondent_AllConstructs(Student)) NCompleted_6), Sum($(vSet_pRespondent_AllConstructs(Student)) SumScaledScore_7)/Sum($(vSet_pRespondent_AllConstructs(Student)) NCompleted_7),
        Sum($(vSet_pRespondent_AllConstructs(Parent)) SumScaledScore_1)/Sum($(vSet_pRespondent_AllConstructs(Parent)) NCompleted_1), Sum($(vSet_pRespondent_AllConstructs(Parent)) SumScaledScore_2)/Sum($(vSet_pRespondent_AllConstructs(Parent)) NCompleted_2), Sum($(vSet_pRespondent_AllConstructs(Parent)) SumScaledScore_3)/Sum($(vSet_pRespondent_AllConstructs(Parent)) NCompleted_3), Sum($(vSet_pRespondent_AllConstructs(Parent)) SumScaledScore_4)/Sum($(vSet_pRespondent_AllConstructs(Parent)) NCompleted_4), Sum($(vSet_pRespondent_AllConstructs(Parent)) SumScaledScore_5)/Sum($(vSet_pRespondent_AllConstructs(Parent)) NCompleted_5), Sum($(vSet_pRespondent_AllConstructs(Parent)) SumScaledScore_6)/Sum($(vSet_pRespondent_AllConstructs(Parent)) NCompleted_6), Sum($(vSet_pRespondent_AllConstructs(Parent)) SumScaledScore_7)/Sum($(vSet_pRespondent_AllConstructs(Parent)) NCompleted_7),
        Sum($(vSet_pRespondent_AllConstructs(Teacher)) SumScaledScore_1)/Sum($(vSet_pRespondent_AllConstructs(Teacher)) NCompleted_1), Sum($(vSet_pRespondent_AllConstructs(Teacher)) SumScaledScore_2)/Sum($(vSet_pRespondent_AllConstructs(Teacher)) NCompleted_2), Sum($(vSet_pRespondent_AllConstructs(Teacher)) SumScaledScore_3)/Sum($(vSet_pRespondent_AllConstructs(Teacher)) NCompleted_3), Sum($(vSet_pRespondent_AllConstructs(Teacher)) SumScaledScore_4)/Sum($(vSet_pRespondent_AllConstructs(Teacher)) NCompleted_4), Sum($(vSet_pRespondent_AllConstructs(Teacher)) SumScaledScore_5)/Sum($(vSet_pRespondent_AllConstructs(Teacher)) NCompleted_5), Sum($(vSet_pRespondent_AllConstructs(Teacher)) SumScaledScore_6)/Sum($(vSet_pRespondent_AllConstructs(Teacher)) NCompleted_6), Sum($(vSet_pRespondent_AllConstructs(Teacher)) SumScaledScore_7)/Sum($(vSet_pRespondent_AllConstructs(Teacher)) NCompleted_7)
      );
      let vmmAvgScore_AcrossRespondents_AllConstructs = Num(
          If(Only([Construct]) = 'Professional Capacity' or Only([Respondent Group]) = 'Teacher',
            If($(vMinTeachers) <= $(vCount_AcrossRespondents_AllConstructs), $(vAvgScore_AcrossRespondents_AllConstructs), Null()),
            If($(vMinStudents) <= $(vCount_AcrossRespondents_AllConstructs), $(vAvgScore_AcrossRespondents_AllConstructs), Null())
          )
        , '#0.#');

      let vSet_AcrossRespondents_AllConstructs_Current = {<[Respondent Group]-={"Principal"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)>};
      let vCount_AcrossRespondents_AllConstructs_Current = Count(distinct $(vSet_AcrossRespondents_AllConstructs_Current) RespondentID);
      let vSet1_AcrossRespondents_AllConstructs_Current = {1<[Respondent Group]-={"Principal"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)>};
      let vCount1_AcrossRespondents_AllConstructs_Current = Count(distinct $(vSet1_AcrossRespondents_AllConstructs_Current) RespondentID);
      let vSet1_AcrossRespondents_AllConstructs_KeepConstruct_Current = {1<[Respondent Group]-={"Principal"}, YearEnd={$(=$(vMaxYearEnd))}, [Construct]=P([Construct])$(vSetOpts_EPD)>};
      let vCount1_AcrossRespondents_AllConstructs_KeepConstruct_Current = Count(distinct $(vSet1_AcrossRespondents_AllConstructs_KeepConstruct_Current) RespondentID);
      let vAvgScore_AcrossRespondents_AllConstructs_Current = RangeAvg(
        Sum($(vSet_pRespondent_AllConstructs_Current(Student)) SumScaledScore_1)/Sum($(vSet_pRespondent_AllConstructs_Current(Student)) NCompleted_1), Sum($(vSet_pRespondent_AllConstructs_Current(Student)) SumScaledScore_2)/Sum($(vSet_pRespondent_AllConstructs_Current(Student)) NCompleted_2), Sum($(vSet_pRespondent_AllConstructs_Current(Student)) SumScaledScore_3)/Sum($(vSet_pRespondent_AllConstructs_Current(Student)) NCompleted_3), Sum($(vSet_pRespondent_AllConstructs_Current(Student)) SumScaledScore_4)/Sum($(vSet_pRespondent_AllConstructs_Current(Student)) NCompleted_4), Sum($(vSet_pRespondent_AllConstructs_Current(Student)) SumScaledScore_5)/Sum($(vSet_pRespondent_AllConstructs_Current(Student)) NCompleted_5), Sum($(vSet_pRespondent_AllConstructs_Current(Student)) SumScaledScore_6)/Sum($(vSet_pRespondent_AllConstructs_Current(Student)) NCompleted_6), Sum($(vSet_pRespondent_AllConstructs_Current(Student)) SumScaledScore_7)/Sum($(vSet_pRespondent_AllConstructs_Current(Student)) NCompleted_7),
        Sum($(vSet_pRespondent_AllConstructs_Current(Parent)) SumScaledScore_1)/Sum($(vSet_pRespondent_AllConstructs_Current(Parent)) NCompleted_1), Sum($(vSet_pRespondent_AllConstructs_Current(Parent)) SumScaledScore_2)/Sum($(vSet_pRespondent_AllConstructs_Current(Parent)) NCompleted_2), Sum($(vSet_pRespondent_AllConstructs_Current(Parent)) SumScaledScore_3)/Sum($(vSet_pRespondent_AllConstructs_Current(Parent)) NCompleted_3), Sum($(vSet_pRespondent_AllConstructs_Current(Parent)) SumScaledScore_4)/Sum($(vSet_pRespondent_AllConstructs_Current(Parent)) NCompleted_4), Sum($(vSet_pRespondent_AllConstructs_Current(Parent)) SumScaledScore_5)/Sum($(vSet_pRespondent_AllConstructs_Current(Parent)) NCompleted_5), Sum($(vSet_pRespondent_AllConstructs_Current(Parent)) SumScaledScore_6)/Sum($(vSet_pRespondent_AllConstructs_Current(Parent)) NCompleted_6), Sum($(vSet_pRespondent_AllConstructs_Current(Parent)) SumScaledScore_7)/Sum($(vSet_pRespondent_AllConstructs_Current(Parent)) NCompleted_7),
        Sum($(vSet_pRespondent_AllConstructs_Current(Teacher)) SumScaledScore_1)/Sum($(vSet_pRespondent_AllConstructs_Current(Teacher)) NCompleted_1), Sum($(vSet_pRespondent_AllConstructs_Current(Teacher)) SumScaledScore_2)/Sum($(vSet_pRespondent_AllConstructs_Current(Teacher)) NCompleted_2), Sum($(vSet_pRespondent_AllConstructs_Current(Teacher)) SumScaledScore_3)/Sum($(vSet_pRespondent_AllConstructs_Current(Teacher)) NCompleted_3), Sum($(vSet_pRespondent_AllConstructs_Current(Teacher)) SumScaledScore_4)/Sum($(vSet_pRespondent_AllConstructs_Current(Teacher)) NCompleted_4), Sum($(vSet_pRespondent_AllConstructs_Current(Teacher)) SumScaledScore_5)/Sum($(vSet_pRespondent_AllConstructs_Current(Teacher)) NCompleted_5), Sum($(vSet_pRespondent_AllConstructs_Current(Teacher)) SumScaledScore_6)/Sum($(vSet_pRespondent_AllConstructs_Current(Teacher)) NCompleted_6), Sum($(vSet_pRespondent_AllConstructs_Current(Teacher)) SumScaledScore_7)/Sum($(vSet_pRespondent_AllConstructs_Current(Teacher)) NCompleted_7)
      );
      let vmmAvgScore_AcrossRespondents_AllConstructs_Current = Num(
          If(Only([Construct]) = 'Professional Capacity' or Only([Respondent Group]) = 'Teacher',
            If($(vMinTeachers) <= $(vCount_AcrossRespondents_AllConstructs_Current), $(vAvgScore_AcrossRespondents_AllConstructs_Current), Null()),
            If($(vMinStudents) <= $(vCount_AcrossRespondents_AllConstructs_Current), $(vAvgScore_AcrossRespondents_AllConstructs_Current), Null())
          )
        , '#0.#');

      let vSet_AcrossRespondents_AllConstructs_Previous = {<[Respondent Group]-={"Principal"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)>};
      let vCount_AcrossRespondents_AllConstructs_Previous = Count(distinct $(vSet_AcrossRespondents_AllConstructs_Previous) RespondentID);
      let vAvgScore_AcrossRespondents_AllConstructs_Previous = RangeAvg(
        Sum($(vSet_pRespondent_AllConstructs_Previous(Student)) SumScaledScore_1)/Sum($(vSet_pRespondent_AllConstructs_Previous(Student)) NCompleted_1), Sum($(vSet_pRespondent_AllConstructs_Previous(Student)) SumScaledScore_2)/Sum($(vSet_pRespondent_AllConstructs_Previous(Student)) NCompleted_2), Sum($(vSet_pRespondent_AllConstructs_Previous(Student)) SumScaledScore_3)/Sum($(vSet_pRespondent_AllConstructs_Previous(Student)) NCompleted_3), Sum($(vSet_pRespondent_AllConstructs_Previous(Student)) SumScaledScore_4)/Sum($(vSet_pRespondent_AllConstructs_Previous(Student)) NCompleted_4), Sum($(vSet_pRespondent_AllConstructs_Previous(Student)) SumScaledScore_5)/Sum($(vSet_pRespondent_AllConstructs_Previous(Student)) NCompleted_5), Sum($(vSet_pRespondent_AllConstructs_Previous(Student)) SumScaledScore_6)/Sum($(vSet_pRespondent_AllConstructs_Previous(Student)) NCompleted_6), Sum($(vSet_pRespondent_AllConstructs_Previous(Student)) SumScaledScore_7)/Sum($(vSet_pRespondent_AllConstructs_Previous(Student)) NCompleted_7),
        Sum($(vSet_pRespondent_AllConstructs_Previous(Parent)) SumScaledScore_1)/Sum($(vSet_pRespondent_AllConstructs_Previous(Parent)) NCompleted_1), Sum($(vSet_pRespondent_AllConstructs_Previous(Parent)) SumScaledScore_2)/Sum($(vSet_pRespondent_AllConstructs_Previous(Parent)) NCompleted_2), Sum($(vSet_pRespondent_AllConstructs_Previous(Parent)) SumScaledScore_3)/Sum($(vSet_pRespondent_AllConstructs_Previous(Parent)) NCompleted_3), Sum($(vSet_pRespondent_AllConstructs_Previous(Parent)) SumScaledScore_4)/Sum($(vSet_pRespondent_AllConstructs_Previous(Parent)) NCompleted_4), Sum($(vSet_pRespondent_AllConstructs_Previous(Parent)) SumScaledScore_5)/Sum($(vSet_pRespondent_AllConstructs_Previous(Parent)) NCompleted_5), Sum($(vSet_pRespondent_AllConstructs_Previous(Parent)) SumScaledScore_6)/Sum($(vSet_pRespondent_AllConstructs_Previous(Parent)) NCompleted_6), Sum($(vSet_pRespondent_AllConstructs_Previous(Parent)) SumScaledScore_7)/Sum($(vSet_pRespondent_AllConstructs_Previous(Parent)) NCompleted_7),
        Sum($(vSet_pRespondent_AllConstructs_Previous(Teacher)) SumScaledScore_1)/Sum($(vSet_pRespondent_AllConstructs_Previous(Teacher)) NCompleted_1), Sum($(vSet_pRespondent_AllConstructs_Previous(Teacher)) SumScaledScore_2)/Sum($(vSet_pRespondent_AllConstructs_Previous(Teacher)) NCompleted_2), Sum($(vSet_pRespondent_AllConstructs_Previous(Teacher)) SumScaledScore_3)/Sum($(vSet_pRespondent_AllConstructs_Previous(Teacher)) NCompleted_3), Sum($(vSet_pRespondent_AllConstructs_Previous(Teacher)) SumScaledScore_4)/Sum($(vSet_pRespondent_AllConstructs_Previous(Teacher)) NCompleted_4), Sum($(vSet_pRespondent_AllConstructs_Previous(Teacher)) SumScaledScore_5)/Sum($(vSet_pRespondent_AllConstructs_Previous(Teacher)) NCompleted_5), Sum($(vSet_pRespondent_AllConstructs_Previous(Teacher)) SumScaledScore_6)/Sum($(vSet_pRespondent_AllConstructs_Previous(Teacher)) NCompleted_6), Sum($(vSet_pRespondent_AllConstructs_Previous(Teacher)) SumScaledScore_7)/Sum($(vSet_pRespondent_AllConstructs_Previous(Teacher)) NCompleted_7)
      );
      let vmmAvgScore_AcrossRespondents_AllConstructs_Previous = Num(
          If(Only([Construct]) = 'Professional Capacity' or Only([Respondent Group]) = 'Teacher',
            If($(vMinTeachers) <= $(vCount_AcrossRespondents_AllConstructs_Previous), $(vAvgScore_AcrossRespondents_AllConstructs_Previous), Null()),
            If($(vMinStudents) <= $(vCount_AcrossRespondents_AllConstructs_Previous), $(vAvgScore_AcrossRespondents_AllConstructs_Previous), Null())
          )
        , '#0.#');

      let vmmAvgScore_AcrossRespondents_AllConstructs_YOY = Num($(vmmAvgScore_AcrossRespondents_AllConstructs_Current) - $(vmmAvgScore_AcrossRespondents_AllConstructs_Previous),'##0.#');
      

    /// Create parameterized each sub-topic - overall respondents measures, where we will display each of the subconstructs
      let vCount_AcrossRespondents_AllSubConstructs = Count(distinct {<[Respondent Group]-={"Principal"}$(vSetOpts_EPD)>} RespondentID);
      let vAvgScore_AcrossRespondents_AllSubConstructs = RangeAvg(
        Sum($(vSet_pRespondent_AllSubConstructs(Student)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_AllSubConstructs(Student)) SubConstruct_NCompleted), 
        Sum($(vSet_pRespondent_AllSubConstructs(Parent)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_AllSubConstructs(Parent)) SubConstruct_NCompleted), 
        Sum($(vSet_pRespondent_AllSubConstructs(Teacher)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_AllSubConstructs(Teacher)) SubConstruct_NCompleted)
      );
      let vmmAvgScore_AcrossRespondents_AllSubConstructs = Num(
          If(Only([Construct]) = 'Professional Capacity' or Only([Respondent Group]) = 'Teacher',
            If($(vMinTeachers) <= $(vCount_AcrossRespondents_AllSubConstructs), $(vAvgScore_AcrossRespondents_AllSubConstructs), Null()),
            If($(vMinStudents) <= $(vCount_AcrossRespondents_AllSubConstructs), $(vAvgScore_AcrossRespondents_AllSubConstructs), Null())
          )
        , '#0.#');

      let vSet_AcrossRespondents_AllSubConstructs_Current = {<[Respondent Group]-={"Principal"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)>};
      let vCount_AcrossRespondents_AllSubConstructs_Current = Count(distinct $(vSet_AcrossRespondents_AllSubConstructs_Current) RespondentID);
      let vSet1_AcrossRespondents_AllSubConstructs_Current = {1<[Respondent Group]-={"Principal"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)>};
      let vCount1_AcrossRespondents_AllSubConstructs_Current = Count(distinct $(vSet1_AcrossRespondents_AllSubConstructs_Current) RespondentID);
      let vAvgScore_AcrossRespondents_AllSubConstructs_Current = RangeAvg(
        Sum($(vSet_pRespondent_AllSubConstructs_Current(Student)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_AllSubConstructs_Current(Student)) SubConstruct_NCompleted), 
        Sum($(vSet_pRespondent_AllSubConstructs_Current(Parent)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_AllSubConstructs_Current(Parent)) SubConstruct_NCompleted), 
        Sum($(vSet_pRespondent_AllSubConstructs_Current(Teacher)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_AllSubConstructs_Current(Teacher)) SubConstruct_NCompleted)
      );
      let vmmAvgScore_AcrossRespondents_AllSubConstructs_Current = Num(
          If(Only([Construct]) = 'Professional Capacity' or Only([Respondent Group]) = 'Teacher',
            If($(vMinTeachers) <= $(vCount_AcrossRespondents_AllSubConstructs_Current), $(vAvgScore_AcrossRespondents_AllSubConstructs_Current), Null()),
            If($(vMinStudents) <= $(vCount_AcrossRespondents_AllSubConstructs_Current), $(vAvgScore_AcrossRespondents_AllSubConstructs_Current), Null())
          )
        , '#0.#');

      let vSet_AcrossRespondents_AllSubConstructs_Previous = {<[Respondent Group]-={"Principal"}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)>};
      let vCount_AcrossRespondents_AllSubConstructs_Previous = Count(distinct $(vSet_AcrossRespondents_AllSubConstructs_Previous) RespondentID);
      let vAvgScore_AcrossRespondents_AllSubConstructs_Previous = RangeAvg(
        Sum($(vSet_pRespondent_AllSubConstructs_Previous(Student)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_AllSubConstructs_Previous(Student)) SubConstruct_NCompleted), 
        Sum($(vSet_pRespondent_AllSubConstructs_Previous(Parent)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_AllSubConstructs_Previous(Parent)) SubConstruct_NCompleted), 
        Sum($(vSet_pRespondent_AllSubConstructs_Previous(Teacher)) SubConstruct_SumScaledScore)/Sum($(vSet_pRespondent_AllSubConstructs_Previous(Teacher)) SubConstruct_NCompleted)
      );
      let vmmAvgScore_AcrossRespondents_AllSubConstructs_Previous = Num(
          If(Only([Construct]) = 'Professional Capacity' or Only([Respondent Group]) = 'Teacher',
            If($(vMinTeachers) <= $(vCount_AcrossRespondents_AllSubConstructs_Previous), $(vAvgScore_AcrossRespondents_AllSubConstructs_Previous), Null()),
            If($(vMinStudents) <= $(vCount_AcrossRespondents_AllSubConstructs_Previous), $(vAvgScore_AcrossRespondents_AllSubConstructs_Previous), Null())
          )
        , '#0.#');
      let vmmAvgScore_AcrossRespondents_AllSubConstructs_YOY = Num($(vmmAvgScore_AcrossRespondents_AllSubConstructs_Current) - $(vmmAvgScore_AcrossRespondents_AllSubConstructs_Previous),'##0.#');
      
      
  //// Drilldowns
      let vCount1_AcrossRespondents_AllConstructsToSubconstructs_Current = if(GetPossibleCount([Construct]) > 1, 
        $(vCount1_AcrossRespondents_AllConstructs_Current), $(vCount1_AcrossRespondents_AllConstructs_KeepConstruct_Current)
      );

      let vCount1_pRespondent_AllConstructsToSubconstructs_Current = if(GetPossibleCount([Construct]) > 1, 
        $(vCount1_pRespondent_AllConstructs_Current($1)), $(vCount1_pRespondent_AllConstructs_KeepConstruct_Current($1))
      );
      
      let vmmAvgScore_AcrossRespondents_AllConstructsToSubconstructs_Current = if(GetPossibleCount([Construct]) > 1, 
        $(vmmAvgScore_AcrossRespondents_AllConstructs_Current), $(vmmAvgScore_AcrossRespondents_AllSubConstructs_Current)
      );

      let vmmAvgScore_AcrossRespondents_AllConstructsToSubconstructs_YOY = if(GetPossibleCount([Construct]) > 1, 
        $(vmmAvgScore_AcrossRespondents_AllConstructs_YOY), $(vmmAvgScore_AcrossRespondents_AllSubConstructs_YOY)
      );

      let vmmAvgScore_pRespondent_AllConstructsToSubconstructs = if(GetPossibleCount([Construct]) > 1, 
        $(vmmAvgScore_pRespondent_AllConstructs($1)), $(vmmAvgScore_pRespondent_AllSubConstructs($1))
      );
      let vmmAvgScore_pRespondent_AllConstructsToSubconstructs_Current = if(GetPossibleCount([Construct]) > 1, 
        $(vmmAvgScore_pRespondent_AllConstructs_Current($1)), $(vmmAvgScore_pRespondent_AllSubConstructs_Current($1))
      );

      let vmmAvgScore_pRespondent_AllConstructsToSubconstructs_YOY = if(GetPossibleCount([Construct]) > 1, 
        $(vmmAvgScore_pRespondent_AllConstructs_YOY($1)), $(vmmAvgScore_pRespondent_AllSubConstructs_YOY($1))
      );



/*

    /// Create sets for different year configurations, only to be used for differentiated respondent groups
      let vSet_Essential_Current = {<YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)>};
      let vSet_Essential_Previous = {<YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)>};
      let vSet_Essential_3Years = {<YearEnd={">=$(=$(vLastLastYearEnd))"}$(vSetOpts_EPD)>};
      let vSet_Essential_AllYears = {$};

      let vCount_Essential_pYear = Count(distinct $(vSet_Essential_$1) RespondentID);

      let vAvgScore_EssentialConstruct_pYear = RangeAvg(Sum($(vSet_Essential_$1) SumScaledScore_1)/Sum($(vSet_Essential_$1) NCompleted_1), Sum($(vSet_Essential_$1) SumScaledScore_2)/Sum($(vSet_Essential_$1) NCompleted_2), Sum($(vSet_Essential_$1) SumScaledScore_3)/Sum($(vSet_Essential_$1) NCompleted_3), Sum($(vSet_Essential_$1) SumScaledScore_4)/Sum($(vSet_Essential_$1) NCompleted_4), Sum($(vSet_Essential_$1) SumScaledScore_5)/Sum($(vSet_Essential_$1) NCompleted_5), Sum($(vSet_Essential_$1) SumScaledScore_6)/Sum($(vSet_Essential_$1) NCompleted_6), Sum($(vSet_Essential_$1) SumScaledScore_7)/Sum($(vSet_Essential_$1) NCompleted_7));
      let vAvgScore_EssentialSubConstruct_pYear = Sum($(vSet_Essential_$1) SubConstruct_SumScaledScore) / Sum($(vSet_Essential_$1) SubConstruct_NCompleted);

      let vAvgScore_EssentialConstructToSubConstruct_pYear = if(GetPossibleCount([Essential Construct]) > 1, 
        $(vAvgScore_EssentialConstruct_pYear($1)), $(vAvgScore_EssentialSubConstruct_pYear($1))
      );

      let vmmAvgScore_EssentialConstruct_pYear = Num(
        If(Only([Respondent Group]) = 'Principal', If($(vMinPrincipals) <= $(vCount_Essential_pYear($1)), $(vAvgScore_EssentialConstruct_pYear($1)), Null()),
        If(Only([Respondent Group]) = 'Teacher', If($(vMinTeachers) <= $(vCount_Essential_pYear($1)), $(vAvgScore_EssentialConstruct_pYear($1)), Null()),
        If(Only([Respondent Group]) = 'Parent', If($(vMinParents) <= $(vCount_Essential_pYear($1)), $(vAvgScore_EssentialConstruct_pYear($1)), Null()),
        If(Only([Respondent Group]) = 'Student', If($(vMinStudents) <= $(vCount_Essential_pYear($1)), $(vAvgScore_EssentialConstruct_pYear($1)), Null()),
        If($(vMinStudents) <= $(vCount_Essential_pYear($1)), $(vAvgScore_EssentialConstruct_pYear($1)), Null())
        ))))  
        , '#0.#');
      let vmmAvgScore_EssentialSubConstruct_pYear = Num(
        If(Only([Respondent Group]) = 'Principal', If($(vMinPrincipals) <= $(vCount_Essential_pYear($1)), $(vAvgScore_EssentialSubConstruct_pYear($1)), Null()),
        If(Only([Respondent Group]) = 'Teacher', If($(vMinTeachers) <= $(vCount_Essential_pYear($1)), $(vAvgScore_EssentialSubConstruct_pYear($1)), Null()),
        If(Only([Respondent Group]) = 'Parent', If($(vMinParents) <= $(vCount_Essential_pYear($1)), $(vAvgScore_EssentialSubConstruct_pYear($1)), Null()),
        If(Only([Respondent Group]) = 'Student', If($(vMinStudents) <= $(vCount_Essential_pYear($1)), $(vAvgScore_EssentialSubConstruct_pYear($1)), Null()),
        If($(vMinStudents) <= $(vCount_Essential_pYear($1)), $(vAvgScore_EssentialSubConstruct_pYear($1)), Null())
        ))))  
        , '#0.#');
      let vmmAvgScore_EssentialConstructToSubConstruct_pYear = Num(
        If(Only([Respondent Group]) = 'Principal', If($(vMinPrincipals) <= $(vCount_Essential_pYear($1)), $(vAvgScore_EssentialConstructToSubConstruct_pYear($1)), Null()),
        If(Only([Respondent Group]) = 'Teacher', If($(vMinTeachers) <= $(vCount_Essential_pYear($1)), $(vAvgScore_EssentialConstructToSubConstruct_pYear($1)), Null()),
        If(Only([Respondent Group]) = 'Parent', If($(vMinParents) <= $(vCount_Essential_pYear($1)), $(vAvgScore_EssentialConstructToSubConstruct_pYear($1)), Null()),
        If(Only([Respondent Group]) = 'Student', If($(vMinStudents) <= $(vCount_Essential_pYear($1)), $(vAvgScore_EssentialConstructToSubConstruct_pYear($1)), Null()),
        If($(vMinStudents) <= $(vCount_Essential_pYear($1)), $(vAvgScore_EssentialConstructToSubConstruct_pYear($1)), Null())
        ))))  
        , '#0.#');

      let vAvgScore_EssentialConstruct_YOY = $(vAvgScore_EssentialConstruct_pYear(Current)) - $(vAvgScore_EssentialConstruct_pYear(Previous));
      let vAvgScore_EssentialSubConstruct_YOY = $(vAvgScore_EssentialSubConstruct_pYear(Current)) - $(vAvgScore_EssentialSubConstruct_pYear(Previous));
      let vAvgScore_EssentialConstructToSubConstruct_YOY = $(vAvgScore_EssentialConstructToSubConstruct_pYear(Current)) - $(vAvgScore_EssentialConstructToSubConstruct_pYear(Previous));
      
      let vmmAvgScore_EssentialConstruct_YOY = Num($(vmmAvgScore_EssentialConstruct_pYear(Current)) - $(vmmAvgScore_EssentialConstruct_pYear(Previous))
        , '#0.#');
      let vmmAvgScore_EssentialSubConstruct_YOY = Num($(vmmAvgScore_EssentialSubConstruct_pYear(Current)) - $(vmmAvgScore_EssentialSubConstruct_pYear(Previous))
        , '#0.#');
      let vmmAvgScore_EssentialConstructToSubConstruct_YOY = Num($(vmmAvgScore_EssentialConstructToSubConstruct_pYear(Current)) - $(vmmAvgScore_EssentialConstructToSubConstruct_pYear(Previous))
        , '#0.#');

    /// Use the following for rollups across respondent groups (AcrossRespondents)
      let vSet_Essential_pRespondent_Current = {<[Respondent Group] = {$1}, YearEnd={$(=$(vMaxYearEnd))}$(vSetOpts_EPD)>};
      let vSet_Essential_pRespondent_Previous = {<[Respondent Group] = {$1}, YearEnd={$(=$(vLastYearEnd))}$(vSetOpts_EPD)>};
      let vSet_Essential_pRespondent_3Years = {<[Respondent Group] = {$1}, YearEnd={">=$(=$(vLastLastYearEnd))"}$(vSetOpts_EPD)>};
      let vSet_Essential_pRespondent_AllYears = {<[Respondent Group] = {$1}$(vSetOpts_EPD)>};

      let vCount_Essential_pRespondent_pYear = Count(distinct $(vSet_Essential_pRespodent_$2($1)) RespondentID);
      let vCount_Essential_AcrossRespondents_pYear = Count(distinct $(vSet_Essential_$1) RespondentID);


      let vAvgScore_EssentialConstruct_AcrossRespondents_pYear = RangeAvg(
        Sum($(vSet_Essential_pRespondent_$1("Student")) SumScaledScore_1)/Sum($(vSet_Essential_pRespondent_$1("Student")) NCompleted_1), Sum($(vSet_Essential_pRespondent_$1("Student")) SumScaledScore_2)/Sum($(vSet_Essential_pRespondent_$1("Student")) NCompleted_2), Sum($(vSet_Essential_pRespondent_$1("Student")) SumScaledScore_3)/Sum($(vSet_Essential_pRespondent_$1("Student")) NCompleted_3), Sum($(vSet_Essential_pRespondent_$1("Student")) SumScaledScore_4)/Sum($(vSet_Essential_pRespondent_$1("Student")) NCompleted_4), Sum($(vSet_Essential_pRespondent_$1("Student")) SumScaledScore_5)/Sum($(vSet_Essential_pRespondent_$1("Student")) NCompleted_5), Sum($(vSet_Essential_pRespondent_$1("Student")) SumScaledScore_6)/Sum($(vSet_Essential_pRespondent_$1("Student")) NCompleted_6), Sum($(vSet_Essential_pRespondent_$1("Student")) SumScaledScore_7)/Sum($(vSet_Essential_pRespondent_$1("Student")) NCompleted_7),
        Sum($(vSet_Essential_pRespondent_$1("Parent")) SumScaledScore_1)/Sum($(vSet_Essential_pRespondent_$1("Parent")) NCompleted_1), Sum($(vSet_Essential_pRespondent_$1("Parent")) SumScaledScore_2)/Sum($(vSet_Essential_pRespondent_$1("Parent")) NCompleted_2), Sum($(vSet_Essential_pRespondent_$1("Parent")) SumScaledScore_3)/Sum($(vSet_Essential_pRespondent_$1("Parent")) NCompleted_3), Sum($(vSet_Essential_pRespondent_$1("Parent")) SumScaledScore_4)/Sum($(vSet_Essential_pRespondent_$1("Parent")) NCompleted_4), Sum($(vSet_Essential_pRespondent_$1("Parent")) SumScaledScore_5)/Sum($(vSet_Essential_pRespondent_$1("Parent")) NCompleted_5), Sum($(vSet_Essential_pRespondent_$1("Parent")) SumScaledScore_6)/Sum($(vSet_Essential_pRespondent_$1("Parent")) NCompleted_6), Sum($(vSet_Essential_pRespondent_$1("Parent")) SumScaledScore_7)/Sum($(vSet_Essential_pRespondent_$1("Parent")) NCompleted_7),
        Sum($(vSet_Essential_pRespondent_$1("Teacher")) SumScaledScore_1)/Sum($(vSet_Essential_pRespondent_$1("Teacher")) NCompleted_1), Sum($(vSet_Essential_pRespondent_$1("Teacher")) SumScaledScore_2)/Sum($(vSet_Essential_pRespondent_$1("Teacher")) NCompleted_2), Sum($(vSet_Essential_pRespondent_$1("Teacher")) SumScaledScore_3)/Sum($(vSet_Essential_pRespondent_$1("Teacher")) NCompleted_3), Sum($(vSet_Essential_pRespondent_$1("Teacher")) SumScaledScore_4)/Sum($(vSet_Essential_pRespondent_$1("Teacher")) NCompleted_4), Sum($(vSet_Essential_pRespondent_$1("Teacher")) SumScaledScore_5)/Sum($(vSet_Essential_pRespondent_$1("Teacher")) NCompleted_5), Sum($(vSet_Essential_pRespondent_$1("Teacher")) SumScaledScore_6)/Sum($(vSet_Essential_pRespondent_$1("Teacher")) NCompleted_6), Sum($(vSet_Essential_pRespondent_$1("Teacher")) SumScaledScore_7)/Sum($(vSet_Essential_pRespondent_$1("Teacher")) NCompleted_7)//,
        //Sum($(vSet_Essential_pRespondent_$1("Principal")) SumScaledScore_1)/Sum($(vSet_Essential_pRespondent_$1("Principal")) NCompleted_1), Sum($(vSet_Essential_pRespondent_$1("Principal")) SumScaledScore_2)/Sum($(vSet_Essential_pRespondent_$1("Principal")) NCompleted_2), Sum($(vSet_Essential_pRespondent_$1("Principal")) SumScaledScore_3)/Sum($(vSet_Essential_pRespondent_$1("Principal")) NCompleted_3), Sum($(vSet_Essential_pRespondent_$1("Principal")) SumScaledScore_4)/Sum($(vSet_Essential_pRespondent_$1("Principal")) NCompleted_4), Sum($(vSet_Essential_pRespondent_$1("Principal")) SumScaledScore_5)/Sum($(vSet_Essential_pRespondent_$1("Principal")) NCompleted_5), Sum($(vSet_Essential_pRespondent_$1("Principal")) SumScaledScore_6)/Sum($(vSet_Essential_pRespondent_$1("Principal")) NCompleted_6), Sum($(vSet_Essential_pRespondent_$1("Principal")) SumScaledScore_7)/Sum($(vSet_Essential_pRespondent_$1("Principal")) NCompleted_7)
      );
      let vAvgScore_EssentialSubConstruct_AcrossRespondents_pYear = RangeAvg(
        Sum($(vSet_Essential_pRespondent_$1("Student")) SubConstruct_SumScaledScore)/Sum($(vSet_Essential_pRespondent_$1("Student")) SubConstruct_NCompleted),
        Sum($(vSet_Essential_pRespondent_$1("Parent")) SubConstruct_SumScaledScore)/Sum($(vSet_Essential_pRespondent_$1("Parent")) SubConstruct_NCompleted),
        Sum($(vSet_Essential_pRespondent_$1("Teacher")) SubConstruct_SumScaledScore)/Sum($(vSet_Essential_pRespondent_$1("Teacher")) SubConstruct_NCompleted)//,
        //Sum($(vSet_Essential_pRespondent_$1("Principal")) SubConstruct_SumScaledScore)/Sum($(vSet_Essential_pRespondent_$1("Principal")) SubConstruct_NCompleted)
      );


      let vAvgScore_EssentialConstructToSubConstruct_AcrossRespondents_pYear = if(GetPossibleCount([Essential Construct]) > 1, 
        $(vAvgScore_EssentialConstruct_AcrossRespondents_pYear($1)), $(vAvgScore_EssentialSubConstruct_AcrossRespondents_pYear($1))
      );

      // only Professional Capacity is a teacher/principal-only construct, all else could include parents/students
      let vmmAvgScore_EssentialConstruct_AcrossRespondents_pYear = Num(
          If(Only([Construct]) = 'Professional Capacity' or Only([Respondent Group]) = 'Teacher',
            If($(vMinTeachers) <= $(vCount_Essential_AcrossRespondents_pYear($1)), $(vAvgScore_EssentialConstruct_AcrossRespondents_pYear($1)), Null()),
            If($(vMinStudents) <= $(vCount_Essential_AcrossRespondents_pYear($1)), $(vAvgScore_EssentialConstruct_AcrossRespondents_pYear($1)), Null())
          )
        , '#0.#');
      let vmmAvgScore_EssentialSubConstruct_AcrossRespondents_pYear = Num(
          If(Only([Construct]) = 'Professional Capacity' or Only([Respondent Group]) = 'Teacher',
            If($(vMinTeachers) <= $(vCount_Essential_AcrossRespondents_pYear($1)), $(vAvgScore_EssentialSubConstruct_AcrossRespondents_pYear($1)), Null()),
            If($(vMinStudents) <= $(vCount_Essential_AcrossRespondents_pYear($1)), $(vAvgScore_EssentialSubConstruct_AcrossRespondents_pYear($1)), Null())
          )
        , '#0.#');
      let vmmAvgScore_EssentialConstructToSubConstruct_AcrossRespondents_pYear = Num(
          If(Only([Construct]) = 'Professional Capacity' or Only([Respondent Group]) = 'Teacher',
            If($(vMinTeachers) <= $(vCount_Essential_AcrossRespondents_pYear($1)), $(vAvgScore_EssentialConstructToSubConstruct_AcrossRespondents_pYear($1)), Null()),
            If($(vMinStudents) <= $(vCount_Essential_AcrossRespondents_pYear($1)), $(vAvgScore_EssentialConstructToSubConstruct_AcrossRespondents_pYear($1)), Null())
          )
        , '#0.#');

      let vAvgScore_EssentialConstruct_YOY = $(vAvgScore_EssentialConstruct_pYear(Current)) - $(vAvgScore_EssentialConstruct_pYear(Previous));
      let vAvgScore_EssentialSubConstruct_YOY = $(vAvgScore_EssentialSubConstruct_pYear(Current)) - $(vAvgScore_EssentialSubConstruct_pYear(Previous));
      let vAvgScore_EssentialConstructToSubConstruct_YOY = $(vAvgScore_EssentialConstructToSubConstruct_pYear(Current)) - $(vAvgScore_EssentialConstructToSubConstruct_pYear(Previous));
      
       let vAvgScore_EssentialConstruct_AcrossRespondents_YOY = Num($(vAvgScore_EssentialConstruct_AcrossRespondents_pYear(Current)) - $(vAvgScore_EssentialConstruct_AcrossRespondents_pYear(Previous))
        , '#0.#');
      let vAvgScore_EssentialSubConstruct_AcrossRespondents_YOY = Num($(vAvgScore_EssentialSubConstruct_AcrossRespondents_pYear(Current)) - $(vAvgScore_EssentialSubConstruct_AcrossRespondents_pYear(Previous))
        , '#0.#');
      let vAvgScore_EssentialConstructToSubconstruct_AcrossRespondents_YOY = Num($(vAvgScore_EssentialConstructToSubconstruct_AcrossRespondents_pYear(Current)) - $(vAvgScore_EssentialConstructToSubconstruct_AcrossRespondents_pYear(Previous))
        , '#0.#');

      let vmmAvgScore_EssentialConstruct_AcrossRespondents_YOY = Num($(vmmAvgScore_EssentialConstruct_AcrossRespondents_pYear(Current)) - $(vmmAvgScore_EssentialConstruct_AcrossRespondents_pYear(Previous))
        , '#0.#');
      let vmmAvgScore_EssentialSubConstruct_AcrossRespondents_YOY = Num($(vmmAvgScore_EssentialSubConstruct_AcrossRespondents_pYear(Current)) - $(vmmAvgScore_EssentialSubConstruct_AcrossRespondents_pYear(Previous))
        , '#0.#');
      let vmmAvgScore_EssentialConstructToSubconstruct_AcrossRespondents_YOY = Num($(vmmAvgScore_EssentialConstructToSubconstruct_AcrossRespondents_pYear(Current)) - $(vmmAvgScore_EssentialConstructToSubconstruct_AcrossRespondents_pYear(Previous))
        , '#0.#');

*/


//// PSSA
  /// For dimensions
    let vCountPSSA_Subject_Current = Count({<Subject={"$(=$(vFocusSubject))"}, YearEnd={$(=$(vMaxYearEnd))} , [Performance Level Code]={">0"} $(vSetOpts_EPD)>} pssaScaledScore);
    let vAvgPSSA_Subject_Current = Avg({<Subject={"$(=$(vFocusSubject))"}, YearEnd={$(=$(vMaxYearEnd))} , [Performance Level Code]={">0"} $(vSetOpts_EPD)>} pssaScaledScore);
    let vmmAvgPSSA_Subject_Current = Num(IF($(vMinStudents) <= $(vCountPSSA_Subject_Current), $(vAvgPSSA_Subject_Current), Null()),'##0.#');
        
  /// for reference lines
    let vAvgPSSA_Subject_Current_District = Avg({1<Subject={"$(=$(vFocusSubject))"}, YearEnd={$(=$(vMaxYearEnd))} , [Performance Level Code]={">0"} $(vSetOpts_EPD)>} pssaScaledScore);
    let vMinPSSA_Subject_Current_District = Min({1<Subject={"$(=$(vFocusSubject))"}, YearEnd={$(=$(vMaxYearEnd))} , [Performance Level Code]={">0"} $(vSetOpts_EPD)>} pssaScaledScore);
    let vMaxPSSA_Subject_Current_District = Max({1<Subject={"$(=$(vFocusSubject))"}, YearEnd={$(=$(vMaxYearEnd))} , [Performance Level Code]={">0"} $(vSetOpts_EPD)>} pssaScaledScore);
    